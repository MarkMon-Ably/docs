---
title: Authentication
meta_description: "Client Library SDK REST API Reference Authentication documentation."
meta_keywords: "Ably, Ably REST, API Reference, REST SDK, REST interface, REST API, Authentication"
section: api
index: 60
languages:
  - javascript
  - nodejs
  - php
  - python
  - ruby
  - java
  - swift
  - objc
  - csharp
jump_to:
  Channel API properties:
    - clientId#client-id
  Channel API methods:
    - authorize
    - createTokenRequest#create-token-request
    - requestToken#request-token
---

inline-toc.
  Methods:
    - authorize
    - createTokenRequest#create-token-request
    - requestToken#request-token
  Properties:
    - clientId#client-id
  Related types:
    - AuthOptions#auth-options
    - TokenDetails#token-details
    - TokenRequest#token-request
    - TokenParams#token-params

The Auth object is available as the <span lang="java">"@auth@ field":/api/rest-sdk#auth</span><span lang="default">"@auth@ property":/api/rest-sdk#auth</span><span lang="csharp">"@Auth@ property":/api/rest-sdk#auth</span><span lang="ruby">"@auth@ attribute":/api/rest-sdk#auth</span> of an "Ably Rest client instance":/api/rest-sdk.

h2(#properties).
  default: Auth Properties
  php: Ably\Auth Properties
  java: io.ably.lib.rest.Auth Members
  ruby: Ably::Auth Attributes
  python: Auth Attributes
  objc,swift: ARTAuth Properties

The <span lang="objc,swift">@ART@</span>@Auth@ object exposes the following public <span lang="default">properties</span><span lang="ruby,python">attributes</span><span lang="java">members</span>:

h6(#client-id).
  default: clientId
  ruby:    client_id
  python:  client_id
  csharp:  ClientId

The client ID string, if any, configured for this client connection. See "identified clients":#identified-clients for more information on trusted client identifiers.

h2(#methods).
  default: Auth Methods
  java: io.ably.lib.rest.Auth Methods
  ruby: Ably::Auth Methods
  php: Ably\Auth Methods
  objc,swift: ARTAuth Methods

h6(#authorize).
  default: authorize
  csharp: Authorize

<a name="authorise"></a>

bq(definition).
  default: authorize("TokenParams":#token-params tokenParams, "AuthOptions":#auth-options authOptions, callback("ErrorInfo":/realtime/types#error-info err, "TokenDetails":#token-details tokenDetails))
  ruby:    "TokenDetails":#token-details authorize("TokenParams":#token-params token_params, "AuthOptions":#auth-options auth_options)
  python:  "TokenDetails":#token-details authorize(token_params="TokenParams":#token-params, auth_options="AuthOptions":#auth-options)
  php:     "TokenDetails":#token-details authorize("TokenParams":#token-params tokenParams, "AuthOptions":#auth-options authOptions)
  java:    "TokenDetails":#token-details authorize("TokenParams":#token-params tokenParams, "AuthOptions":#auth-options authOptions)
  csharp:  Task<TokenDetails> AuthorizeAsync("TokenParams":#token-params tokenParams = null, "AuthOptions":#auth-options options = null);
  swift,objc: authorize(tokenParams: "ARTTokenParams":#token-params?, authOptions: "ARTAuthOptions":#auth-options?, callback: ("ARTTokenDetails":#token-details?, NSError?) -> Void)

Ensures valid auth credentials are present for the library instance. This may rely on an already-known and valid token, and will obtain a new token if necessary or explicitly requested using <span lang="default">"@requestToken@":#request-token</span><span lang="csharp">"@RequestToken@":#request-token</span><span lang="ruby,python">"@request_token@":#request-token</span>.

In the event that a new token request is made, the specified <span lang="ruby,python">@token_params@ and @auth_options@</span><span lang="java,csharp">@tokenParams@ and @authOptions@</span> are used.

The <span lang="ruby,python">@token_params@ and @auth_options@</span><span lang="java,csharp">@tokenParams@ and @authOptions@</span> objects will supplement or override the existing client library defaults, and all subsequent explicit or implicit token requests will use these defaults.

h4. Parameters

- <span lang="ruby,python">token_params</span><span lang="default">tokenParams</span> := <span lang="default">an optional object containing the "token parameters":#token-params</span><span lang="java">an optional "@TokenParams@":#token-params object containing the token parameters</span><span lang="python">an optional Dict containing the "token parameters":#token-params</span><span lang="ruby">an optional set of key value pairs containing the "token parameters":#token-params</span><span lang="php">an optional set of key value pairs in an associative array containing the "token parameters":#token-params</span> for the authorisation request<br>__Type: "@TokenParams@":#token-params__

- <span lang="ruby,python">auth_options</span><span lang="default">authOptions</span> := <span lang="default">an optional object containing the "authentication options":#auth-options</span><span lang="java">an optional "@AuthOptions@":#auth-options object containing the authentication options</span><span lang="python">an optional Dict containing the "authentication options":#auth-options</span><span lang="ruby">an optional set of key value pairs containing the "authentication options":#auth-options</span><span lang="php">an optional set of key value pairs in an associative array containing the "authentication options":#auth-options</span> for the authorisation request<br>__Type: "@AuthOptions@":#auth-options__

- <div lang="jsall">callback</div> := is a function of the form: @function(err, tokenDetails)@
- <div lang="swift,objc">callback</div> := called with a "@ARTTokenDetails@":#token-details object or an error

blang[jsall,objc,swift].
  h4. Callback result

  On success, @tokenDetails@ contains a "@TokenDetails@":#token-details object containing the details of the new or existing token along with the token string.

  On failure to obtain a token, @err@ contains an <span lang="ruby">"@ErrorInfo@":#error-info</span><span lang="objc,swift">@NSError@</span> object with an error response as defined in the "Ably REST API":/rest-api#common documentation.

blang[java,ruby,php,python].
  h4. Returns

  On success, a "@TokenDetails@":#token-details object containing the details of the new or existing token along with the token string is returned.

  Failure to obtain a token will raise an "@AblyException@":#ably-exception.

blang[csharp].
  h4. Returns

  The method is asynchronous and returns a @Task@ which needs to be awaited.

  On success, a "@TokenDetails@":#token-details object containing the details of the new or existing token along with the token string is returned.

  Failure to obtain a token will raise an "@AblyException@":#ably-exception.

h4. Example

bc[jsall]. client.auth.authorize({ clientId: 'bob' }, function(err, tokenDetails) {
  if(err) {
    console.log('An error occurred; err = ' + err.message);
  } else {
    console.log('Success; token = ' + tokenDetails.token);
  }
});

bc[java]. try {
  TokenParams tokenParams = new TokenParams();
  tokenParams.clientId = "bob";
  TokenDetails tokenDetails = client.auth.authorize(tokenParams, null);
  System.out.println("Success; token = " + tokenDetails.token);
} catch(AblyException e) {
  System.out.println("An error occurred; err = " + e.getMessage());
}

bc[csharp]. try
{
  TokenParams tokenParams = new TokenParams { ClientId = "bob" };
  TokenDetails tokenDetails = await client.Auth.AuthorizeAsync(tokenParams);
  Console.WriteLine("Success; token = " + tokenDetails.Token);
}
catch (AblyException e)
{
  Console.WriteLine("An error occurred; err = " + e.Message);
}

bc[ruby]. token_details = client.auth.authorize(client_id: 'bob')
puts "Success; token = #{token_details.token}"

bc[python]. token_details = client.auth.authorize(token_params={'client_id': 'bob'})
print("Success; token = " + str(token_details.token))

bc[php]. $tokenDetails = $client->auth->authorize(array('clientId' => 'bob'));
echo("Success; token = " . $tokenDetails->token);

bc[objc]. ARTTokenParams *tokenParams = [[ARTTokenParams alloc] initWithClientId:@"Bob"];
[client.auth authorize:tokenParams options:nil callback:^(ARTTokenDetails *tokenDetails, NSError *error) {
  if (error) {
    NSLog(@"An error occurred; err = %@", error);
  } else {
    NSLog(@"Success; token = %@", tokenDetails.token);
  }
}];

bc[swift]. let tokenParams = ARTTokenParams(clientId: "Bob")
client.auth.authorize(tokenParams, options: nil) { tokenDetails, error in
  guard let tokenDetails = tokenDetails else {
    print("An error occurred; err = \(error!)")
    return
  }
  print("Success; token = \(tokenDetails.token)")
}


h6(#create-token-request).
  default: createTokenRequest
  csharp:  CreateTokenRequest
  ruby:    create_token_request
  python:  create_token_request

bq(definition).
  default: createTokenRequest("TokenParams":#token-params tokenParams, "AuthOptions":#auth-options authOptions, callback("ErrorInfo":/realtime/types#error-info err, "TokenRequest":#token-request tokenRequest))
  ruby:    "TokenRequest":#token-request create_token_request("TokenParams":#token-params token_params, "AuthOptions":#auth-options auth_options)
  python:  "TokenRequest":#token-request create_token_request(token_params="TokenParams":#token-params, key_name=String, key_secret=String)
  php:     "TokenRequest":#token-request createTokenRequest("TokenParams":#token-params tokenParams, "AuthOptions":#auth-options authOptions)
  java:    "TokenRequest":#token-request createTokenRequest("TokenParams":#token-params tokenParams, "AuthOptions":#auth-options authOptions)
  csharp:  Task<TokenRequest> CreateTokenRequestAsync(TokenParams tokenParams = null, AuthOptions authOptions = null)
  objc,swift: createTokenRequest(tokenParams: "ARTTokenParams":#token-params?, options: "ARTAuthOptions":#auth-options?, callback: ("ARTTokenRequest":#token-request?, NSError?) -> Void)


Creates and signs a token request based on the specified <span lang="ruby,python">@token_params@ and @auth_options@</span><span lang="default">@tokenParams@ and @authOptions@</span>. Note this can only be used when the "API @key@":https://faqs.ably.com/what-is-an-app-api-key value is available locally. Otherwise, signed token requests must be obtained from the key owner. Use this to generate signed token requests in order to implement a token request callback for use by other clients.

To understand why a token request may be issued to clients in favour of a token, see "Token Authentication explained":/core-features/authentication/#token-authentication.

h4. Parameters

- <span lang="ruby,python">token_params</span><span lang="default">tokenParams</span> := <span lang="default">an optional object containing the "token parameters":#token-params</span><span lang="java">an optional "@TokenParams@":#token-params object containing the token parameters</span><span lang="python">an optional Dict containing the "token parameters":#token-params</span><span lang="ruby">an optional set of key value pairs containing the "token parameters":#token-params</span><span lang="php">an optional set of key value pairs in an associative array containing the "token parameters":#token-params</span> for the token request<br>__Type: "@TokenParams@":#token-params__

- <span lang="ruby">auth_options</span><span lang="python">[auth options]</span><span lang="default">authOptions</span> := <span lang="default">an optional object containing the "authentication options":#auth-options</span><span lang="java">an optional "@TokenParams@":#auth-options object containing the authentication options</span><span lang="python">various keyword arguments with the "authentication options":#auth-options</span><span lang="ruby">an optional set of key value pairs containing the "authentication options":#auth-options</span><span lang="php">an optional set of key value pairs in an associative array containing the "authentication options":#auth-options</span><span lang="objc,swift">an optional "@ARTTokenParams@":#token-params containing the "authentication options":#auth-options</span> for the token request<br>__Type: "@AuthOptions@":#auth-options__

- <div lang="jsall">callback</div> := is a function of the form: @function(err, tokenRequest)@
- <div lang="swift,objc">callback</div> := called with a "@ARTTokenRequest@":#token-request object or an error

blang[jsall,objc,swift].
  h4. Callback result

  On success, @tokenRequest@ contains a "@TokenRequest@":#token-request JSON object.

  On failure to issue a "@TokenRequest@":#token-request, @err@ contains an "@ErrorInfo@":#error-info object with an error response as defined in the "Ably REST API":/rest-api#common documentation.

blang[java,ruby,php,python].
  h4. Returns

  On success, a "@TokenRequest@":#token-request object is returned.

  Failure to issue a "@TokenRequest@":#token-request will raise an "@AblyException@":#ably-exception.

blang[csharp].
  h4. Returns

  The method is asynchronous and returns a @Task@ which needs to be awaited.

  On success, a "@TokenRequest@":#token-request object is returned.

  Failure to issue a "@TokenRequest@":#token-request will raise an "@AblyException@":#ably-exception.

h4. Example

bc[jsall]. client.auth.createTokenRequest({ clientId: 'bob' }, function(err, tokenRequest) {
  if(err) {
    console.log('An error occurred; err = ' + err.message);
  } else {
    console.log('Success; token request = ' + tokenRequest);
  }
});

bc[java]. try {
  TokenParams tokenParams = new TokenParams();
  tokenParams.clientId = "bob";
  TokenRequest tokenRequest = client.auth.createTokenRequest(tokenParams, null);
  System.out.println("Success; token request issued");
} catch(AblyException e) {
  System.out.println("An error occurred; err = " + e.getMessage());
}

bc[csharp]. try
{
  TokenParams tokenParams = new TokenParams { ClientId = "bob" };
  var tokenRequest = await client.Auth.CreateTokenRequestAsync(tokenParams);
  Console.WriteLine("Success; token request issued");
}
catch (AblyException e)
{
  Console.WriteLine("An error occurred; err = " + e.Message);
}

bc[ruby]. token_request = client.auth.create_token_request(client_id: 'bob')
puts "Success; token request = #{token_request}"

bc[python]. token_request = client.auth.create_token_request(token_params={'client_id': 'bob'})
print("Success; token request = ' + str(token_request)

bc[php]. $tokenRequest = $client->auth->createTokenRequest(array('clientId' => 'bob'))
echo("Success; token request = " . $tokenRequest);

bc[objc]. ARTTokenParams *tokenParams = [[ARTTokenParams alloc] initWithClientId:@"Bob"];
[client.auth createTokenRequest:tokenParams options:nil callback:^(ARTTokenRequest *tokenRequest, NSError *error) {
    if (error) {
        NSLog(@"An error occurred; err = %@", error);
    } else {
        NSLog(@"Success; token request = %@", tokenRequest);
    }
}];

bc[swift]. let tokenParams = ARTTokenParams(clientId: "Bob")
client.auth.createTokenRequest(tokenParams, options: nil) { tokenRequest, error in
    guard let tokenRequest = tokenRequest else {
        print("An error occurred; err = \(error!)")
        return
    }
    print("Success; token request = \(tokenRequest)")
}

h6(#request-token).
  default:  requestToken
  ruby:     request_token
  python:   request_token
  csharp:   RequestToken

bq(definition).
  default: requestToken("TokenParams":#token-params tokenParams, "AuthOptions":#auth-options authOptions, callback("ErrorInfo":/realtime/types#error-info err, "TokenDetails":#token-details tokenDetails))
  ruby:    "TokenDetails":#token-details request_token("TokenParams":#token-params token_params, "AuthOptions":#auth-options auth_options)
  python:  "TokenDetails":#token-details request_token(token_params="TokenParams":#token-params, key_name=String, key_secret=None, auth_callback=Lambda, auth_url=String, auth_method=String, auth_headers=Dict, auth_params=Dict, query_time=Boolean)
  php:     "TokenDetails":#token-details requestToken("TokenParams":#token-params tokenParams, "AuthOptions":#auth-options authAptions)
  csharp:  Task<TokenDetails> RequestTokenAsync(TokenParams tokenParams = null, AuthOptions options = null)
  java:    "TokenDetails":#token-details requestToken("TokenParams":#token-params tokenParams, "AuthOptions":#auth-options authOptions)
  objc,swift: requestToken(tokenParams: "ARTTokenParams":#token-params?, withOptions: "ARTAuthOptions":#auth-options?, callback: ("ARTTokenDetails":#token-details?, NSError?) -> Void)

Calls the "<span lang="default">@requestToken@</span><span lang="csharp">@RequestToken@</span> REST API endpoint":/rest-api#request-token to obtain a token according to the specified <span lang="ruby,python">@token_params@ and @auth_options@</span><span lang="default">@tokenParams@ and @authOptions@</span>.

Both <span lang="ruby">@auth_options@ and @token_params@</span><span lang="java">@authOptions@ and @tokenParams@</span> are optional. When they are omitted or <span lang="default">@null@</span><span lang="java">@Null@</span><span lang="python">@None@</span><span lang="ruby,objc,swift">@nil@</span>, the default token parameters and authentication options for the client library are used, as specified in the @ClientOptions@ when the client library was instantiated, or later updated with an explicit "<span lang="default">@authorize@</span><span lang="csharp">@Authorize@</span>":#authorize request.

To understand why a token request may be issued to clients in favour of a token, see "Token Authentication explained":/core-features/authentication/#token-authentication.

h4. Parameters

- <span lang="ruby,python">token_params</span><span lang="default">tokenParams</span> := <span lang="default">an optional object containing the "token parameters":#token-params</span><span lang="python">an optional Dict containing the "token parameters":#token-params</span><span lang="java">an optional "@TokenParams@":#token-params object containing the token parameters</span><span lang="ruby">an optional set of key value pairs containing the "token parameters":#token-params</span><span lang="php">an optional set of key value pairs in an associative array containing the "token parameters":#token-params</span> for the requested token<br>__Type: "@TokenParams@":#token-params__

- <span lang="python">[auth options]</span><span lang="ruby">auth_options</span><span lang="default">authOptions</span> := <span lang="default">an optional object containing the "authentication options":#auth-options</span><span lang="python">various keyword arguments with the "authentication options":#auth-options</span><span lang="java">an optional "@TokenParams@":#auth-options object containing the authentication options</span><span lang="ruby">an optional set of key value pairs containing the "authentication options":#auth-options</span><span lang="php">an optional set of key value pairs in an associative array containing the "authentication options":#auth-options</span> for the requested token<br>__Type: "@AuthOptions@":#auth-options__

- <div lang="jsall">callback</div> := is a function of the form: @function(err, tokenDetails)@
- <div lang="swift,objc">callback</div> := called with a "@ARTTokenDetails@":#token-details object or an error

blang[jsall,objc,swift].
  h4. Callback result

  On success, @tokenDetails@ contains a "@TokenDetails@":#token-details object containing the details of the new token along with the token string.

  On failure to obtain a token, @err@ contains an <span lang="ruby">"@ErrorInfo@":#error-info</span><span lang="objc,swift">@NSError@</span> object with an error response as defined in the "Ably REST API":/rest-api#common documentation.

blang[java,ruby,php,python].
  h4. Returns

  On success, a "@TokenDetails@":#token-details object containing the details of the new token along with the token string is returned.

  Failure to obtain a token will raise an "@AblyException@":#ably-exception.

blang[csharp].
  h4. Returns

  The method is asynchronous and returns a @Task@ which needs to be awaited.

  On success, a "@TokenDetails@":#token-details object containing the details of the new token along with the token string is returned.

  Failure to obtain a token will raise an "@AblyException@":#ably-exception.

h4. Example

bc[jsall]. client.auth.requestToken({ clientId: 'bob'}, function(err, tokenDetails){
  if(err) {
    console.log('An error occurred; err = ' + err.message);
  } else {
    console.log('Success; token = ' + tokenDetails.token);
  }
});

bc[ruby]. token_details = client.auth.request_token(client_id: 'bob')
puts "Success; token = #{token_details.token}"

bc[python]. token_details = client.auth.request_token(token_params={'client_id': 'bob'})
print("Success; token = " + str(token_details.token))

bc[php]. $tokenDetails = $client->auth->requestToken(array('clientId' => 'bob'))
echo("Success; token = " . $tokenDetails->token);

bc[java]. try {
  TokenParams tokenParams = new TokenParams();
  tokenParams.clientId = "bob";
  TokenDetails tokenDetails = client.auth.requestToken(tokenParams, null);
  System.out.println("Success; token = " + tokenDetails.token);
} catch(AblyException e) {
  System.out.println("An error occurred; err = " + e.getMessage());
}

bc[csharp]. try {
  TokenParams tokenParams = new TokenParams { ClientId = "bob" };
  var tokenDetails = await client.Auth.RequestTokenAsync(tokenParams);
  Console.WriteLine("Success; token = " + tokenDetails.Token);
}
catch (AblyException e)
{
  Console.WriteLine("An error occurred; err = " + e.Message);
}

bc[objc]. ARTTokenParams *tokenParams = [[ARTTokenParams alloc] initWithClientId:@"Bob"];
[client.auth requestToken:tokenParams withOptions:nil callback:^(ARTTokenDetails *tokenDetails, NSError *error) {
    if (error) {
        NSLog(@"An error occurred; err = %@", error);
    } else {
        NSLog(@"Success; token = %@", tokenDetails.token);
    }
}];

bc[swift]. let tokenParams = ARTTokenParams(clientId: "Bob")
client.auth.requestToken(tokenParams, withOptions: nil) { tokenDetails, error in
    guard let tokenDetails = tokenDetails else {
        print("An error occurred; err = \(error!)")
        return
    }
    print("Success; token = \(tokenDetails.token)")
}

h2(#related-types). Related types

h3(#auth-options).
  default:   AuthOptions Object
  ruby:      AuthOptions Hash
  java:      io.ably.lib.rest.Auth.AuthOptions

<%= partial partial_version('types/_auth_options') %>

h3(#token-details).
  default: TokenDetails
  objc,swift: ARTTokenDetails
  java:    io.ably.lib.types.TokenDetails
  ruby:    Ably::Models::TokenDetails

<%= partial partial_version('types/_token_details') %>

h3(#token-params).
  default:   TokenParams Object
  objc,swift:   ARTTokenParams
  ruby:      TokenParams Hash
  java:      io.ably.lib.rest.Auth.TokenParams

<%= partial partial_version('types/_token_params') %>

h3(#token-request).
  default:   TokenRequest Object
  objc,swift:   ARTTokenRequest
  ruby:      Ably::Models::TokenRequest
  java:      io.ably.lib.rest.Auth.TokenRequest

<%= partial partial_version('types/_token_request') %>
