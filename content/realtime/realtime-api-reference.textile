---
title: Client Library SDK - Realtime API
meta_description: "Ably Client Library SDK Realtime API Reference. This is the API reference guide for the realtime interface of the Ably Client Library SDK."
meta_keywords: "Ably, Client Library, SDK, Realtime API."
section: realtime
index: 2
languages:
  - javascript
  - nodejs
  - ruby
  - java
  - swift
  - objc
  - csharp
  - flutter
  - go
  - android
jump_to:
  Help with:
    - Auth API#auth-api
    - Channel Metadata API#channel-metadata-api
    - Channels API#channels-api
    - Connection API#connection-api
    - Encryption API#encryption-api
    - History API#history-api
    - Message API#message-api
    - Presence API#presence-api
    - Push API#push-api
    - Statistics API#statistics-api
    - See also#see-also
---

h2(#auth-api). Auth API Reference

inline-toc.
  Properties:
    - clientId#client-id
  Methods:
    - authorize
    - createTokenRequest#create-token-request
    - requestToken#request-token
  Related types:
    - AuthOptions#auth-options
    - TokenDetails#token-details
    - TokenParams#token-params
    - TokenRequest#token-request

The Auth object is available as the <span lang="java">"@auth@ field":/realtime/usage#auth</span><span lang="csharp">"@Auth@ property":/realtime/usage#auth</span><span lang="default">"@auth@ property":/realtime/usage#auth</span><span lang="ruby">"@auth@ attribute":/realtime/usage#auth</span> of an "Ably Realtime client instance":/realtime/usage#constructor.

h3(#properties).
  default: Auth Properties
  java: io.ably.lib.rest.Auth Members
  csharp: IO.Ably.AblyAuth Properties
  ruby: Ably::Auth Attributes
  objc,swift: ARTAuth Properties

The <span lang="objc,swift">@ART@</span>@Auth@ object exposes the following public <span lang="default">properties</span><span lang="ruby">attributes</span><span lang="java">members</span>:

h6(#client-id).
  default: clientId
  ruby:    client_id
  csharp:  ClientId

The client ID string, if any, configured for this client connection. See "identified clients":#identified-clients for more information on trusted client identifiers.

h3(#methods).
  default: Auth Methods
  java: io.ably.lib.rest.Auth Methods
  csharp: IO.Ably.AblyAuth Methods
  ruby: Ably::Auth Methods
  objc,swift: ARTAuth Methods

h6(#authorize).
  default: authorize
  csharp: Authorize
<a name="authorise"></a>authorize

bq(definition).
  default: authorize("TokenParams":#token-params tokenParams, "AuthOptions":#auth-options authOptions, callback("ErrorInfo":/realtime/types#error-info err, "TokenDetails":#token-details tokenDetails))
  ruby:    "Deferrable":/realtime/types#deferrable authorize("TokenParams":#token-params token_params, "AuthOptions":#auth-options auth_options) -> yields "TokenDetails":#token-details
  java:    "TokenDetails":#token-details authorize("TokenParams":#token-params tokenParams, "AuthOptions":#auth-options authOptions)
  csharp:  "Task<TokenDetails>:#token-details AuthorizeAsync("TokenParams:#token-params?, "AuthOptions":#auth-options?)
  swift,objc: authorize(tokenParams: "ARTTokenParams":#token-params?, authOptions: "ARTAuthOptions":#auth-options?, callback: ("ARTTokenDetails":#token-details?, NSError?) -> Void)

Instructs the library to get a new token immediately. Once fetched, it will upgrade the current realtime connection to use the new token, or if not connected, will initiate a connection to Ably once the new token has been obtained. Also stores any <span lang="ruby">@token_params@ and @auth_options@</span><span lang="default">@tokenParams@ and @authOptions@</span> passed in as the new defaults, to be used for all subsequent implicit or explicit token requests.

Any <span lang="ruby">@token_params@ and @auth_options@</span><span lang="default">@tokenParams@ and @authOptions@</span> objects passed in will entirely replace (as opposed to being merged with) the currently client library saved <span lang="ruby">@token_params@ and @auth_options@</span><span lang="default">@tokenParams@ and @authOptions@</span>.

h5. Parameters

- <span lang="ruby">token_params</span><span lang="default">tokenParams</span> := <span lang="default">an optional object containing the "token parameters":#token-params</span><span lang="java">an optional "@TokenParams@":#token-params object containing the "Ably Token":/core-features/authentication#ably-tokens parameters</span><span lang="ruby">an optional set of key value pairs containing the "token parameters":#token-params</span> for the authorization request<br>__Type: "@TokenParams@":#token-params__

- <span lang="ruby">auth_options</span><span lang="default">authOptions</span> := <span lang="default">an optional object containing the "authentication options":#auth-options</span><span lang="java">an optional "@TokenParams@":#auth-options object containing the authentication options</span><span lang="ruby">an optional set of key value pairs containing the "authentication options":#auth-options</span> for the authorization request<br>__Type: "@AuthOptions@":#auth-options__

- <div lang="jsall">callback</div> := is a function of the form: @function(err, tokenDetails)@
- <div lang="ruby">&block</div> := yields a "@TokenDetails@":#token-details object
- <div lang="swift,objc">callback</div> := called with a "@ARTTokenDetails@":#token-details object or an error

blang[objc,swift].
  h5. Callback result

  On success, the callback will be called with the new "@TokenDetails@":#token-details object only once the realtime connection has been successfully upgraded to use the new token.

  On failure to obtain an token or upgrade the token, the connection will move to the @SUSPENDED@ or @FAILED@ state, and the callback will be called with  @err@ containing an @NSError@ object with the error response as defined in the "Ably REST API":/rest-api#common documentation.

  The @authorize@ callback can therefore be used to only trigger an event once the new token has taken effect. This can be useful if, for example, you want to do attach to a new channel following a new channel capability being applied to the connection.

blang[jsall].
  h5. Callback result

  On success, the callback will be called with the new "@TokenDetails@":#token-details only once the realtime connection has been successfully upgraded to use the new token.

  On failure to obtain a token or upgrade the token, the connection will move to the @SUSPENDED@ or @FAILED@ state, and the callback will be called with @err@ containing an "@ErrorInfo@":/realtime/types#error-info object with the error response as defined in the "Ably REST API":/rest-api#common documentation.

  The @authorize@ callback can be used to trigger an event once the new token has taken effect. This can be useful if, for example, you want to do attach to a new channel following a new channel capability being applied to the connection.

blang[java].
  h5. Returns

  On success, a new "@TokenDetails@":#token-details is returned only once the realtime connection has been successfully upgraded to use the new "Ably Token":/core-features/authentication#ably-tokens.

  On failure to obtain a token or upgrade the token, the connection will move to the @SUSPENDED@ or @FAILED@ state and an "@AblyException@":#ably-exception will be raised with the error response as defined in the "Ably REST API":/rest-api#common documentation.

  The synchronous @authorize@ method can therefore be used to run subsequent code only once the new token has taken effect. This can be useful if, for example, you want to do attach to a new channel following a new channel capability being applied to the connection.

blang[csharp].
  h5. Returns

  Returns a @Task<TokenDetails>@ which needs to be awaited.

  On success, a new "@TokenDetails@":#token-details is returned only once the realtime connection has been successfully upgraded to use the new token.

  On failure to obtain a token or upgrade the token, the connection will move to the @SUSPENDED@ or @FAILED@ state and an "@AblyException@":#ably-exception will be raised with the error response as defined in the "Ably REST API":/rest-api#common documentation.

  By waiting for the @authorize@ method return value, it can be used to run subsequent code only once the new token has taken effect. This can be useful if, for example, you want to do attach to a new channel following a new channel capability being applied to the connection.

blang[ruby].
  h5. Returns

  A "@Deferrable@":/realtime/types#deferrable object is returned from this method.

  On success, the registered success callbacks for the "@Deferrable@":/realtime/types#deferrable and any block provided to this method yields a "@TokenDetails@":#token-details only once the realtime connection has been successfully upgraded to use the new token.

  On failure to obtain a token or upgrade the token, the connection will move to the @SUSPENDED@ or @FAILED@ state, triggering the @errback@ callbacks of the "@Deferrable@":/realtime/types#deferrable with an "@ErrorInfo@":#error-info object with the error response as defined in the "Ably REST API":/rest-api#common documentation.

  The @authorize@ callbacks can therefore be used to trigger an event once the new "Ably Token":/core-features/authentication#ably-tokens has taken effect. This can be useful if, for example, you want to do attach to a new channel following a new channel capability being applied to the connection.

h5. Example

bc[jsall]. client.auth.authorize({ clientId: 'bob' }, function(err, tokenDetails) {
  if(err) {
    console.log('An error occurred; err = ' + err.toString());
  } else {
    console.log('Success! Realtime connection upgraded with new token: ' +
      tokenDetails.token);
  }
});

bc[java]. try {
  TokenParams tokenParams = new TokenParams();
  tokenParams.clientId = "bob";
  TokenDetails tokenDetails = client.auth.authorize(tokenParams, null);
  System.out.println("Success; token = " + tokenDetails.token);
} catch(AblyException e) {
  System.out.println("An error occurred; err = " + e.getMessage());
}

bc[csharp]. try {
  TokenParams tokenParams = new TokenParams {ClientId = "bob"};
  TokenDetails tokenDetails = await client.Auth.AuthorizeAsync(tokenParams);
  Console.WriteLine("Success; Token = " + tokenDetails.Token);
} catch (AblyException e) {
  Console.WriteLine("An error occurred; Error = " + e.Message);
}

bc[ruby]. client.auth.authorize(client_id: 'bob') do |token_details|
  puts "Success; token = #{token_details.token}"
end

bc[objc]. ARTTokenParams *tokenParams = [[ARTTokenParams alloc] initWithClientId:@"Bob"];
[client.auth authorize:tokenParams options:nil callback:^(ARTTokenDetails *tokenDetails, NSError *error) {
    if (error) {
        NSLog(@"An error occurred; err = %@", error);
    } else {
        NSLog(@"Success; token = %@", tokenDetails.token);
    }
}];

bc[swift]. let tokenParams = ARTTokenParams(clientId: "Bob")
client.auth.authorize(tokenParams, options: nil) { tokenDetails, error in
    guard let tokenDetails = tokenDetails else {
        print("An error occurred; err = \(error!)")
        return
    }
    print("Success; token = \(tokenDetails.token)")
}

h6(#create-token-request).
  default: createTokenRequest
  ruby:    create_token_request
  csharp:  CreateTokenRequestAsync

bq(definition).
  default: createTokenRequest("TokenParams":#token-params tokenParams, "AuthOptions":#auth-options authOptions, callback("ErrorInfo":/realtime/types#error-info err, "TokenRequest":#token-request tokenRequest))
  ruby:    "Deferrable":/realtime/types#deferrable create_token_request("TokenParams":#token-params token_params, "AuthOptions":#auth-options auth_options) -> yields "TokenRequest":#token-request
  java:    "TokenRequest":#token-request createTokenRequest("TokenParams":#token-params tokenParams, "AuthOptions":#auth-options authOptions)
  csharp:  Task<"TokenRequest":#token-request> CreateTokenRequestAsync("TokenParams":#token-params tokenParams, "AuthOptions":#auth-options authOptions)
  objc,swift: createTokenRequest(tokenParams: "ARTTokenParams":#token-params?, options: "ARTAuthOptions":#auth-options?, callback: ("ARTTokenRequest":#token-request?, NSError?) -> Void)

Creates and signs an Ably "@TokenRequest@":#request-token based on the specified (or if none specified, the client library stored) <span lang="ruby">@token_params@ and @auth_options@</span><span lang="default">@tokenParams@ and @authOptions@</span>. Note this can only be used when the "API @key@":https://faqs.ably.com/what-is-an-app-api-key value is available locally. Otherwise, the Ably "@TokenRequest@":#request-token must be obtained from the key owner. Use this to generate Ably "@TokenRequests@":#request-token in order to implement an "Ably Token":/core-features/authentication#ably-tokens request callback for use by other clients.

Both <span lang="ruby">@auth_options@ and @token_params@</span><span lang="default">@authOptions@ and @tokenParams@</span> are optional. When omitted or @null@, the default token parameters and authentication options for the client library are used, as specified in the @ClientOptions@ when the client library was instantiated, or later updated with an explicit "<span lang="default">@authorize@</span><span lang="csharp">@Authorize@</span>":#authorize request.  Values passed in will be used instead of (rather than being merged with) the default values.

To understand why an Ably "@TokenRequest@":#request-token may be issued to clients in favor of a token, see "Token Authentication explained":/core-features/authentication/#token-authentication.

h5. Parameters

- <span lang="ruby">token_params</span><span lang="default">tokenParams</span> := <span lang="default">an optional object containing the "token parameters":#token-params</span><span lang="java">an optional "@TokenParams@":#token-params object containing the token parameters</span><span lang="ruby">an optional set of key value pairs containing the "token parameters":#token-params</span> for the "Ably Token":/core-features/authentication#ably-tokens request<br>__Type: "@TokenParams@":#token-params__

- <span lang="ruby">auth_options</span><span lang="default">authOptions</span> := <span lang="default">an optional object containing the "authentication options":#auth-options</span><span lang="java">an optional "@TokenParams@":#token-params object containing the authentication options</span><span lang="ruby">an optional set of key value pairs containing the "authentication options":#auth-options</span><span lang="objc,swift">an optional "@ARTTokenParams@":#token-params containing the "authentication options":#auth-options<br>__Type: "@AuthOptions@":#auth-options__

- <div lang="jsall">callback</div> := is a function of the form: @function(err, tokenRequest)@
- <div lang="ruby">&block</div> := yields a "@TokenRequest@":#token-request object
- <div lang="swift,objc">callback</div> := called with a "@ARTTokenRequest@":#token-request object or an error

blang[jsall].
  h5. Callback result

  On success, @tokenRequest@ contains a "@TokenRequest@":#token-request JSON object.

  On failure to issue a "@TokenRequest@":#token-request, @err@ contains an "@ErrorInfo@":#error-info object with an error response as defined in the "Ably REST API":/rest-api#common documentation.

blang[java].
  h5. Returns

  On success, a "@TokenRequest@":#token-request object is returned.

  Failure to issue a "@TokenRequest@":#token-request will raise an "@AblyException@":#ably-exception.

blang[csharp].
  h5. Returns

  Returns a @Task<string>@ which needs to be awaited.

  On success, a "@TokenRequest@":#token-request object is returned.

  Failure to issue a "@TokenRequest@":#token-request will raise an "@AblyException@":#ably-exception.

blang[ruby].
  h5. Returns

  A "@Deferrable@":/realtime/types#deferrable object is returned from this method.

  On success, the registered success callbacks for the "@Deferrable@":/realtime/types#deferrable and any block provided to this method yields a "@TokenRequest@":#token-request object.

  Failure to issue a "@TokenRequest@":#token-request will trigger the errback callbacks of the "@Deferrable@":/realtime/types#deferrable with an "@ErrorInfo@":#error-info object containing an error response as defined in the "Ably REST API":/rest-api#common documentation.

h5. Example

bc[jsall]. client.auth.createTokenRequest({ clientId: 'bob' }, function(err, tokenRequest) {
  if(err) {
    console.log('An error occurred; err = ' + err.message);
  } else {
    console.log('Success; token request = ' + tokenRequest);
  }
});

bc[java]. try {
  TokenParams tokenParams = new TokenParams();
  tokenParams.clientId = "bob";
  TokenRequest tokenRequest = client.auth.createTokenRequest(tokenParams, null);
  System.out.println("Success; token request issued");
} catch(AblyException e) {
  System.out.println("An error occurred; err = " + e.getMessage());
}

bc[csharp]. try {
    TokenParams tokenParams = new TokenParams {ClientId = "bob"};
    TokenRequest tokenRequest = await client.Auth.CreateTokenRequestAsync(tokenParams);
    Console.WriteLine("Success; token request issued");
} catch (AblyException e) {
    Console.WriteLine("An error occurred; err = " + e.Message);
}

bc[ruby]. client.auth.create_token_request(client_id: 'bob') do |token_request|
  puts "Success; token request = #{token_request}"
end

bc[objc]. ARTTokenParams *tokenParams = [[ARTTokenParams alloc] initWithClientId:@"Bob"];
[client.auth createTokenRequest:tokenParams options:nil callback:^(ARTTokenRequest *tokenRequest, NSError *error) {
    if (error) {
        NSLog(@"An error occurred; err = %@", error);
    } else {
        NSLog(@"Success; token request = %@", tokenRequest);
    }
}];

bc[swift]. let tokenParams = ARTTokenParams(clientId: "Bob")
client.auth.createTokenRequest(tokenParams, options: nil) { tokenRequest, error in
    guard let tokenRequest = tokenRequest else {
        print("An error occurred; err = \(error!)")
        return
    }
    print("Success; token request = \(tokenRequest)")
}

h6(#request-token).
  default:  requestToken
  ruby:     request_token
  csharp:   RequestTokenAsync

bq(definition).
  default: requestToken("TokenParams":#token-params tokenParams, "AuthOptions":#auth-options authOptions, callback("ErrorInfo":/realtime/types#error-info err, "TokenDetails":#token-details tokenDetails))
  ruby:    "Deferrable":/realtime/types#deferrable request_token("TokenParams":#token-params token_params, "AuthOptions":#auth-options auth_options) -> yields "TokenDetails":#token-details
  java:    "TokenDetails":#token-details requestToken("TokenParams":#token-params tokenParams, "AuthOptions":#auth-options authOptions)
  csharp:  async Task<"TokenDetails":#token-details> RequestTokenAsync("TokenParams":#token-params? tokenParams, "AuthOptions":#auth-options? options)
  objc,swift: requestToken(tokenParams: "ARTTokenParams":#token-params?, withOptions: "ARTAuthOptions":#auth-options?, callback: ("ARTTokenDetails":#token-details?, NSError?) -> Void)

Calls the "@requestToken@ REST API endpoint":/rest-api#request-token to obtain an "Ably Token":/core-features/authentication#ably-tokens according to the specified <span lang="ruby">@token_params@ and @auth_options@</span><span lang="default">@tokenParams@ and @authOptions@</span>.

Both <span lang="ruby">@auth_options@ and @token_params@</span><span lang="default">@authOptions@ and @tokenParams@</span> are optional. When omitted or @null@, the default token parameters and authentication options for the client library are used, as specified in the @ClientOptions@ when the client library was instantiated, or later updated with an explicit "<span lang="default">@authorize@</span><span lang="csharp">@Authorize@</span>":#authorize request.  Values passed in will be used instead of (rather than being merged with) the default values.

To understand why an Ably "@TokenRequest@":#request-token may be issued to clients in favor of a token, see "Token Authentication explained":/core-features/authentication/#token-authentication.

h5. Parameters

- <span lang="ruby">token_params</span><span lang="default">tokenParams</span> := <span lang="default">an optional object containing the "token parameters":#token-params</span><span lang="java">an optional "@TokenParams@":#token-params object containing the token parameters</span><span lang="ruby">an optional set of key value pairs containing the "token parameters":#token-params</span> for the requested token<br>__Type: "@TokenParams@":#token-params__

- <span lang="ruby">auth_options</span><span lang="default">authOptions</span> := <span lang="default">an optional object containing the "authentication options":#auth-options</span><span lang="java">an optional "@TokenParams@":#auth-options object containing the authentication options</span><span lang="ruby">an optional set of key value pairs containing the "authentication options":#auth-options</span> for the requested "Ably Token":/core-features/authentication#ably-tokens<br>__Type: "@AuthOptions@":#auth-options__

- <div lang="jsall">callback</div> := is a function of the form: @function(err, tokenDetails)@
- <div lang="ruby">&block</div> := yields a "@TokenDetails@":#token-details object
- <div lang="swift,objc">callback</div> := called with a "@ARTTokenDetails@":#token-details object or an error

blang[jsall,objc,swift].
  h5. Callback result

  On success, @tokenDetails@ contains a "@TokenDetails@":#token-details object containing the details of the new "Ably Token":/core-features/authentication#ably-tokens along with the @token@ string.

  On failure to obtain an "Ably Token":/core-features/authentication#ably-tokens, @err@ contains an <span lang="default">"@ErrorInfo@":#error-info</span><span lang="objc,swift">@NSError@</span> object with an error response as defined in the "Ably REST API":/rest-api#common documentation.

blang[java].
  h5. Returns

  On success, a "@TokenDetails@":#token-details object containing the details of the new "Ably Token":/core-features/authentication#ably-tokens along with the @token@ string is returned.

  Failure to obtain an "Ably Token":/core-features/authentication#ably-tokens will raise an "@AblyException@":#ably-exception.

blang[csharp].
  h5. Returns

  Returns a @Task<TokenDetails>@ which needs to be awaited.

  On success, a "@TokenDetails@":#token-details object containing the details of the new "Ably Token":/core-features/authentication#ably-tokens along with the @token@ string is returned.

  Failure to obtain an "Ably Token":/core-features/authentication#ably-tokens will raise an "@AblyException@":#ably-exception.

blang[ruby].
  h5. Returns

  A "@Deferrable@":/realtime/types#deferrable object is returned from this method.

  On success, the registered success callbacks for the "@Deferrable@":/realtime/types#deferrable and any block provided to this method yields a "@TokenDetails@":#token-details object containing the details of the new "Ably Token":/core-features/authentication#ably-tokens along with the @token@ string.

  Failure to obtain an "Ably Token":/core-features/authentication#ably-tokens will trigger the errback callbacks of the "@Deferrable@":/realtime/types#deferrable with an "@ErrorInfo@":#error-info object containing an error response as defined in the "Ably REST API":/rest-api#common documentation.

h5. Example

bc[jsall]. client.auth.requestToken({ clientId: 'bob'}, function(err, tokenDetails){
  if(err) {
    console.log('An error occurred; err = ' + err.message);
  } else {
    console.log('Success; token = ' + tokenDetails.token);
  }
});

bc[ruby]. client.auth.request_token(client_id: 'bob') do |token_details|
  puts "Success; token = #{token_details.token}"
end

bc[java]. try {
  TokenParams tokenParams = new TokenParams();
  tokenParams.clientId = "bob";
  TokenDetails tokenDetails = client.auth.requestToken(tokenParams, null);
  System.out.println("Success; token = " + tokenDetails.token);
} catch(AblyException e) {
  System.out.println("An error occurred; err = " + e.getMessage());
}

bc[csharp]. try {
  TokenParams tokenParams = new TokenParams {ClientId = "bob"};
  TokenDetails tokenDetails = await client.Auth.RequestTokenAsync(tokenParams);
  Console.WriteLine("Success; token = " + tokenDetails.Token);
} catch (AblyException e) {
  Console.WriteLine("An error occurred; err = " + e.Message);
}

bc[objc]. ARTTokenParams *tokenParams = [[ARTTokenParams alloc] initWithClientId:@"Bob"];
[client.auth requestToken:tokenParams withOptions:nil callback:^(ARTTokenDetails *tokenDetails, NSError *error) {
  if (error) {
    NSLog(@"An error occurred; err = %@", error);
  } else {
    NSLog(@"Success; token = %@", tokenDetails.token);
  }
}];

bc[swift]. let tokenParams = ARTTokenParams(clientId: "Bob")
client.auth.requestToken(tokenParams, withOptions: : nil) { tokenDetails, error in
  guard let tokenDetails = tokenDetails else {
    print("An error occurred; err = \(error!)")
    return
}
  print("Success; token = \(tokenDetails.token)")
}

h3(#related-types). Related types

h4(#auth-options).
  default:   AuthOptions Object
  objc,swift:   ARTAuthOptions
  ruby:      AuthOptions Hash
  java:      io.ably.lib.rest.Auth.AuthOptions
  dotent:    IO.Ably.AuthOptions

<%= partial partial_version('types/_auth_options') %>

h4(#token-details).
  default: TokenDetails Object
  objc,swift: ARTTokenDetails
  java:    io.ably.lib.types.TokenDetails
  ruby:    Ably::Models::TokenDetails
  csharp:  IO.Ably.TokenDetails

<%= partial partial_version('types/_token_details') %>

h4(#token-params).
  default:   TokenParams Object
  objc,swift:   ARTTokenParams
  ruby:      TokenParams Hash
  java:      io.ably.lib.rest.Auth.TokenParams
  csharp:    IO.Ably.TokenParams

<%= partial partial_version('types/_token_params') %>

h4(#token-request).
  default:   TokenRequest Object
  objc,swift:   ARTTokenRequest
  ruby:      Ably::Models::TokenRequest
  java:      io.ably.lib.rest.Auth.TokenRequest
  csharp:    IO.Ably.TokenRequest

<%= partial partial_version('types/_token_request') %>

h2(#channel-metadata-api). Channel Metadata API Reference

inline-toc.
  Types:
    - ChannelDetails#channel-details
    - ChannelStatus#channel-status
    - Occupancy#occupancy

h3(#types). Types

The payload of metadata events for channels is the "@ChannelDetails@":#channel-details type which contains the @channelId@ and other static information about the channel, plus a @status@ containing a "@ChannelStatus@":#channel-status instance which contains information about the current state of the channel.

<%= partial partial_version('types/_channel_details') %>

h2(#channel-api). Channel API Reference

inline-toc.
  Channels Methods:
    - get#get
    - release#release
  Channel Properties:
    - state#state
    - errorReason#error-reason
    - name#name
    - presence#presence
    - push#push
  Channel Methods:
    - publish#publish
    - subscribe#subscribe
    - unsubscribe#unsubscribe
    - history(options)#history
    - attach()#attach
    - detach()#detach
    - on#on-state-listener
    - once#once-state-listener
    - off#off-state-listener
  Related types:
    - ChannelState#channel-state
    - ChannelEvent#channel-event
    - ChannelStateChange#channel-state-change
    - Message#message
    - ChannelOptions#channel-options
    - ChannelStateListener#channel-state-listener
    - CompletionListener#completion-listener
    - MessageListener#message-listener
    - PaginatedResult#paginated-result
    - Param

h3(#channels-object).
  default: Channels

The @Channels@ object, accessed from the "realtime library client constructor":/realtime/usage#channels, is used to create and destroy @Channel@ objects. It exposes the following public methods:

h4(#channels-methods). Channels Methods

h6(#get).
  default: get
  csharp: Get

bq(definition).
  default:  "Channel":#properties get(String channelName, "ChannelOptions":#channel-options channelOptions)
  csharp:   "Channel":#properties Get(String channelName, "ChannelOptions":#channel-options channelOptions)
  objc,swift: "ARTRealtimeChannel":#properties get(String channelName, "ARTChannelOptions":#channel-options channelOptions);

Creates a new "Channel":#properties object if none for the channel exists, or returns the existing channel object.

h6(#release).
  default: release
  csharp: Release

bq(definition).
  default:  release(String channelName)
  java,objc,swift,flutter:  void release(String channelName)
  csharp:   bool Release(string channelName)

Releases a "Channel":#properties object, deleting it and enabling it to be garbage collected. It also removes any listeners associated with the channel.

<span lang="jsall, csharp">**Note**: To release a channel, the "channel state":#channel-states must be @initialized@, @detached@ or @failed@.</span>

h3(#channel-object). Channel

The Channel object, created via the "Channels":#channels-object object, is used to interact with a specific channel.

h4(#properties).
  default: Channel Properties
  objc,swift: ARTRealtimeChannel Properties
  ruby: Ably::Realtime::Channel Attributes
  java: io.ably.lib.realtime.Channel Members
  csharp: IO.Ably.Realtime.RealtimeChannel Properties

The @Channel@ object exposes the following public <span lang="default">properties</span><span lang="ruby">attributes</span><span lang="java">members</span>:

h6(#state).
  default: state
  csharp: State

The current <span lang="java">"@io.ably.lib.realtime.ChannelState@":#channel-state @state@</span><span lang="csharp">"@IO.Ably.Realtime.ChannelState@":#channel-state @state@</span><span lang="ruby">"@Ably::Realtime::Channel::STATE@":#channel-state @state@</span><span lang="objc,swift">"@ARTRealtimeChannelState@":#channel-state</span><span lang="default">"@ChannelState@":#channel-state</span> of this @Channel@. See the supported "channel states":#channel-states for more information.

h6(#error-reason).
  default: errorReason
  java:    reason
  ruby:    error_reason
  csharp:  ErrorReason

When a channel failure occurs this <span lang="default,ruby">attribute</span><span lang="java">member</span><span lang="jsall">property</span><span lang="objc,swift,csharp">property</span> is populated.
The type is <span lang="default">"@ErrorInfo@":/realtime/types#error-info</span><span lang="java,ruby">"@AblyException@":/realtime/types#ably-exception</span>.

h6(#name).
  default: name
  csharp: Name

The name @String@ unique to this channel.

h6(#presence).
  default: presence
  csharp: Presence

Provides access to the "Presence":/realtime/presence object for this channel which can be used to access members present on the channel, or participate in presence.

h6(#push).
  default: push

Provides access to the "PushChannel":/general/push/activate-subscribe#push-channel object for this channel which can be used to access members present on the channel, or participate in presence.

h4. Methods

h6(#publish).
  default: publish
  csharp: Publish

There are two overloaded versions of this method:

bq(definition#publish-data).
  default:  publish(String name, Object data, callback("ErrorInfo":/realtime/types#error-info err))
  ruby:     "Deferrable":/realtime/types#deferrable publish(String name, Object data) -> yields
  java:     void publish(String name, Object data, "CompletionListener":#completion-listener listener)
  csharp:   void Publish(string name, object data, Action<bool, ErrorInfo> callback = null, string clientId = null)
  objc,swift: publish(name: String?, data: AnyObject?, callback: (("ARTErrorInfo":/realtime/types#error-info?) -> Void)?)
  flutter:  Future<void> publish(name: String name, data: Object data, message: "Message":#message message)

Publish a single message on this channel based on a given event name and payload. A <span lang="default">callback</span><span lang="java">listener</span> may optionally be passed in to this call to be notified of success <span lang="default">or failure</span><span lang="ruby"></span> of the operation. When publish is called with this client library, it "won't attempt to implicitly attach to the channel":#transient-publish, so long as "transient publishing":#transient-publish is available in the library. Otherwise, the client will implicitly attach.

bq(definition#publish-msg-array).
  default: publish(Object[] messages, callback("ErrorInfo":/realtime/types#error-info err))
  ruby:    "Deferrable":/realtime/types#deferrable publish(Message[] messages) -> yields
  java:    void publish(Message[] messages, "CompletionListener":#completion-listener listener)
  csharp:  void Publish(IEnumerable<"Message":#message> messages, Action<bool, "ErrorInfo":/realtime/types#error-info> callback = null)
  objc,swift: publish(messages: [ "ARTMessage":#message ], callback: (("ARTErrorInfo":/realtime/types#error-info?) -> Void)?)
  flutter:  Future<void> publish(messages: List<"Message":#message> messages)

Publish several messages on this channel. A <span><span lang="default">callback</span><span lang="java">listener</span><span lang="ruby">block</span> may optionally be passed in to this call to be notified of success <span lang="default">or failure</span><span lang="ruby"></span> of the operation.</span><span lang="default"> If the channel is @initialized@ (i.e. no attempt to attach has yet been made for this channel), then calling @publish@ will implicitly attach the channel.</span><span lang="jsall,ruby,swift"> When publish is called with this client library, it "won't attempt to implicitly attach to the channel":#transient-publish.</span>

h5. Parameters

- <div lang="default">name</div> := event name for the published message<br>__Type: @String@__

- <div lang="jsall">data</div> := data payload for the message. The supported payload types are Strings, objects or arrays capable of JSON representation, buffers containing arbitrary binary data, and null. (Note that if sending a binary, that binary should be the entire payload; an object with a binary field within it may not be correctly encoded)<br>__Type: @Object@__
- <div lang="java">data</div> := data payload for the message. The supported payload types are Strings, JsonObject, binary data as byte arrays, and null.<br>__Type: @Object@__
- <div lang="csharp">data</div> := data payload for the message. The supported payload types are Strings, binary data as byte arrays, any plain c# class that can be serialized to Json, and null.<br>__Type: @Object@__
- <div lang="ruby">data</div> := data payload for the message. The supported payload types are Strings, Hash or Array objects that can be serialized to JSON using @to_json@, binary data as @ASCII-8BIT@ byte arrays, and null. (Note that if sending a byte array, it should be the entire payload; a hash or array with a bytearray field within it may not be correctly encoded)<br>__Type: @Object@__
- <div lang="objc,swift">data</div> := data payload for the message. The supported payload types are <span lang="objc">@NS@</span>@String@, <span lang="objc">@NS@</span>@Dictionary@ or <span lang="objc">@NS@</span>@Array@ objects that can be serialized to JSON, binary data as @NSData@, and @nil@.<br>__Type: @Object@__
- <div lang="flutter">data</div> := data payload for the message. The supported payload types are String, Map, List, and null.<br>__Type: @Object@__

- <span lang="default">message</span> := A message object to publish<br>__Type: "@Message@":#message__

- <span lang="default">messages</span> := An array of message objects to publish<br>__Type: "@Message []@":#message__

- <div lang="jsall">callback</div> := is a function of the form @function(err)@ which is called upon completion
- <div lang="java">listener</div> := Listener to be notified on completion<br>__Type: "@CompletionListener@":#completion-listener__
- <div lang="csharp">callback</div> := is an action of the form @Action<bool, ErrorInfo>@ which is called upon completion
- <div lang="ruby">&block</div> := yields upon successfully publishing the message
- <div lang="objc,swift">callback</div> := called upon publishing the message, or with an error

blang[jsall,swift,objc].
  h5. Callback result

  On successful publish of the message, @err@ is null. On failure to publish the message, @err@ contains an "@ErrorInfo@":#error-info object describing the failure reason.

blang[csharp].
  h5. Callback result

  On successful publish of the message, @error@ is null. On failure to publish the message, @error@ contains an "@ErrorInfo@":#error-info object describing the failure reason.

blang[java].
  h5. Listener result

  On successful publish of the message, the @onSuccess@ method of the "CompletionListener":#completion-listener is called. On failure to publish the message, the @onError@ method is called with an "@ErrorInfo@":#error-info argument describing the failure reason.

blang[ruby].
  h5. Returns

  A "@Deferrable@":/realtime/types#deferrable object is returned from the method.

  On successful publish of the message, the registered success blocks for the "@Deferrable@":/realtime/types#deferrable and any block provided to the method are executed. On failure to publish the message, the @errback@ callbacks of the "@Deferrable@":/realtime/types#deferrable are called with an "@ErrorInfo@":#error-info argument describing the failure reason.

blang[flutter].
  h5. Returns

  @Future<void>@

  On successful publish of the message, no exception will be thrown. On failure to publish the message, an @AblyException@ will be thrown with an `"@errorInfo@":#error-info` property describing the failure reason.

h6(#subscribe).
  default: subscribe
  csharp: Subscribe

There are overloaded versions of this method:

bq(definition#subscribe-listener).
  default:  subscribe(listener("Message":#message))
  java:     void subscribe("MessageListener":#message-listener listener)
  csharp:   void Subscribe(Action<"Message":#message> handler)
  ruby:     subscribe → yields "Message":#message
  objc,swift: subscribe(callback: ("ARTMessage":#message) -> Void) -> ARTEventListener?
  flutter:  StreamSubscription<"ably.Message":#message> subscribe().listen(("ably.Message":#message) -> void)

Subscribe to messages on this channel. The caller supplies <span lang="default">a listener function</span><span lang="csharp">a lambda expression</span><span lang="java">an implementation of the "MessageListener":#message-listener interface</span><span lang="ruby">a block</span>, which is called each time one or more messages arrives on the channel.

bq(definition#subscribe-event).
  default: subscribe(String name, listener("Message":#message))
  java:    void subscribe(String name, "MessageListener":#message-listener listener)
  csharp:  void Subscribe(string name, Action<"Message":#message> handler)
  ruby:    subscribe(String name) → yields "Message":#message
  objc,swift: subscribe(name: String, callback: ("ARTMessage":#message) -> Void) -> ARTEventListener?
  flutter:  StreamSubscription<"ably.Message":#message> subscribe(name: String).listen(("ably.Message":#message) -> void)

Subscribe to messages with a given event @name@ on this channel. The caller supplies <span lang="default">a listener function</span><span lang="csharp">a lambda expression</span><span lang="java">an implementation of the "MessageListener":#message-listener interface</span><span lang="ruby">a block</span>, which is called each time one or more matching messages arrives on the channel.

<div lang="objc,swift,csharp"></div>
<div lang="default">
bq(definition#subscribe-event-array).
  default: subscribe(String[] names, listener("Message":#message))
  java:    void subscribe(String[] names, "MessageListener":#message-listener listener)
  ruby:    subscribe(String *names) → yields "Message":#message
  flutter:  StreamSubscription<"ably.Message":#message> subscribe(names: List<String>).listen(("ably.Message":#message) -> void)

Subscribe a single listener to messages on this channel for multiple event @name@ values.
</div>

h5. Parameters

- name := The event name to subscribe to<br>__Type: @String@__

<div lang="objc,swift,csharp"></div>
<div lang="default">
- names := An <span lang="ruby">argument</span> array of event names to subscribe to<br>__Type: <span lang="default">@String[]@ </span><span lang="ruby">@*argument@</span>__
</div>

- <div lang="jsall">listener</div> := is a function of the form @function(message)@ to be called for each message
- <div lang="java">"MessageListener":#message-listener listener</div> := Message listener to be notified for matching messages
- <div lang="ruby">&block</div> := yields each matching message when received on the channel
- <div lang="swift,objc">callback</div> := called with each matching "@message@":#message when received on the channel
- <div lang="csharp">handler</div> := called with each matching "@message@":#message when received on the channel

h5. Considerations

* If the channel is @initialized@ (i.e. no attempt to attach has yet been made for this channel), then calling @subscribe@ will implicitly attach the channel. However, regardless of the implicit attach outcome, the <span lang="default">listener</span><span lang="ruby">block</span><span lang="csharp">handler</span> will still be registered
* Calling subscribe with an event name is a convenient way to subscribe only to messages matching that event name. But this is purely a clientside filter, for convenience. It has no effect on what messages are actually sent by the server to the client. All clients attached to a given channel receive every message sent on that channel (that their capabilities allow them to receive); the channel is the unit of distribution.
* If @subscribe@ is called more than once with the same <span lang="default">listener</span><span lang="ruby">block</span><span lang="csharp">handler</span>, then duplicates will be registered. For example, if you @subscribe@ twice with the same <span lang="default">listener</span><span lang="ruby">block</span><span lang="csharp">handler</span> and a message is later received, the same <span lang="default">listener</span><span lang="ruby">block</span><span lang="csharp">handler</span> will be invoked twice
* The registered <span lang="default">listener</span><span lang="ruby">block</span><span lang="csharp">handler</span> remains active on the channel regardless of the current channel state. For example, if you call @subscribe@ when a channel is @attached@ and it later becomes @detached@ or even @failed@, when the channel is reattached and a message is received, the <span lang="default">listeners</span><span lang="ruby">blocks</span><span lang="csharp">handlers</span> originally registered will still be invoked. Listeners are only removed when calling <span lang="default">"@unsubscribe@":#unsubscribe</span><span lang="flutter">@streamSubscription.close@</span> or when a channel is @released@ using the <span lang="default">@Realtime.channels.release(name)@</span><span lang="csharp">@Realtime.Channels.Release(name)@</span> method
* If an exception is thrown in the subscribe listener and bubbles up to the event emitter, it will be caught and logged at @error@ level, so as not to affect other listeners for the same event

h6(#unsubscribe).
  default: unsubscribe
  csharp: Unsubscribe

<div lang="default">
There are <span lang="jsall">six</span><span lang="default">three</span> overloaded versions of this method:

bq(definition#unsubscribe-event).
  default: unsubscribe(String name, listener)
  java:    void unsubscribe(String name, "MessageListener":#message-listener listener)
  csharp:  bool Unsubscribe(string eventName, Action<"Message":#message> handler)
  ruby:    unsubscribe(String name, &listener_proc)
  objc,swift: unsubscribe(name: String, listener: ARTEventListener)

Unsubscribe the given listener for the specified event name. This removes an earlier event-specific subscription.

bq(definition#unsubscribe-listener).
  default: unsubscribe(listener)
  java:    void unsubscribe("MessageListener":#message-listener listener)
  csharp:  bool Unsubscribe(Action<"Message":#message> handler)
  ruby:    unsubscribe(&listener_proc)
  objc,swift: unsubscribe(listener: ARTEventListener)

Unsubscribe the given listener (for any/all event names). This removes an earlier subscription.

<div lang="jsall">
bq(definition). unsubscribe(String[] names, listener)

Unsubscribe the given listener from all event names in the array.

bq(definition). unsubscribe(String name)

Unsubscribe all listeners for a given event name.

bq(definition). unsubscribe(String[] names)

Unsubscribe all listeners for all event names in the array.
</div>

bq(definition#unsubscribe-all).
  default: unsubscribe()
  java:    void unsubscribe()
  csharp:  void Unsubscribe()
  objc,swift: unsubscribe()

Unsubscribes all listeners to messages on this channel. This removes all earlier subscriptions.

h5. Parameters

- name := The event name to unsubscribe from<br>__Type: @String@__
- <div lang="jsall">names</div> := An array of event names to unsubscribe from<br>__Type: @String[]@__
- <div lang="jsall">listener</div> := is the callback listener function that was previously subscribed
- <div lang="java">listener</div> := previously registered listener<br>__Type: "@MessageListener@":#message-listener__
- <div lang="ruby">&listener_block</div> := previously registered listener block
- <div lang="swift,objc">listener</div> := previous return value from a @subscribe@ call
- <div lang="csharp">handler</div> := is the lambda expression that was previously subscribed
</div><div lang="flutter">
@streamSubscription@ obtained from a subscription can be used to cancel a listener by calling @streamSubscription.cancel@.

</div>

h6(#history).
  default: history
  csharp: History

bq(definition).
  default: history(Object options, callback("ErrorInfo":/realtime/types#error-info err, "PaginatedResult":#paginated-result<"Message":#message> resultPage))
  ruby:    "Deferrable":/realtime/types#deferrable history(Hash options) -> yields "PaginatedResult":#paginated-result<"Message":#message>
  java:    "PaginatedResult":#paginated-result<"Message":#message> history("Param []":#param options)
  csharp:  Task<"PaginatedResult<Message>":#paginated-result> HistoryAsync("PaginatedRequestParams":#paginated-request-params dataQuery, bool untilAttach = false)
  objc,swift: history(query: ARTRealtimeHistoryQuery?, callback: ("ARTPaginatedResult":#paginated-result<"ARTMessage":#message>?, ARTErrorInfo?) -> Void) throws

Gets a "paginated":#paginated-result set of historical messages for this channel. If the "channel is configured to persist messages to disk":https://faqs.ably.com/how-long-are-messages-stored-for, then message history will "typically be available for 24 - 72 hours":https://faqs.ably.com/how-long-are-messages-stored-for. If not, messages are only retained in memory by the Ably service for two minutes.

h5. Parameters

- <span lang="default">options</span><span lang="objc,swift">query</span><span lang="csharp">dataQuery</span> := <span lang="default">an optional object containing the query parameters</span><span lang="ruby">an optional set of key value pairs containing the query parameters</span>, as specified in the "message history API documentation":/realtime/history#channel-history.<br>__Type: <span lang="default">@Object@</span><span lang="objc,swift">@ARTRealtimeHistoryQuery@</span><span lang="csharp">@PaginatedRequestParams@</span><span lang="ruby">@Hash@</span><span lang="java">"@Param []@":#param</span>__

- <div lang="jsall">callback</div> := is a function of the form: @function(err, resultPage)@
- <div lang="ruby">&block</div> := yields a @PaginatedResult<Message>@ object
- <div lang="swift,objc">callback</div> := called with a "ARTPaginatedResult":#paginated-result<"ARTMessage":#message> object or an error

Further details of the supported @options@ params, see "message history API documentation":/realtime/history#channel-history.

blang[jsall,objc,swift].
  h5. Callback result

  On success, @resultPage@ contains a "@PaginatedResult@":#paginated-result encapsulating an array of "@Message@":#message objects corresponding to the current page of results. "@PaginatedResult@":#paginated-result supports pagination using "@next()@":#paginated-result and "@first()@":#paginated-result methods.

  On failure to retrieve message history, @err@ contains an "@ErrorInfo@":#error-info object with the failure reason.

blang[java].
  h5. Returns

  On success, the returned "@PaginatedResult@":#paginated-result encapsulates an array of "@Message@":#message objects corresponding to the current page of results. "@PaginatedResult@":#paginated-result supports pagination using "@next@":#paginated-result and "@first@":#paginated-result methods.

  Failure to retrieve the message history will raise an "@AblyException@":/realtime/types/#ably-exception

blang[csharp].
  h5. Returns

  The return value is @Task<PaginatedResult<Message>>@ which needs to be awaited.

  On success, the returned "@PaginatedResult@":#paginated-result encapsulates an array of "@Message@":#message objects corresponding to the current page of results. "@PaginatedResult@":#paginated-result supports pagination using "@NextAsync@":#paginated-result and "@FirstAsync@":#paginated-result methods.

  Failure to retrieve the message history will raise an "@AblyException@":/realtime/types/#ably-exception

blang[ruby].
  h5. Returns

  A "@Deferrable@":/realtime/types#deferrable object is returned from the method.

  On success, the registered success blocks for the "@Deferrable@":/realtime/types#deferrable and any block provided to the method yield a "PaginatedResult":#paginated-result that encapsulates an array of "@Message@":#message objects corresponding to the current page of results. "@PaginatedResult@":#paginated-result supports pagination using "@next()@":#paginated-result and "@first()@":#paginated-result methods.

  Failure to retrieve the message history will trigger the @errback@ callbacks of the "@Deferrable@":/realtime/types#deferrable with an "@ErrorInfo@":#error-info object with the failure reason.

h6(#attach).
  default: attach
  csharp: Attach

bq(definition).
  default:  attach(callback("ErrorInfo":/realtime/types#error-info err))
  java:     void attach()
  csharp:   void Attach(Action<TimeSpan, "ErrorInfo":/realtime/types#error-info?> callback = null)
  ruby:     "Deferrable":/realtime/types#deferrable attach -> yields
  objc,swift: attach(callback: (("ARTErrorInfo":/realtime/types#error-info?) -> Void)?)
  flutter:  Future<void> attach()

Attach to this channel ensuring the channel is created in the Ably system and all messages published on the channel will be received by any channel listeners registered using <span lang="default">@subscribe()@</span><span lang="csharp">@Subscribe()@</span><span lang="ruby">@subscribe@</span>. Any resulting channel state change will be emitted to any listeners registered using the "<span lang="default">@on@</span><span lang="csharp">@On@</span>":#on or "<span lang="default">@once@</span><span lang="csharp">@Once@</span>":#once methods.

As a convenience, <span lang="default">@attach()@</span><span lang="csharp">@Attach()@</span><span lang="ruby">@attach@</span> will be called implicitly if "<span lang="default">@subscribe()@</span><span lang="csharp">@Subscribe()@</span><span lang="ruby">@subscribe@</span>":#subscribe for the @Channel@ is called, or "<span lang="default">@enter()@</span><span lang="csharp">@Enter()@</span><span lang="ruby">@enter@</span>":/realtime/presence#enter or "<span lang="default">@subscribe()@</span><span lang="csharp">@Subscribe()@</span><span lang="ruby">@subscribe@</span>":/realtime/presence#subscribe is called on the "@Presence@":/realtime/presence for this @Channel@.

<div lang="default">
h5. Parameters

- <div lang="jsall">callback</div> := is a function of the form @function(err)@ and is called once the channel attach succeeds or fails
- <div lang="ruby">&block</div> := yields once the channel becomes attached
- <div lang="csharp">callback</div> := is a lambda expression of the form @Action<TimeSpan, ErrorInfo>@ and is called once the channel attach succeeds or fails
- <div lang="swift,objc">callback</div> := called once the channel becomes attached or if an error occurs
</div><div lang="flutter"></div>

blang[ruby].
  h5. Returns

  A "@Deferrable@":/realtime/types#deferrable object is returned from the attach method.

  On successful attachment, the success callbacks for the "@Deferrable@":/realtime/types#deferrable are called and any block provided to the method is yielded. Failure to attach will trigger the @errback@ callbacks of the "@Deferrable@":/realtime/types#deferrable with an "@ErrorInfo@":#error-info object with the failure reason.

blang[flutter].
  h5. Returns

  @Future<void>@

  Failure to attach will throw an @AblyException@ with an "errorInfo":/realtime/types#error-info property with the failure reason.

h6(#detach).
  default: detach
  csharp: Detach

bq(definition).
  default: detach(callback("ErrorInfo":/realtime/types#error-info err))
  java:    void detach()
  csharp:  void Detach(Action<TimeSpan, ErrorInfo> callback = null)
  ruby:     "Deferrable":/realtime/types#deferrable detach -> yields
  objc,swift: detach(callback: (("ARTErrorInfo":/realtime/types#error-info?) -> Void)?)
  flutter:  Future<void> detach()

Detach from this channel. Any resulting channel state change will be emitted to any listeners registered using the "<span lang="default">@on@</span><span lang="csharp">@On@</span>":#on or "<span lang="default">@once@</span><span lang="csharp">@Once@</span>":#once methods.

Please note: Once all clients globally have detached from the channel, the channel will be released in the Ably service within two minutes.

<div lang="default">
h5. Parameters

- <div lang="jsall">callback</div> := is a function of the form @function(err)@ and is called once the channel detach succeeds or fails
- <div lang="csharp">callback</div> := is a lambda expression in the form @Action<TimeSpan, ErrorInfo>@ and is called once the channel detach succeeds or fails
- <div lang="ruby">&block</div> := yields once the channel becomes detached
- <div lang="swift,objc">callback</div> := called once the channel becomes detached or if an error occurs
</div><div lang="flutter"></div>

blang[ruby].
  h5. Returns

  A "@Deferrable@":/realtime/types#deferrable object is returned from the detach method.

  On successful detachment, the registered success blocks for the "@Deferrable@":/realtime/types#deferrable and any block provided to the method are executed. Failure to detach will trigger the @errback@ callbacks of the "@Deferrable@":/realtime/types#deferrable with an "@ErrorInfo@":#error-info object with the failure reason.

blang[flutter].
  h5. Returns

  @Future<void>@

  Failure to detach will throw an @AblyException@ with an "errorInfo":/realtime/types#error-info property with the failure reason.

h6(#on).
  default: on
  csharp: On

There are <span lang="jsall">three</span><span lang="default">two</span> overloaded versions of this method:

bq(definition#on-state-listener).
  default: on(String event, listener("ChannelStateChange":#channel-state-change stateChange))
  ruby:    on("ChannelEvent":#channel-event *event) -> yields "ChannelStateChange":#channel-state-change
  java:    void on("ChannelEvent":#channel-event event, "ChannelStateListener":#channel-state-listener listener)
  csharp:  void On("ChannelEvent":#channel-event event, Action<"ChannelStateChange":#channel-state-change> action)
  objc,swift: on(event: "ARTChannelEvent":#channel-event, call: ("ARTChannelStateChange?":#channel-state-change) -> Void) -> ARTEventListener
  flutter: Stream<"ChannelEvent":#channel-event> on("ChannelEvent":#channel-event channelEvent)

<div lang="flutter">
The Stream returned can be subscribed for with a listener.

bq(definition). final streamSubscription = stream.listen(listener)

</div>
Register the given listener <span lang="ruby">block</span><span lang="swift,objc">function</span> for the specified "ChannelEvent":#channel-event on the @Channel@.
The listener is passed a "<span lang="default">ChannelStateChange</span><span lang="objc,swift">ARTChannelStateChange</span>":#channel-state-change object that contains the current state, previous state, a boolean indicating whether the channel was resumed, and an optional reason for the state change.

<div lang="jsall">
bq(definition#on-state-array-listener).
  jsall: on(String[] events, listener("ChannelStateChange":#channel-state-change stateChange))

Same as above, but registers multiple listeners, one for each event in the array.
</div>

bq(definition#on-listener).
  default: on(listener("ChannelStateChange":#channel-state-change stateChange))
  ruby:    on -> yields "ChannelStateChange":#channel-state-change
  csharp:  void On(Action<"ChannelStateChange":#channel-state-change> listener)
  java:    void on("ChannelStateListener":#channel-state-listener listener)
  objc,swift: on(call: ("ARTChannelStateChange?":#channel-state-change) -> Void) -> ARTEventListener
  flutter: Stream<"ChannelEvent":#channel-event> on()

<div lang="flutter">
The Stream returned can be subscribed for with a listener.

bq(definition). final streamSubscription = stream.listen(listener)

</div>
Register the given listener <span lang="ruby">block</span><span lang="swift,objc">function</span><span lang="csharp">lambda expression</span> for all "ChannelEvents":#channel-event on the @Channel@.
The listener is passed a "<span lang="default">ChannelStateChange</span><span lang="objc,swift">ARTChannelStateChange</span>":#channel-state-change object that contains the current state, previous state, the event, a boolean indicating whether the channel was resumed, and an optional reason for the state change.

If an exception is thrown in the listener and bubbles up to the event emitter, it will be caught and logged at @error@ level, so as not to affect other listeners for the same event

h5. Parameters

- <div lang="jsall">event(s)</div> := the channel event(s) to subscribe to, see "ChannelEvent":#channel-event for supported channel events<br>__Type: @String@ or @String[]@__
- <div lang="java">event</div> := the channel event to subscribe to<br>__Type: "@ChannelEvent@":#channel-event__
- <div lang="csharp">event</div> := the channel event to subscribe to<br>__Type: "@ChannelEvent@":#channel-event__
- <div lang="ruby">event</div> := the channel event as a Symbol such as @:attached@ or a @ChannelEvent@ object to subscribe to<br>__Type: "@ChannelEvent@":#channel-event__
- <div lang="swift,objc">event</div> := the @ARTChannelEvent@ to subscribe to<br>__Type: "@ARTChannelEvent@":#channel-event__
- <div lang="flutter">event</div> := the channel event to subscribe to<br>__Type: "@ChannelEvent@":#channel-event__

- <div lang="jsall">listener</div> := is a function of the form @function(stateChange)@ to be notified for matching event changes.
- <div lang="java">listener</div> := listener to be notified for matching event changes<br>__Type: "@ChannelStateListener@":#channel-state-listener__
- <div lang="csharp">action</div> := lambda expression to be notified for matching event changes<br>__Type: "@ChannelStateChange@":#channel-state-listener__
- <div lang="ruby">&block</div> := listener block that is yielded to for matching event changes
- <div lang="swift,objc">call</div> := called possibly with an "@ErrorInfo@":#error-info

h5. Example

"(external) Browser @ChannelState@ change example":<%= JsBins.url_for('realtime/channel-states') %>

h6(#once).
  default: once
  csharp: Once

There are two overloaded versions of this method:

bq(definition#once-state-listener).
  default: once(String event, listener("ChannelStateChange":#channel-state-change stateChange))
  ruby:    once("ChannelEvent":#channel-event *event) -> yields "ChannelStateChange":#channel-state-change
  java:    void once("ChannelEvent":#channel-event event, "ChannelStateListener":#channel-state-listener listener)
  csharp:  void Once("ChannelEvent":#channel-event event, Action<"ChannelStateChange":#channel-state-change> action)
  objc,swift: once(event: "ARTChannelEvent":#channel-event, call: ("ARTChannelStateChange?":#channel-state-change) -> Void) -> ARTEventListener

Register the given listener <span lang="ruby">block</span><span lang="swift,objc">function</span><span lang="csharp">lambda expression</span> for a single occurrence of the specified "ChannelEvent":#channel-event on the @Channel@. Once the listener has been called, it is removed as a registered listener and will not be called again.
The listener is passed a "<span lang="default">ChannelStateChange</span><span lang="objc,swift">ARTChannelStateChange</span>":#channel-state-change object that contains the current state, previous state, the event, a boolean indicating whether the channel was resumed, and an optional reason for the event change.

bq(definition#once-listener).
  default: once(listener("ChannelStateChange":#channel-state-change stateChange))
  ruby:    once -> yields "ChannelStateChange":#channel-state-change
  java:    void once("ChannelStateListener":#channel-state-listener listener)
  csharp:  void Once(Action<"ChannelStateChange":#channel-state-change> listener)
  objc,swift: once(call: ("ARTChannelStateChange?":#channel-state-change) -> Void) -> ARTEventListener

Register the given listener <span lang="ruby">block</span><span lang="swift,objc">function</span><span lang="csharp">lambda expression</span> for a single occurrence of any "ChannelEvent":#channel-event on the @Channel@. Once the listener has been called, it is removed as a registered listener and will not be called again.
The listener is passed a "<span lang="default">ChannelStateChange</span><span lang="objc,swift">ARTChannelStateChange</span>":#channel-state-change object that contains the current state, previous state, the event, a boolean indicating whether the channel was resumed, and an optional reason for the event change.

If an exception is thrown in the listener and bubbles up to the event emitter, it will be caught and logged at @error@ level, so as not to affect other listeners for the same event

h5. Parameters

- <div lang="jsall">event</div> := the channel event to subscribe to, see "ChannelEvent":#channel-event for supported channel events<br>__Type: @String@__
- <div lang="java">event</div> := the channel event to subscribe to<br>__Type: "@ChannelEvent@":#channel-event__
- <div lang="csharp">event</div> := the channel event to subscribe to<br>__Type: "@ChannelEvent@":#channel-event__
- <div lang="ruby">event</div> := the channel event as a Symbol such as @:attached@ or a @ChannelEvent@ object to subscribe to<br>__Type: "@ChannelEvent@":#channel-event__
- <div lang="swift,objc">event</div> := the @ARTChannelEvent@ to subscribe to<br>__Type: "@ARTChannelEvent@":#channel-event__

- <div lang="jsall">listener</div> := is a function of the form @function()@ to be notified for a single occurrence of a matching event change. The current event is available as @this.event@
- <div lang="java">listener</div> := listener to be notified for a single occurrence of a matching event change<br>__Type: "@ChannelStateListener@":#channel-state-listener__
- <div lang="ruby">&block</div> := listener block that is yielded to for a single occurrence of a matching event change
- <div lang="csharp">listener</div> := listener lambda expression that is notified only once for a matching event change
- <div lang="swift,objc">call</div> := called possibly with an "@ErrorInfo@":#error-info

h6(#off).
  default: off
  csharp: Off

There are <span lang="jsall">six</span><span lang="default">two</span> overloaded versions of this method:

bq(definition#off-state-listener).
  default: off(String event, listener)
  ruby:    off("ChannelEvent":#channel-event *event, &block)
  java:    void off("ChannelEvent":#channel-event event, "ChannelStateListener":#channel-state-listener listener)
  csharp:  void Off("ChannelEvent":#channel-event event, Action<"ChannelStateChange":#channel-state-change> listener)
  objc,swift: off(event: "ARTChannelEvent":#channel-event, listener: ARTEventListener)

Remove the given listener <span lang="ruby">block</span> for the "ChannelEvent":#channel-event.

bq(definition#off-listener).
  default: off(listener)
  ruby:    off(&block)
  java:    void off("ChannelStateListener":#channel-state-listener listener)
  csharp:  void Off(Action<"ChannelStateChange":#channel-state-change> listener)
  objc,swift: off(listener: ARTEventListener)

Remove the given listener <span lang="ruby">block</span> for all "ChannelEvents":#channel-event.

<div lang="jsall">
bq(definition). off(String[] events, listener)

Removes the given listener from all "ChannelEvents":#channel-event in the array.

bq(definition). off(String event)

Removes all listeners for a given "@ChannelEvent@":#channel-event .

bq(definition). off(String[] events)

Removes all listeners for all "ChannelEvents":#channel-event in the array.

bq(definition). off()

Removes all listeners (including both those registered against specific events and those registered without an event).
</div>

h5. Parameters

- <div lang="jsall">event(s)</div> := the channel event(s) to unsubscribe from<br>__Type: @String@ or @String[]@__
- <div lang="java">event</div> := the channel event to unsubscribe from<br>__Type: "@ChannelEvent@":#channelevent-
- <div lang="csharp">event</div> := the channel event to unsubscribe from<br>__Type: "@ChannelEvent@":#channel-event__
- <div lang="ruby">event</div> := the channel event as a Symbol such as @:detached@ or a @ChannelEvent@ object to unsubscribe from<br>__Type: "@ChannelEvent@":#channel-event__
- <div lang="swift,objc">event</div> := the @ARTChannelEvent@ to unsubscribe from<br>__Type: "@ARTChannelEvent@":#channel-event__

- <div lang="jsall">listener</div> := is the listener function to be removed
- <div lang="java">listener</div> := is the listener to be removed<br>__Type: "@ChannelStateListener":#channel-state-listener__
- <div lang="csharp">listener</div> := is the listener function to be removed
- <div lang="ruby">&block</div> := is the listener block to be removed
- <div lang="swift,objc">listener</div> := previous return value from a @on@ or @once@ call
- <div lang="flutter">streamSubscription</div> := obtained from calling @on@ can be used to cancel a listener by calling @streamSubscription.cancel@

h3(#related-types). Related types

h4(#channel-state).
  default: ChannelState
  objc,swift: ARTRealtimeChannelState
  ruby:    Channel::STATE Enum
  java:    io.ably.lib.realtime.ChannelState Enum
  csharp:    IO.Ably.Realtime.ChannelState Enum
  flutter: ably.ChannelState Enum

<%= partial partial_version('types/_channel_state') %>

h4(#channel-event).
  default: ChannelEvent
  swift,objc: ARTChannelEvent
  ruby:    Channel::EVENT Enum
  java:    io.ably.lib.realtime.ChannelEvent Enum
  csharp:  IO.Ably.Realtime.ChannelEvent Enum
  flutter: ably.ChannelEvent Enum

<%= partial partial_version('types/_channel_event') %>

h4(#channel-state-change).
  default: ChannelStateChange
  objc,swift: ARTRealtimeChannelStateChange
  java:    io.ably.lib.realtime.ChannelStateListener.ChannelStateChange
  ruby:    ChannelStateChange
  csharp:  IO.Ably.Realtime.ChannelStateChanged
  flutter: ably.ChannelStateChange

<%= partial partial_version('types/_channel_state_change') %>

h4(#message).
  default: Message
  objc,swift: ARTMessage
  ruby:    Ably::Models::Message
  java:    io.ably.lib.types.Message
  csharp:  IO.Ably.Message
  flutter: ably.Message

<%= partial partial_version('types/_message') %>

h4(#channel-options).
  default: ChannelOptions Object
  objc,swift: ARTChannelOptions
  ruby:    ChannelOptions Hash
  java:    io.ably.lib.types.ChannelOptions
  csharp:  IO.Ably.Rest.ChannelOptions
  flutter:  ably.ChannelOptions

<%= partial partial_version('types/_channel_options') %>

h4(#channel-state-listener).
  java: io.ably.lib.realtime.ChannelStateListener

blang[java].
  <%= partial partial_version('types/_channel_state_listener'), indent: 2, skip_first_indent: true %>

h4(#completion-listener).
  java:   io.ably.lib.realtime.CompletionListener

blang[java].
  <%= partial partial_version('types/_completion_listener'), indent: 2, skip_first_indent: true %>

h4(#paginated-request-params).
  csharp: PaginatedRequestParams

blang[csharp].
  <%= partial partial_version('types/_history_request_params'), indent: 2, skip_first_indent: true %>

h4(#message-listener).
  java:   io.ably.lib.realtime.Channel.MessageListener

blang[java].
  <%= partial partial_version('types/_message_listener'), indent: 2, skip_first_indent: true %>

h4(#paginated-result).
  default: PaginatedResult
  objc,swift: ARTPaginatedResult
  ruby:    Ably::Models::PaginatedResult
  java:    io.ably.lib.types.PaginatedResult
  csharp:  IO.Ably.PaginatedResult

<%= partial partial_version('types/_paginated_result') %>

h4(#param).
  java:    io.ably.lib.types.Param

blang[java].
  <%= partial partial_version('types/_param'), indent: 2, skip_first_indent: true %>

h2(#connection-api). Connection API Reference

inline-toc.
  Properties:
    - id#id
    - state#state
    - errorReason#error-reason
    - key#key
    - recoveryKey#recovery-key
    - serial#serial
  Methods:
    - connect()#connect
    - close()#close
    - on()#on
    - once()#once
    - off()#off
    - ping()#ping
  Related types:
    - CompletionListener#completion-listener
    - ConnectionState#connection-state
    - ConnectionEvent#connection-event
    - ConnectionStateListener#connection-state-listener
    - ConnectionStateChange#connection-state-change
    - LastConnectionDetails#last-connection-details

h3(#properties).
  default: Connection Properties
  swift,objc: ARTConnection Properties
  ruby: Ably::Realtime::Connection Attributes
  java: io.ably.lib.realtime.Connection Members
  csharp: IO.Ably.Realtime.Connection Properties

The @Connection@ object exposes the following public <span lang="default">properties</span><span lang="ruby">attributes</span><span lang="java">members</span>:

h6(#id).
  default: id
  csharp: Id

A unique public identifier @String@ for this connection, used to identify this member in presence events and messages.

h6(#state).
  default: state
  csharp: State

The current <span lang="java">"@io.ably.lib.realtime.ConnectionState@":#connection-state @state@</span><span lang="csharp">"@IO.Ably.Realtime.ConnectionState@":#connection-state @state@</span><span lang="ruby">"@Ably::Realtime::Connection::STATE@":#connection-state @state@</span><span lang="objc,swift">"@ARTRealtimeConnectionState@":#connection-state @state@</span><span lang="default">@state String@</span> of this Connection. See the "@Connection@ states":#connection-states for more information.

h6(#error-reason).
  default: errorReason
  java:    reason
  csharp:  ErrorReason
  ruby:    error_reason

When a connection failure occurs this <span lang="default,ruby">attribute</span><span lang="java">member</span><span lang="jsall,csharp">property</span> contains the <span lang="jsall,csharp">"@ErrorInfo@":/realtime/types#error-info</span><span lang="java,ruby">"@AblyException@":/realtime/types#ably-exception</span>.

h6(#key).
  default: key
  csharp:  Key

A unique private connection key @String@ used to recover or resume a connection, assigned by Ably. When recovering a connection explicitly, the <span lang="default">@recoveryKey@</span><span lang="ruby">@recovery_key@</span> is used in the @recover@ "client options":/realtime/usage#client-options as it contains both the @key@ and the last message @serial@.

This private connection key can also be used by other REST clients to publish on behalf of this client. See the "publishing over REST on behalf of a realtime client documentation":/rest/channels#publish-on-behalf  for more info.

h6(#recovery-key).
  default: recoveryKey
  ruby:    recovery_key
  csharp:  RecoveryKey

The recovery key @String@ can be used by another client to recover this connection's state in the <span lang="default">@recover@</span><span lang="csharp">@Recover@</span> "client options":/realtime/usage#client-options <span lang="default">property</span><span lang="java">member</span><span lang="ruby">attribute</span>. See "connection state recover options":#connection-state-recover-options for more information.

h6(#serial).
  default: serial
  csharp:  Serial

The serial number @Integer@ of the last message to be received on this connection, used automatically by the library when recovering or resuming a connection. When recovering a connection explicitly, the <span lang="default">@recoveryKey@</span><span lang="ruby">@recovery_key@</span><span lang="csharp">@RecoveryKey@</span> is used in the <span lang="default">@recover@</span><span lang="csharp">@Recover@</span> "client options":/realtime/usage#client-options as it contains both the @key@ and the last message @serial@.

h3(#methods).
  default: Connection Methods
  swift,objc: ARTConnection Methods
  ruby: Ably::Realtime::Connection Methods
  java: io.ably.lib.realtime.Connection Methods
  csharp: IO.Ably.Realtime.Connection Methods

h6(#connect).
  default: connect
  csharp: Connect

bq(definition).
  default: connect()
  ruby:    "Deferrable":/realtime/types#deferrable connect -> yields "@Connection@":/realtime/connection
  java:    void connect()
  csharp:  void Connect()
  flutter: Future<void> connect()

Explicitly calling <span lang="default">@connect@</span><span lang="csharp">@Connect@</span> is unnecessary unless the "@ClientOptions@":#client-options attribute <span lang="default">@autoConnect@</span><span lang="ruby">@auto_connect@</span><span lang="csharp">@AutoConnect@</span> is @false@. Unless already @connected@ or @connecting@, this method causes the connection to open, entering the @connecting@ state.

blang[ruby].
  h5. Returns

  A "@Deferrable@":/realtime/types#deferrable object is returned from this method.

  On successfully connecting to Ably, the registered success blocks for the "@Deferrable@":/realtime/types#deferrable and any block provided to this method yields a "@Connection@":/realtime/connection object.

  Failure to connect will trigger the errback callbacks of the "@Deferrable@":/realtime/types#deferrable with an "@ErrorInfo@":#error-info object containing an error response as defined in the "Ably REST API":/rest-api#common documentation.

blang[flutter].
  h5. Returns

  @Future<void>@

  Failure to connect will throw an @AblyException@ with an "@errorInfo@":#error-info property containing an error response as defined in the "Ably REST API":/rest-api#common documentation.

h6(#close).
  default: close
  csharp: Close

bq(definition).
  default: close()
  ruby:    "Deferrable":/realtime/types#deferrable close -> yields "@Connection@":/realtime/connection
  java:    void close()
  csharp:  void Close()
  flutter: Future<void> close()

Causes the connection to close, entering the @closing@ state. Once @closed@, the library will not attempt to re-establish the connection without an explicit call to <span lang="default">"@connect()@":#connect</span><span lang="csharp">"@Connect()@":#connect</span><span lang="ruby">"@connect@":#connect</span>.

blang[ruby].
  h5. Returns

  A "@Deferrable@":/realtime/types#deferrable object is returned from this method.

  On successfully closing the connection, the registered success blocks for the "@Deferrable@":/realtime/types#deferrable and any block provided to this method yields a "@Connection@":/realtime/connection object.

  Failure to close the connection will trigger the errback callbacks of the "@Deferrable@":/realtime/types#deferrable with an "@ErrorInfo@":#error-info object containing an error response as defined in the "Ably REST API":/rest-api#common documentation.

h6(#on).
  default: on
  csharp: On

There are <span lang="jsall">three</span><span lang="default">two</span> overloaded versions of this method:

bq(definition#on-state-listener).
  default: on(String event, listener("ConnectionStateChange":#connection-state-change stateChange))
  ruby:    on("ConnectionEvent":#connection-event *event) -> yields "ConnectionStateChange":#connection-state-change
  java:    void on("ConnectionEvent":#connection-event event, "ConnectionStateListener":#connection-state-listener listener)
  objc,swift: on(event: "ARTRealtimeConnectionEvent":#connection-event, call: ("ARTConnectionStateChange":#connection-state-change?) -> Void) -> ARTEventListener
  csharp:  void On("ConnectionEvent":#connection-event event, Action<"ConnectionStateChange":#connection-state-change> action)
  flutter: Stream<"ably.ConnectionStateChange":#connection-state-change> on("ably.ConnectionStateChange":#connection-state-change stateChange)

<div lang="flutter">
The Stream returned can be subscribed for with a listener.

bq(definition). final streamSubscription = stream.listen(listener)

</div>
Register the given listener <span lang="ruby">block</span><span lang="swift,objc">function</span><span lang="csharp">action</span> for the specified "@ConnectionEvent@":#connection-event on the @Connection@. The listener is passed a "ConnectionStateChange":#connection-state-change object that contains the current state, previous state, and an optional reason for the event or state change.</span>

<div lang="jsall">
bq(definition). on(String[] events, listener("ConnectionStateChange":#connection-state-change stateChange))

Same as above, but registers multiple listeners, one for each event in the array.
</div>

bq(definition#on-listener).
  default: on(listener("ConnectionStateChange":#connection-state-change stateChange))
  ruby:    on -> yields "ConnectionStateChange":#connection-state-change
  java:    void on("ConnectionStateListener":#connection-state-listener listener)
  objc,swift: on(call: ("ARTConnectionStateChange":#connection-state-change?) -> Void) -> ARTEventListener
  csharp:  void On(Action<"ConnectionStateChange":#connection-state-change> action)
  flutter: Stream<"ably.ConnectionStateChange":#connection-state-change> on()

<div lang="flutter">
The Stream returned can be subscribed for with a listener.

bq(definition). final streamSubscription = stream.listen(listener)

</div>
Register the given listener <span lang="ruby">block</span><span lang="swift,objc">function</span><span lang="csharp">action</span> for all "ConnectionEvents":#connection-event on the @Connection@. The listener is passed a "ConnectionStateChange":#connection-state-change object that contains the current state, previous state, the event, and an optional reason for the event or state change. (For the @update@ event, the current and previous states will be the same).</span>

<div lang="jsall">
If an exception is thrown in the listener and bubbles up to the event emitter, it will be caught and logged at @error@ level, so as not to affect other listeners for the same event
</div>

h5. Parameters

- <div lang="jsall">event(s)</div> := the connection event(s) to subscribe to<br>__Type: @String@ or @String[]@__
- <div lang="java">event</div> := the connection event to subscribe to<br>__Type: "@ConnectionEvent@":#connection-event__
- <div lang="csharp">event</div> := the connection event to subscribe to<br>__Type: "@ConnectionEvent@":#connection-event__
- <div lang="ruby">event</div> := the connection event as a Symbol such as @:connected@ or @ConnectionEvent@ object to subscribe to<br>__Type: "@ConnectionEvent@":#connection-event__
- <div lang="swift,objc">event</div> := the connection event to subscribe to<br>__Type: "@ARTRealtimeConnectionEvent@":#connection-event__
- <div lang="flutter">event</div> := the connection event to subscribe to<br>__Type: "@ConnectionEvent@":#connection-event__

- <div lang="jsall">listener</div> := is a function of the form @function(stateChange)@ to be notified for matching events
- <div lang="java">listener</div> := listener to be notified for matching events<br>__Type: "@ConnectionStateListener@":#connection-state-listener__
- <div lang="csharp">action</div> := action to be executed for matching events<br>__Type: "@ConnectionStateChange@":#connection-state-listener__
- <div lang="ruby">&block</div> := listener block that is yielded to for matching events
- <div lang="swift,objc">call</div> := called with matching events

h5. Example

"(external) Browser @ConnectionState@ change example":<%= JsBins.url_for('realtime/connection-states') %>

h6(#once).
  default: once
  csharp: Once

There are two overloaded versions of this method:

bq(definition#once-state-listener).
  default: once(String event, listener("ConnectionStateChange":#connection-state-change stateChange))
  ruby:    once("ConnectionEvent":#connection-event *event) -> yields "ConnectionStateChange":#connection-state-change
  java:    void once("ConnectionEvent":#connection-event event, "ConnectionStateListener":#connection-state-listener listener)
  objc,swift: once(event: "ARTRealtimeConnectionEvent":#connection-event, call: ("ARTConnectionStateChange":#connection-state-change?) -> Void) -> ARTEventListener
  csharp:  void Once("ConnectionEvent":#connection-event event, Action<"ConnectionStateChange":#connection-state-change> action)

Register the given listener <span lang="ruby">block</span><span lang="swift,objc">function</span><span lang="csharp">action</span> for a single occurrence of the specified "ConnectionEvent":#connection-event on the @Connection@. Once the listener has been called, it is removed as a registered listener and will not be called again. The listener is passed a "ConnectionStateChange":#connection-state-change object that contains the current state, previous state, the event, and an optional reason for the state change. (For the @update@ event, the current and previous states will be the same).

bq(definition#once-listener).
  default: once(listener("ConnectionStateChange":#connection-state-change stateChange))
  ruby:    once -> yields "ConnectionStateChange":#connection-state-change
  java:    void once("ConnectionStateListener":#connection-state-listener listener)
  objc,swift: once(call: ("ARTConnectionStateChange":#connection-state-change?) -> Void) -> ARTEventListener
  csharp:  void Once(Action<"ConnectionStateChange":#connection-state-change> action)

Register the given listener <span lang="ruby">block</span><span lang="csharp">action</span> for a single occurrence of any "ConnectionEvent":#connection-event on the @Connection@. Once the listener has been called, it is removed as a registered listener and will not be called again. The listener is passed a "ConnectionStateChange":#connection-state-change object that contains the current state, previous state, and an optional reason for the state change. (For the @update@ event, the current and previous states will be the same).

<div lang="jsall">
If an exception is thrown in the listener and bubbles up to the event emitter, it will be caught and logged at @error@ level, so as not to affect other listeners for the same event
</div>

h5. Parameters

- <div lang="jsall">event(s)</div> := the connection event(s) to subscribe to<br>__Type: @String@ or @String[]@__
- <div lang="java">event</div> := the connection event to subscribe to<br>__Type: "@ConnectionEvent@":#connection-event__
- <div lang="csharp">event</div> := the connection event to subscribe to<br>__Type: "@ConnectionEvent@":#connection-event__
- <div lang="ruby">event</div> := the connection event as a Symbol such as @:connected@ or @ConnectionEvent@ object to subscribe to<br>__Type: "@ConnectionEvent@":#connection-event__
- <div lang="swift,objc">event</div> := the connection event to subscribe to<br>__Type: "@ARTRealtimeConnectionEvent@":#connection-event__

- <div lang="jsall">listener</div> := is a function of the form @function(stateChange)@ to be notified for a single occurrence of a matching event
- <div lang="java">listener</div> := listener to be notified for a single occurrence of a matching state change<br>__Type: "@ConnectionStateListener@":#connection-state-listener__
- <div lang="csharp">action</div> := action to be executed for matching state changes<br>__Type: "@ConnectionStateChange@":#connection-state-listener__
- <div lang="ruby">&block</div> := listener block that is yielded to for a single occurrence of a matching event
- <div lang="swift,objc">call</div> := called with matching events

h6(#off).
  default: off
  csharp: Off

There are <span lang="jsall">six</span><span lang="default">two</span> overloaded versions of this method:

bq(definition#off-state-listener).
  default: off(String event, listener)
  ruby:    off("ConnectionEvent":#connection-event *event, &block)
  java:    void off("ConnectionEvent":#connection-event event, "ConnectionStateListener":#connection-state-listener listener)
  objc,swift: off(event: "ARTRealtimeConnectionEvent":#connection-event, listener: ARTEventListener)
  csharp:  void Off("ConnectionEvent":#connection-event event, Action<"ConnectionStateChange":#connection-state-change> action)

Remove the given listener <span lang="ruby">block</span><span lang="csharp">action</span> for the "ConnectionEvent":#connection-event.

bq(definition#off-listener).
  default: off(listener)
  ruby:    off(&block)
  java:    void off("ConnectionStateListener":#connection-state-listener listener)
  objc,swift: off(listener: ARTEventListener)
  csharp:  void Off(Action<"ConnectionStateChange":#connection-state-change> action)

Remove the given listener <span lang="ruby">block</span><span lang="csharp">action</span> for all "ConnectionEvents":#connection-event

<div lang="jsall">
bq(definition). off(String[] states, listener)

Removes the given listener from all "ConnectionEvents":#connection-event in the array.

bq(definition). off(String state)

Removes all listeners for a given "@ConnectionEvent@s.":#connection-event

bq(definition). off(String[] states)

Removes all listeners for all "ConnectionEvents":#connection-event in the array.

bq(definition). off()

Removes all listeners (including both those registered against specific events and those registered without an event).

h5. Parameters

- <div lang="jsall">event(s)</div> := the connection event(s) to unsubscribe from<br>__Type: @String@ or @String[]@__
- <div lang="java">event</div> := the connection event to unsubscribe from<br>__Type: "@ConnectionEvent@":#connection-event__
- <div lang="csharp">event</div> := the connection event to subscribe to<br>__Type: "@ConnectionEvent@":#connection-event__
- <div lang="ruby">event</div> := the connection event as a Symbol such as @:connected@ or @ConnectionEvent@ object to unsubscribe from<br>__Type: "@ConnectionEvent@":#connection-event__
- <div lang="swift,objc">event</div> := the connection event to unsubscribe from<br>__Type: "@ARTRealtimeConnectionEvent@":#connection-event__

- <div lang="jsall">listener</div> := is the listener function to be removed
- <div lang="java">listener</div> := is the listener to be removed<br>__Type: "@ConnectionStateListener@":#connection-state-listener__
- <div lang="csharp">action</div> := action to be executed for matching event changes<br>__Type: "@ConnectioneventChangeEventArgs@":#connection-state-listener__
- <div lang="ruby">&block</div> := is the listener block to be removed
- <div lang="swift,objc">listener</div> := previous return value from a @on@ or @once@ call
</div><div lang="flutter">
@streamSubscription@ obtained from calling @on@ can be used to cancel a listener by calling @streamSubscription.cancel@.

</div>

h6(#ping).
  default: ping
  csharp: Ping

bq(definition).
  default: ping(callback("ErrorInfo":/realtime/types#error-info err, Number responseInMilliseconds))
  ruby:    "Deferrable":/realtime/types#deferrable ping -> yields @Float seconds@
  java:    void ping("CompletionListener":#completion-listener listener)
  objc,swift: ping(callback: (ARTErrorInfo?) -> Void)
  csharp:  void Ping(Action<TimeSpan?, ErrorInfo> callback)

When connected, sends a heartbeat ping to the Ably server and <span lang="jsall">executes the callback with any error and the response time in milliseconds</span><span lang="default">executes the callback</span><span lang="java">calls the listener</span><span lang="ruby">yields the elapsed time in seconds</span> when a heartbeat ping request is echoed from the server. This can be useful for measuring true round-trip latency to the connected Ably server.

blang[ruby].
  h5. Returns

  A "@Deferrable@":/realtime/types#deferrable object is returned from this method.

  On successfully echoing a heartbeat from Ably, the registered success blocks for the "@Deferrable@":/realtime/types#deferrable and any block provided to this method yields a @Float@ representing the time in seconds for the heartbeat ping request to be echoed.

  Failure to receive a heartbeat ping will trigger the errback callbacks of the "@Deferrable@":/realtime/types#deferrable with an "@ErrorInfo@":#error-info object containing an error response as defined in the "Ably REST API":/rest-api#common documentation.

h3(#related-types). Related types

h4(#completion-listener).
  java:   io.ably.lib.realtime.CompletionListener

blang[java].
  <%= partial partial_version('types/_completion_listener'), indent: 2, skip_first_indent: true %>

h4(#connection-state).
  default: ConnectionState
  swift,objc: ARTRealtimeConnectionState
  ruby:    Connection::STATE Enum
  java:    io.ably.lib.realtime.ConnectionState Enum
  csharp:  IO.Ably.Realtime.ConnectionState Enum
  flutter: ably.ConnectionState Enum

<%= partial partial_version('types/_connection_state') %>

h4(#connection-event).
  default: ConnectionEvent
  swift,objc: ARTRealtimeConnectionEvent
  ruby:    Connection::EVENT Enum
  java:    io.ably.lib.realtime.ConnectionEvent Enum
  csharp:  IO.Ably.Realtime.ConnectionEvent Enum
  flutter: ably.ConnectionEvent Enum

<%= partial partial_version('types/_connection_event') %>

h4(#connection-state-listener).
  java: io.ably.lib.realtime.ConnectionStateListener

blang[java].
  <%= partial partial_version('types/_connection_state_listener'), indent: 2, skip_first_indent: true %>

h4(#connection-state-change).
  default: ConnectionStateChange Object
  objc,swift: ARTConnectionStateChange
  java:    io.ably.lib.realtime.ConnectionStateListener.ConnectionStateChange
  ruby:    ConnectionStateChange
  csharp:  IO.Ably.Realtime.ConnectionStateChange
  flutter: ably.ConnectionStateChange

<%= partial partial_version('types/_connection_state_change') %>

h4(#last-connection-details).
  javascript: LastConnectionDetails

blang[javascript].
  <%= partial partial_version('types/_last_connection_details'), indent: 2, skip_first_indent: true %>

h2(#encryption-api). Encryption API Reference

inline-toc.
  Methods:
    - getDefaultParams#get-default-params
    - generateRandomKey#generate-random-key
  Related types:
    - Channel Options
    - CipherParams#cipher-params

The <span lang="default">@Ably.Realtime.@</span><span lang="ruby">@Ably::Util::@</span><span lang="java">@io.ably.lib.util.@</span><span lang="swift,objc">@ART@</span>@Crypto@ object exposes the following public methods:

h3(#methods). Methods

h6(#get-default-params).
  default:  getDefaultParams
  ruby:     get_default_params
  csharp:   GetDefaultParams

bq(definition).
  jsall:   "CipherParams":#cipher-params Crypto.getDefaultParams(Object params)
  ruby:    "CipherParams":#cipher-params Crypto.get_default_params(Hash params)
  java:    "CipherParams":#cipher-params Crypto.getDefaultParams(Param[] params)
  swift,objc: getDefaultParams(values: [NSObject : AnyObject]) -> "ARTCipherParams":#cipher-params
  csharp:  static CipherParams GetDefaultParams(byte[] key = null, byte[] iv = null, CipherMode? mode = null)

This call obtains a "@CipherParams@":#cipher-params object using the values passed in (which must be a subset of @CipherParams@ fields that at a minimum includes a @key@), filling in any unspecified fields with default values, and checks that the result is a valid and self-consistent.

You will rarely need to call this yourself, since the client library will handle it for you if you specify @cipher@ params when initializing a channel (as in the example "at the top":#getting-started)<span lang="jsall"> or when setting channel options with @channel.setOptions()@</span>.

h5. Parameters

- <span lang="default">params</span><span lang="csharp">arguments</span> := The cipher <span lang="default">params</span><span lang="csharp">arguments</span> that you want to specify. It must at a minimum include a @key@, which should be either a binary (<span lang="java,csharp">@byte[]@</span><span lang="javascript">@ArrayBuffer@ or @WordArray@</span><span lang="nodejs">@Buffer@</span><span lang="ruby">byte array</span><span lang="objc,swift">@NSData@</span>) or a base64-encoded <span lang="objc">@NS@</span>@String@.

h5. Returns

On success, the method returns a complete "@CipherParams@":#cipher-params object. Failure will raise an <span lang="ruby,java">"@AblyException@":/realtime/types/#ably-exception </span><span lang="default">exception</span>.

h5. Example

```[jsall](code-editor:realtime/channel-encrypted)
  var cipherParams = Ably.Realtime.Crypto.getDefaultParams({key: <key>});
  var channelOpts = { cipher: cipherParams };
  var channel = realtime.channels.get('{{RANDOM_CHANNEL_NAME}}', channelOpts);
```

```[ruby]
  cipher_params = Ably::Util::Crypto.get_default_params({key: <key>})
  channel_opts = { cipher: cipher_params }
  channel = realtime.channels.get('{{RANDOM_CHANNEL_NAME}}', channel_opts)
```

```[java]
  CipherParams params = Crypto.getDefaultParams(new Param[]{ new Param("key", <key>) });
  ChannelOptions options = new ChannelOptions();
  options.encrypted = true;
  options.cipherParams = params;
  Channel channel = realtime.channels.get("{{RANDOM_CHANNEL_NAME}}", options);
```

```[csharp]
  var @params = Crypto.GetDefaultParams(<key>);
  ChannelOptions options = new ChannelOptions(@params);
  var realtime = new AblyRealtime("{{API_KEY}}");
  var channel = realtime.Channels.Get("{{RANDOM_CHANNEL_NAME}}", options);
```

```[objc]
ARTCipherParams *params = [ARTCrypto getDefaultParams:@{@"key": <key>}];
ARTChannelOptions *options = [[ARTChannelOptions alloc] initWithCipher:params];
ARTRealtimeChannel *channel = [realtime.channels get:@"{{RANDOM_CHANNEL_NAME}}" options:options];
```

```[swift]
let params = ARTCrypto.getDefaultParams(["key": <key>])
let options = ARTChannelOptions(cipher: params)
let channel = realtime.channels.get("{{RANDOM_CHANNEL_NAME}}", options: options)
```

h6(#generate-random-key).
  default:  generateRandomKey
  ruby:     generate_random_key
  csharp:   GenerateRandomKey

bq(definition).
  default: Crypto.generateRandomKey(Int keyLength?, callback("ErrorInfo":/realtime/types#error-info err, @Buffer@ key))
  ruby:    byte array Crypto.generate_random_key(Int key_length?)
  java:    @byte[]@ Crypto.generateRandomKey(Int keyLength?)
  objc,swift: generateRandomKey(length?: UInt) -> NSData
  csharp:  static byte[] GenerateRandomKey(CipherMode? mode = null, int? keyLength = null)

This call obtains a randomly-generated binary key of the specified key length.

h5. Parameters

- <span lang="default">keyLength</span><span lang="ruby,python">key_length</span> := Optional @Int@ with the length of key to generate. For AES, this should be either 128 or 256. If unspecified, defaults to 256.

- <div lang="csharp">mode</div> := Optional AES @CipherMode@ which is used when the key is generated
- <div lang="jsall">callback</div> := is a function of the form @function(err, key)@ which is called upon completion

blang[jsall].
  h5. Callback result

  On successfully generating a key, the callback is called with that key as a <span lang=javascript>@WordArray@</span><span lang=nodejs>@Buffer@</span>, and @err@ is @null@. On failure to create a key, @err@ contains an "@ErrorInfo@":#error-info object describing the failure reason.

blang[java,ruby,objc,swift,csharp].
  h5. Returns

  On success, the method returns the generated key as a <span lang="java,csharp">@byte[]@ array</span><span lang=ruby>byte array</span><span lang="objc,swift">@NSData@</span>. Failure will raise an "@AblyException@":/realtime/types/#ably-exception .

h5. Example

```[jsall]
  Ably.Realtime.Crypto.generateRandomKey(256, function(err, key) {
    if(err) {
      console.log("Key generation failed: " + err.toString());
    } else {
      var channel = realtime.channels.get('{{RANDOM_CHANNEL_NAME}}', {cipher: {key: key}});
    }
  });
```

```[ruby]
  key = Ably::Util::Crypto.generate_random_key(256)
  channel = realtime.channels.get('{{RANDOM_CHANNEL_NAME}}', {cipher: {key: key}})
```

```[java]
  byte[] key = Crypto.generateRandomKey(256);
  ChannelOptions options = ChannelOptions.withCipher(key);
  Channel channel = realtime.channels.get("{{RANDOM_CHANNEL_NAME}}", options);
```

```[csharp]
  byte[] key = Crypto.GenerateRandomKey(keyLength: 256);
  var options = new ChannelOptions(key);
  var channel = realtime.Channels.Get("{{RANDOM_CHANNEL_NAME}}", options);
```

```[objc]
  NSData *key = [ARTCrypto generateRandomKey:256];
  ARTChannelOptions *options = [[ARTChannelOptions alloc] initWithCipherKey:key];
  ARTRealtimeChannel *channel = [realtime.channels get:@"{{RANDOM_CHANNEL_NAME}}" options:options];
```

```[swift]
let key = ARTCrypto.generateRandomKey(256)
let options = ARTChannelOptions(cipherWithKey: key)
let channel = realtime.channels.get("{{RANDOM_CHANNEL_NAME}}", options: options)
```

h3(#related-types). Related types

h4(#channel-options).
  default:   ChannelOptions Object
  objc,swift:   ARTChannelOptions
  ruby:      ChannelOptions Hash
  java:      io.ably.types.ChannelOptions
  csharp:    IO.Ably.ChannelOptions

<%= partial partial_version('types/_channel_options') %>

h4(#cipher-params).
  default: CipherParams
  objc,swift:   ARTCipherParams
  ruby:    CipherParams Hash
  java:    io.ably.lib.util.Crypto.CipherParams
  csharp:  IO.Ably.CipherParams

<%= partial partial_version('types/_cipher_params') %>

h2(#history-api). History API Reference

inline-toc.
  Channel:
    - history(options)#channel-history
  Presence:
    - history(options)#presence-history
  Related types:
    - Message
    - PresenceMessage#presence-message
    - Presence action
    - PaginatedResult#paginated-result
    - Param

h3. Channel object

The "Realtime @Channel@ object":/realtime/channels exposes the following public method to obtain "@Message@":#message history.

h4. Methods

h6(#channel-history).
  default: history
  csharp: History

bq(definition).
  default: history(Object option, callback("ErrorInfo":/realtime/types#error-info err, "PaginatedResult":#paginated-result<"Message":#message> resultPage))
  ruby:    "Deferrable":/realtime/types#deferrable history(Hash option) -> yields "PaginatedResult":#paginated-result<"Message":#message>
  java:    "PaginatedResult":#paginated-result<"Message":#message> history("Param":#param[] option)
  objc,swift: history(query: ARTRealtimeHistoryQuery?, callback: ("ARTPaginatedResult":#paginated-result<"ARTMessage":#message>?, ARTErrorInfo?) -> Void) throws
  csharp:  Task<PaginatedResult<Message>> HistoryAsync("PaginatedRequestParams":#paginated-request-params dataQuery, bool untilAttach = false);

Gets a "paginated":#paginated-result set of historical messages for this channel.

h5. Parameters

- <span lang="default">option</span><span lang="objc,swift">query</span><span lang="java">"Param":#param[] option</span><span lang="csharp">"PaginatedRequestParams":#paginated-request-params query</span> := <span lang="default">an optional object containing the query parameters</span><span lang="ruby">an optional set of key value pairs containing the query parameters</span>, as specified below.

- <div lang="jsall">callback</div> := is a function of the form: @function(err, resultPage)@
- <div lang="ruby">&block</div> := yields a @PaginatedResult<Message>@ object
- <div lang="swift,objc">callback</div> := called with a "ARTPaginatedResult":#paginated-result<"ARTMessage":#message> object or an error

h5. <span lang="default">@options@ parameters</span><span lang="objc,swift">@ARTRealtimeHistoryQuery@ properties</span><span lang="csharp">"@PaginatedRequestParams@":#paginated-request-params properties</span>

- <span lang="default">start</span><span lang="ruby">:start</span><span lang="csharp">Start</span> := _beginning of time_ earliest <span lang="csharp">@DateTimeOffset@ or </span><span lang="ruby">@Time@ or </span>time in milliseconds since the epoch for any messages retrieved<br>__Type: <span lang="default">@Long@</span><span lang="ruby">@Int or @Time@</span><span lang="csharp">@DateTimeOffset@</span>__
- <span lang="default">end</span><span lang="ruby">:end</span><span lang="csharp">End</span> := _current time_ latest <span lang="csharp">@DateTimeOffset@ or </span><span lang="ruby">@Time@ or </span>time in milliseconds since the epoch for any messages retrieved<br>__Type: <span lang="default">@Long@</span><span lang="ruby">@Int or @Time@</span><span lang="csharp">@DateTimeOffset@</span>__
- <span lang="default">direction</span><span lang="ruby">:direction</span><span lang="csharp">Direction</span> := _backwards_ <span lang="ruby">@:@</span>@forwards@ or <span lang="ruby">@:@</span>@backwards@<br>__Type: <span lang="default">@String@</span><span lang="ruby">@Symbol@</span><span lang="csharp">@Direction@ enum</span>__
- <span lang="default">limit</span><span lang="ruby">:limit</span><span lang="csharp">Limit</span> := _100_ maximum number of messages to retrieve up to 1,000<br>__Type: @Integer@__
- <span lang="default">untilAttach</span><span lang="ruby">:until_attach</span> := _false_ when true, ensures message history is up until the point of the channel being attached. See "continuous history":#continuous-history for more info. Requires the @direction@ to be @backwards@ (the default). If the @Channel@ is not attached, or if @direction@ is set to @forwards@, this option will result in an error<br>__Type: @Boolean@__

blang[jsall,objc,swift].
  h5. Callback result

  On success, @resultPage@ contains a "@PaginatedResult@":#paginated-result encapsulating an array of "@Message@":#message objects corresponding to the current page of results. "@PaginatedResult@":#paginated-result supports pagination using "@next()@":#paginated-result and "@first()@":#paginated-result methods.

  On failure to retrieve message history, @err@ contains an "@ErrorInfo@":#error-info object with the failure reason.

blang[java].
  h5. Returns

  On success, the returned "@PaginatedResult@":#paginated-result encapsulates an array of "@Message@":#message objects corresponding to the current page of results. "@PaginatedResult@":#paginated-result supports pagination using "@next@":#paginated-result and "@first@":#paginated-result methods.

  Failure to retrieve the message history will raise an "@AblyException@":/realtime/types/#ably-exception

blang[csharp].
  h5. Returns

  Returns a @Task@ that needs to be awaited.

  On success, the returned "@PaginatedResult@":#paginated-result encapsulates an array of "@Message@":#message objects corresponding to the current page of results. "@PaginatedResult@":#paginated-result supports pagination using "@NextAsync@":#paginated-result and "@FirstAsync@":#paginated-result methods.

  Failure to retrieve the message history will raise an "@AblyException@":/realtime/types/#ably-exception

blang[ruby].
  h5. Returns

  A "@Deferrable@":/realtime/types#deferrable object is returned from the method.

  On success, the registered success blocks for the "@Deferrable@":/realtime/types#deferrable and any block provided to the method yield a "PaginatedResult":#paginated-result that encapsulates an array of "@Message@":#message objects corresponding to the current page of results. "@PaginatedResult@":#paginated-result supports pagination using "@next()@":#paginated-result and "@first()@":#paginated-result methods.

  Failure to retrieve the message history will trigger the @errback@ callbacks of the "@Deferrable@":/realtime/types#deferrable with an "@ErrorInfo@":#error-info object with the failure reason.

h3. Presence object

"Realtime @Presence@ object":/realtime/presence exposes the following public method to obtain presence event history such as enter, update and leave events. These events are represented as "@PresenceMessage@":#presence-message objects.

h4. Methods

h6(#presence-history).
  default: history
  csharp: History

bq(definition).
  default: history(Object option, callback("ErrorInfo":/realtime/types#error-info err, "PaginatedResult":#paginated-result<"PresenceMessage":#presence-message> resultPage))
  ruby:    "Deferrable":/realtime/types#deferrable history(Hash option) -> yields "PaginatedResult":#paginated-result<"PresenceMessage":#presence-message>
  java:    "PaginatedResult":#paginated-result<"PresenceMessage":#presence-message> history("Param":#param[] option)
  objc,swift: history(query: ARTRealtimeHistoryQuery?, callback: ("ARTPaginatedResult":#paginated-result<"ARTPresenceMessage":#presence-message>?, ARTErrorInfo?) -> Void) throws
  csharp:  Task<"PaginatedResult":#paginated-result<"PresenceMessage":#presence-message>> HistoryAsync("PaginatedRequestParams":#paginated-request-params query, bool untilAttach = false [deprecated])

Gets a "paginated":#paginated-result set of historical presence events for this channel.

h5. Parameters

- <span lang="default">option</span><span lang="objc,swift">query</span><span lang="java">"Param":#param[] option</span><span lang="csharp">"PaginatedRequestParams":#paginated-request-params query</span> := <span lang="default">an optional object containing the query parameters</span><span lang="ruby">an optional set of key value pairs containing the query parameters</span>, as specified below.

- <div lang="jsall">callback</div> := is a function of the form: @function(err, resultPage)@
- <div lang="ruby">&block</div> := yields a @PaginatedResult<PresenceMessage>@ object
- <div lang="swift,objc">callback</div> := called with a "ARTPaginatedResult":#paginated-result<"ARTPresenceMessage":#presence-message> object or an error

h5. <span lang="default">@options@ parameters</span><span lang="objc,swift">@ARTRealtimeHistoryQuery@ properties</span><span lang="csharp">"@PaginatedRequestParams@":#paginated-request-params properties</span>

- <span lang="default">start</span><span lang="ruby">:start</span><span lang="csharp">Start</span> := _beginning of time_ earliest <span lang="csharp">@DateTimeOffset@ or </span><span lang="ruby">@Time@ or </span>time in milliseconds since the epoch for any presence events retrieved<br>__Type: <span lang="default">@Long@</span><span lang="ruby">@Int or @Time@</span><span lang="csharp">@DateTimeOffset@</span>__
- <span lang="default">end</span><span lang="ruby">:end</span><span lang="csharp">End</span> := _current time_ latest <span lang="csharp">@DateTimeOffset@ or </span><span lang="ruby">@Time@ or </span>time in milliseconds since the epoch for any presence events retrieved<br>__Type: <span lang="default">@Long@</span><span lang="ruby">@Int or @Time@</span><span lang="csharp">@DateTimeOffset@</span>__
- <span lang="default">direction</span><span lang="ruby">:direction</span><span lang="csharp">Direction</span> := _backwards_ <span lang="ruby">@:@</span>@forwards@ or <span lang="ruby">@:@</span>@backwards@<br>__Type: <span lang="default">@String@</span><span lang="ruby">@Symbol@</span><span lang="csharp">@Direction@ enum</span>__
- <span lang="default">limit</span><span lang="ruby">:limit</span><span lang="csharp">Limit</span> := _100_ maximum number of presence events to retrieve up to 1,000<br>__Type: @Integer@__

blang[jsall,objc,swift].
  h5. Callback result

  On success, @resultPage@ contains a "@PaginatedResult@":#paginated-result encapsulating an array of "@PresenceMessage@":#presence-message objects corresponding to the current page of results. "@PaginatedResult@":#paginated-result supports pagination using "@next()@":#paginated-result and "@first()@":#paginated-result methods.

  On failure to retrieve presence event history, @err@ contains an "@ErrorInfo@":#error-info object with the failure reason.

blang[java].
  h5. Returns

  On success, the returned "@PaginatedResult@":#paginated-result encapsulates an array of "@PresenceMessage@":#presence-message objects corresponding to the current page of results. "@PaginatedResult@":#paginated-result supports pagination using "@next@":#paginated-result and "@first@":#paginated-result methods.

  Failure to retrieve the presence event history will raise an "@AblyException@":/realtime/types/#ably-exception

blang[csharp].
  h5. Returns

  Returns a @Task@ that needs to be awaited.

  On success, the returned "@PaginatedResult@":#paginated-result encapsulates an array of "@PresenceMessage@":#presence-message objects corresponding to the current page of results. "@PaginatedResult@":#paginated-result supports pagination using "@NextAsync@":#paginated-result and "@FirstAsync@":#paginated-result methods.

  Failure to retrieve the presence event history will raise an "@AblyException@":/realtime/types/#ably-exception

blang[ruby].
  h5. Returns

  A "@Deferrable@":/realtime/types#deferrable object is returned from the method.

  On success, the registered success blocks for the "@Deferrable@":/realtime/types#deferrable and any block provided to the method yield a "PaginatedResult":#paginated-result that encapsulates an array of "@PresenceMessage@":#presence-message objects corresponding to the current page of results. "@PaginatedResult@":#paginated-result supports pagination using "@next()@":#paginated-result and "@first()@":#paginated-result methods.

  Failure to retrieve the presence event history will trigger the @errback@ callbacks of the "@Deferrable@":/realtime/types#deferrable with an "@ErrorInfo@":#error-info object with the failure reason.

h3(#related-types). Related types

h4(#message).
  default: Message
  swift,objc: ARTMessage
  ruby:    Ably::Models::Message Enum
  java:    io.ably.lib.types.Message
  csharp: IO.Ably.Message

<%= partial partial_version('types/_message') %>

h4(#presence-message).
  default: PresenceMessage
  swift,objc: ARTPresenceMessage
  ruby:    Ably::Models::PresenceMessage Enum
  java:    io.ably.lib.types.PresenceMessage
  csharp:  IO.Ably.PresenceMessage

<%= partial partial_version('types/_presence_message') %>

h4(#presence-action).
  default: Presence action
  swift,objc: ARTPresenceAction
  java:    io.ably.lib.types.PresenceMessage.Action
  ruby:    Ably::Models::PresenceMessage::ACTION
  csharp:  IO.Ably.PresenceAction

<%= partial partial_version('types/_presence_action') %>

h4(#paginated-request-params).
  csharp: IO.Ably.PaginatedRequestParams

blang[csharp].
  <%= partial partial_version('types/_history_request_params'), indent: 2, skip_first_indent: true %>

h4(#paginated-result).
  default: PaginatedResult
  swift,objc: ARTPaginatedResult
  ruby:    Ably::Models::PaginatedResult
  java:    io.ably.lib.types.PaginatedResult
  csharp:  IO.Ably.PaginatedResult

<%= partial partial_version('types/_paginated_result') %>

h4(#param).
  java:    io.ably.lib.types.Param

blang[java].
  <%= partial partial_version('types/_param'), indent: 2, skip_first_indent: true %>

h2(#message-api). Message API Reference

inline-toc.
  Properties:
    - name#name
    - data#data
    - extras#extras
    - id#id
    - clientId#client-id
    - connectionId#connection-id
    - timestamp#timestamp
    - encoding#encoding
  Methods:
    - fromEncoded#message-from-encoded
    - fromEncodedArray#message-from-encoded-array

h3(#properties).
  default: Properties
  java:    Members
  ruby:    Attributes
  python:  Attributes

A @Message@ represents an individual message that is sent to or received from Ably.

h6(#name).
  default: name
  csharp: Name

The event name, if provided. <br>__Type: @String@__

h6(#data).
  default: data
  csharp: Data

The message payload, if provided.<br>__Type: <span lang="default">@String@, @StringBuffer@, @JSON Object@</span><span lang="java">@String@, @ByteArray@, @JSONObject@, @JSONArray@</span><span lang="csharp">@String@, @byte[]@, @plain C# object that can be serialized to JSON@</span><span lang="ruby">@String@, @Binary@ (ASCII-8BIT String), @Hash@, @Array@</span><span lang="python">@String@, @Bytearray@, @Dict@, @List@</span><span lang="php">@String@, @Binary String@, @Associative Array@, @Array@</span><span lang="objc">@NSString *@, @NSData *@, @NSDictionary *@, @NSArray *@</span><span lang="swift">@String@, @NSData@, @Dictionary@, @Array@</span><span lang="flutter">@String@, @Map@, @List@</span>__

h6(#extras).
  default: extras
  csharp: Extras

Metadata and/or ancillary payloads, if provided. The only currently valid payload for extras is the "@push@":/general/push/publish#channel-broadcast-example object.<br>__Type: <span lang="java">@JSONObject@, @JSONArray@</span><span lang="csharp">plain C# object that can be converted to JSON</span><span lang="jsall">@JSON Object@</span><span lang="ruby">@Hash@, @Array@</span><span lang="python">@Dict@, @List@</span><span lang="swift">@Dictionary@, @Array@</span><span lang="objc">@NSDictionary *@, @NSArray *@</span><span lang="php">@Associative Array@, @Array@</span>__

h6(#id).
  default: id
  csharp: Id

A Unique ID assigned by Ably to this message.<br>__Type: @String@__

h6(#client-id).
  default: clientId
  csharp: ClientId
  ruby: client_id
  python: client_id

The client ID of the publisher of this message.<br>__Type: @String@__

h6(#connection-id).
  default: connectionId
  csharp: ConnectionId
  ruby: connection_id
  python: connection_id

The connection ID of the publisher of this message.<br>__Type: @String@__

h6(#timestamp).
  default: timestamp
  csharp: Timestamp

Timestamp when the message was received by the Ably, as <span lang="default">milliseconds since the epoch</span><span lang="ruby">a @Time@ object</span><br>.__Type: <span lang="default">@Integer@</span><span lang="java">@Long Integer@</span><span lang="csharp">@DateTimeOffset@</span><span lang="ruby">@Time@</span><span lang="objc,swift">@NSDate@</span>__

h6(#encoding).
  default: encoding
  csharp: Encoding

This will typically be empty as all messages received from Ably are automatically decoded client-side using this value. However, if the message encoding cannot be processed, this attribute will contain the remaining transformations not applied to the @data@ payload.<br>__Type: @String@__

h3(methods).
  default: Message methods

h6(#message-from-encoded).
  default: Message.fromEncoded

bq(definition).
  default: Message.fromEncoded(Object encodedMsg, ChannelOptions channelOptions?) -> Message

A static factory method to create a "@Message@":/realtime/types#message from a deserialized @Message@-like object encoded using Ably's wire protocol.

h5. Parameters

- encodedMsg := a @Message@-like deserialized object.<br>__Type: @Object@__
- channelOptions := an optional "@ChannelOptions@":/realtime/types#channel-options. If you have an encrypted channel, use this to allow the library can decrypt the data.<br>__Type: @Object@__

h5. Returns

A "@Message@":/realtime/types#message object

h6(#message-from-encoded-array).
  default: Message.fromEncodedArray

bq(definition).
  default: Message.fromEncodedArray(Object[] encodedMsgs, ChannelOptions channelOptions?) -> Message[]

A static factory method to create an array of "@Messages@":/realtime/types#message from an array of deserialized @Message@-like object encoded using Ably's wire protocol.

h5. Parameters

- encodedMsgs := an array of @Message@-like deserialized objects.<br>__Type: @Array@__
- channelOptions := an optional "@ChannelOptions@":/realtime/types#channel-options. If you have an encrypted channel, use this to allow the library can decrypt the data.<br>__Type: @Object@__

h5. Returns

An @Array@ of "@Message@":/realtime/types#message objects

h2(#presence-api). Presence API Reference

inline-toc.
  Properties:
    - syncComplete#sync-complete
  Methods:
    - enter()#enter
    - leave()#leave
    - update()#update
    - get()#get
    - history()#history
    - subscribe()#subscribe
    - unsubscribe()#unsubscribe
    - enterClient()#enter-client
    - leaveClient()#leave-client
    - updateClient()#update-client
  Related types:
    - PresenceMessage#presence-message
    - Presence action
    - CompletionListener#completion-listener
    - PaginatedResult#paginated-result
    - Param
    - PresenceListener#presence-listener

h3(#properties).
  default: Presence Properties
  objc,swift: ARTPresence Properties
  ruby: Ably::Realtime::Presence Attributes
  java: io.ably.lib.realtime.Presence Members
  csharp: IO.Ably.Realtime.Presence Properties

The @Presence@ object exposes the following public <span lang="default">properties</span><span lang="ruby">attributes</span><span lang="java">members</span>:

h6(#sync-complete).
  default: syncComplete
  ruby: sync_complete?
  csharp: SyncComplete

A @boolean@ field indicating whether the presence member set is synchronized with server after a channel attach.
When a channel is attached, the Ably service immediately synchronizes the presence member set with the client. Typically this process completes in milliseconds, however when the presence member set is very large, bandwidth constraints may slow this synchronization process down.

h3. Methods

h6(#enter).
  default: enter
  csharp: EnterAsync

In order to enter and be present on a channel, the client must "be identified by having a client ID":https://faqs.ably.com/authenticated-and-identified-clients, "have permission to be present":https://faqs.ably.com/using-capabilities-to-manage-client-access-privileges-on-channels, and be attached to the channel. For simplicity, the library will implicitly attach to a channel when entering. Entering when already entered is treated as an "update":#update.

There are two overloaded versions of this method. <span lang="csharp"></span><span lang="default">
  With both versions, a <span lang="default">callback</span><span lang="ruby">block</span><span lang="java">completion listener</span> can optionally be passed in to be notified of success or failure to enter.
</span>

bq(definition#enter-none).
  default:  enter(callback("ErrorInfo":/realtime/types#error-info err))
  ruby:     "Deferrable":/realtime/types#deferrable enter() -> yields
  java:     void enter("CompletionListener":#completion-listener listener)
  objc,swift: enter(data: nil, callback: ((ARTErrorInfo?) -> Void)?)
  csharp:   Task EnterAsync()

Enter a presence channel without any data. If the channel is @initialized@ (i.e. no attempt to attach has yet been made for this channel), then calling @enter@ will implicitly attach the channel.

bq(definition#enter-data).
  default: enter(Object data, callback("ErrorInfo":/realtime/types#error-info err))
  ruby:    "Deferrable":/realtime/types#deferrable enter(Object data) -> yields
  java:    void enter(Object data, "CompletionListener":#completion-listener listener)
  objc,swift: enter(data: AnyObject?, callback: ((ARTErrorInfo?) -> Void)?)
  csharp:  Task EnterAsync(object clientData)

Enter a presence channel and provide data that is associated with the current present member. If the channel is @initialized@ (i.e. no attempt to attach has yet been made for this channel), then calling @enter@ will implicitly attach the channel.

h5. Parameters

- <div lang="jsall">data</div> := data payload for the current present member. The supported payload types are Strings, JSON objects and arrays, buffers containing arbitrary binary data, and null.<br>__Type: @Object@__
- <div lang="java">data</div> := data payload for the current present member. The supported payload types are Strings, JsonObject, binary data as byte arrays, and null.<br>__Type: @Object@__
- <div lang="csharp">data</div> := data payload for the current present member. The supported payload types are strings, plain object convertible to json, binary data as byte arrays, and null.<br>__Type: @Object@__
- <div lang="ruby">data</div> := data payload for the current present member. The supported payload types are Strings, Hash or Array objects that can be serialized to JSON using @to_json@, binary data as @ASCII-8BIT@ byte arrays, and null.<br>__Type: @Object@__
- <div lang="objc,swift">data</div> := data payload for the message. The supported payload types are <span lang="objc">@NS@</span>@String@, <span lang="objc">@NS@</span>@Dictionary@ or <span lang="objc">@NS@</span>@Array@ objects that can be serialized to JSON, binary data as @NSData@, and @nil@.<br>__Type: @Object@__

- <div lang="jsall">callback</div> := is a function of the form @function(err)@ which is called upon completion
- <div lang="java">listener</div> := Listener to be notified on completion<br>__Type: "@CompletionListener@":#completion-listener__
- <div lang="ruby">&block</div> := yields upon successfully entering the channel
- <div lang="objc,swift">callback</div> := called upon successfully entering the channel, or with an error

blang[jsall,swift,objc].
  h5. Callback result

  On successfully entering the channel, @err@ is null. On failure to enter, @err@ contains an "@ErrorInfo@":#error-info object describing the failure reason.

blang[java].
  h5. Listener result

  On successfully entering the channel, the @onSuccess@ method of the "CompletionListener":#completion-listener is called. On failure to enter, the @onError@ method is called with an "@ErrorInfo@":#error-info argument describing the failure reason.

blang[csharp].
  h5. Task result

  On successfully entering the channel, the method will complete. On failure to enter, an @AblyException@ will be thrown with an "@ErrorInfo@":#error-info object describing the failure reason.

blang[ruby].
  h5. Returns

  A "@Deferrable@":/realtime/types#deferrable object is returned from the method.

  On successfully entering the channel, the registered success blocks for the "@Deferrable@":/realtime/types#deferrable and any block provided to the method are executed. On failure to enter, the @errback@ callbacks of the "@Deferrable@":/realtime/types#deferrable are called with an "@ErrorInfo@":#error-info argument describing the failure reason.

h6(#leave).
  default: leave
  csharp: Leave

In order to leave the presence set of a channel, the client must have already "entered and been present":#enter.

There are two overloaded versions of this method. <span lang="csharp"></span><span lang="default">
  With both versions, a <span lang="default">callback</span><span lang="ruby">block</span><span lang="java">completion listener</span> can optionally be passed in to be notified of success or failure to leave.
</span>

bq(definition#leave-none).
  default:  leave(callback("ErrorInfo":/realtime/types#error-info err))
  ruby:     "Deferrable":/realtime/types#deferrable leave() -> yields
  java:     void leave("CompletionListener":#completion-listener listener)
  swift,objc: leave(data: nil, callback: ((ARTErrorInfo?) -> Void)?)
  csharp:   Task LeaveAsync()

Leave a presence channel without emitting any data.

bq(definition#leave-data).
  default: leave(Object data, callback("ErrorInfo":/realtime/types#error-info err))
  ruby:    "Deferrable":/realtime/types#deferrable leave(Object data) -> yields
  java:    void leave(Object data, "CompletionListener":#completion-listener listener)
  swift,objc: leave(data: AnyObject?, callback: ((ARTErrorInfo?) -> Void)?)
  csharp:  Task LeaveAsync(object clientData)

Leave a presence channel and emit data that is associated with the current leaving member.

h5. Parameters

- <div lang="jsall">data</div> := data payload for the current present member. The supported payload types are Strings, JSON objects and arrays, buffers containing arbitrary binary data, and null.<br>__Type: @Object@__
- <div lang="java">data</div> := data payload for the current present member. The supported payload types are Strings, JsonObject, binary data as byte arrays, and null.<br>__Type: @Object@__
- <div lang="csharp">data</div> := data payload for the current present member. The supported payload types are strings, plain objects convertible to json, binary data as byte arrays, and null.<br>__Type: @Object@__
- <div lang="ruby">data</div> := data payload for the current present member. The supported payload types are Strings, Hash or Array objects that can be serialized to JSON using @to_json@, binary data as @ASCII-8BIT@ byte arrays, and null.<br>__Type: @Object@__
- <div lang="objc,swift">data</div> := data payload for the message. The supported payload types are <span lang="objc">@NS@</span>@String@, <span lang="objc">@NS@</span>@Dictionary@ or <span lang="objc">@NS@</span>@Array@ objects that can be serialized to JSON, binary data as @NSData@, and @nil@.<br>__Type: @Object@__

- <div lang="jsall">callback</div> := is a function of the form @function(err)@ which is called upon completion
- <div lang="java">listener</div> := Listener to be notified on completion<br>__Type: "@CompletionListener@":#completion-listener__
- <div lang="ruby">&block</div> := yields upon successfully leaving the channel
- <div lang="objc,swift">callback</div> := called upon leaving the channel, or with an error

blang[jsall,swift,objc].
  h5. Callback result

  On successfully leaving the channel, @err@ is null. On failure to leave, @err@ contains an "@ErrorInfo@":#error-info object describing the failure reason.

blang[java].
  h5. Listener result

  On successfully leaving the channel, the @onSuccess@ method of the "CompletionListener":#completion-listener is called. On failure to leave, the @onError@ method is called with an "@ErrorInfo@":#error-info argument describing the failure reason.

blang[csharp].
  h5. Task result

  On successfully leaving the channel, the method will complete. On failure to leave, an @AblyException@ will be thrown with an "@ErrorInfo@":#error-info object describing the failure reason.

blang[ruby].
  h5. Returns

  A "@Deferrable@":/realtime/types#deferrable object is returned from the method.

  On successfully leaving the channel, the registered success blocks for the "@Deferrable@":/realtime/types#deferrable and any block provided to the method are executed. On failure to leave, the @errback@ callbacks of the "@Deferrable@":/realtime/types#deferrable are called with an "@ErrorInfo@":#error-info argument describing the failure reason.

h6(#update).
  default: update
  csharp: Update

Clients can update their member data on the channel which will trigger a broadcast of this update to all presence subscribers. The "pre-requisites for <span lang="default">@update@</span><span lang="csharp">@Update@</span>":#update are the same as for "<span lang="default">@enter@</span><span lang="csharp">@Enter@</span>":#enter. If an attempt to <span lang="default">@update@</span><span lang="csharp">@Update@</span> is made before the client has entered the channel, the update is treated as an <span lang="default">@enter@</span><span lang="csharp">@Enter@</span>.

<span lang="csharp"></span><span lang="default">
  A <span lang="default">callback</span><span lang="ruby">block</span><span lang="java">completion listener</span> can optionally be passed in to be notified of success or failure to update the member data.
</span>

bq(definition#update-data).
  default: update(Object data, callback("ErrorInfo":/realtime/types#error-info err))
  ruby:    "Deferrable":/realtime/types#deferrable update(Object data) -> yields
  java:    void update(Object data, "CompletionListener":#completion-listener listener)
  swift,objc: update(data: AnyObject?, callback: ((ARTErrorInfo?) -> Void)?)
  csharp:  Task UpdateAsync(object clientData)

Update the current member's data and broadcast an update event to all subscribers. @data@ may be @null@. If the channel is @initialized@ (i.e. no attempt to attach has yet been made for this channel), then calling @update@ will implicitly attach the channel.

h5. Parameters

- <div lang="jsall">data</div> := data payload for the current present member. The supported payload types are Strings, JSON objects and arrays, buffers containing arbitrary binary data, and null.<br>__Type: @Object@__
- <div lang="java">data</div> := data payload for the current present member. The supported payload types are Strings, JsonObject, binary data as byte arrays, and null.<br>__Type: @Object@__
- <div lang="csharp">data</div> := data payload for the current present member. The supported payload types are strings, plain objects convertible to json, binary data as byte arrays, and null.<br>__Type: @Object@__
- <div lang="ruby">data</div> := data payload for the current present member. The supported payload types are Strings, Hash or Array objects that can be serialized to JSON using @to_json@, binary data as @ASCII-8BIT@ byte arrays, and null.<br>__Type: @Object@__
- <div lang="objc,swift">data</div> := data payload for the message. The supported payload types are <span lang="objc">@NS@</span>@String@, <span lang="objc">@NS@</span>@Dictionary@ or <span lang="objc">@NS@</span>@Array@ objects that can be serialized to JSON, binary data as @NSData@, and @nil@.<br>__Type: @Object@__

- <div lang="jsall">callback</div> := is a function of the form @function(err)@ which is called upon completion
- <div lang="java">listener</div> := Listener to be notified on completion<br>__Type: "@CompletionListener@":#completion-listener__
- <div lang="ruby">&block</div> := yields upon successfully updating the member data
- <div lang="objc,swift">callback</div> := called upon updating the channel, or with an error

blang[jsall,objc,swift].
  h5. Callback result

  On successfully updating the data, @err@ is null. On failure to update, @err@ contains an "@ErrorInfo@":#error-info object describing the failure reason.

blang[java].
  h5. Listener result

  On successfully updating the data, the @onSuccess@ method of the "CompletionListener":#completion-listener is called. On failure to update, the @onError@ method is called with an "@ErrorInfo@":#error-info argument describing the failure reason.

blang[csharp].
  h5. Task result

  On successfully entering the channel, the method will complete. On failure to enter, an @AblyException@ will be thrown with an "@ErrorInfo@":#error-info object describing the failure reason. The methods needs to be awaited otherwise the exception won't be thrown.

blang[ruby].
  h5. Returns

  A "@Deferrable@":/realtime/types#deferrable object is returned from the method.

  On successfully updating the data, the registered success blocks for the "@Deferrable@":/realtime/types#deferrable and any block provided to the method are executed. On failure to update, the @errback@ callbacks of the "@Deferrable@":/realtime/types#deferrable are called with an "@ErrorInfo@":#error-info argument describing the failure reason.

h6(#get).
  default: get
  csharp: Get

Get the current presence member set for this channel. Typically, this method returns the member set immediately as the member set is retained in memory by the client. However, by default this method will wait until the presence member set is synchronized, so if the synchronization is not yet complete following a channel being attached, this method will wait until the presence member set is synchronized.

When a channel is attached, the Ably service immediately synchronizes the presence member set with the client. Typically this process completes in milliseconds, however when the presence member set is very large, bandwidth constraints may slow this synchronization process down.

When a channel is @initialized@ (i.e. no attempt to attach has yet been made for this channel), then calling @get@ will implicitly attach the channel.

bq(definition).
  default: get(Object options, callback("ErrorInfo":/realtime/types#error-info err, "PresenceMessage[]":#presence-message members))
  ruby:    "Deferrable":/realtime/types#deferrable get(Hash options) -> yields "PresenceMessage[]":#presence-message
  java:    "PresenceMessage[]":#presence-message get("Param":#param[] options)
  swift,objc: get(query: ARTRealtimePresenceQuery, callback: (["ARTPresenceMessage":#presence-message], ARTErrorInfo?) -> Void)
  csharp:  Task<IEnumerable<PresenceMessage>> GetAsync(GetOptions { bool waitForSync = true, string clientId = "", string connectionId = "" })

Gets an array of members present on the channel as "PresenceMessage":#presence-message objects.

blang[jsall,ruby,java,swift,objc].
  h5. Parameters

  - <span lang="default">options</span><span lang="objc,swift">query</span><span lang="java">"Param":#param[] options</span><span lang="ruby">options</span> := <span lang="default">an optional object containing query parameters</span><span lang="ruby">an optional set of symbol key and value pairs containing the query parameters</span><span lang="csharp">an optional set of parameters</span> as specified below.

  - <div lang="jsall">callback</div> := is a function of the form: @function(err, "PresenceMessage[]":#presence-message members)@
  - <div lang="ruby">&block</div> := yields a "@PresenceMessage[]@":#presence-message array
  - <div lang="objc,swift">callback</div> := called with a "@[ARTPresenceMessage]@":#presence-message, or with an error

h5. <span lang="default">@options@ parameters</span><span lang="objc,swift">@ARTRealtimePresenceQuery@ properties</span><span lang="csharp">@GetOptions@ properties</span>

- <span lang="default">clientId</span><span lang="ruby">:client_id</span> := when provided, will filter array of members returned that match the provided <span lang="default">"@clientId@":/realtime/usage#client-id</span><span lang="ruby">"@client_id@":/realtime/usage#client-id</span><span lang="csharp">"@ClientId@":/realtime/usage#client-id</span> string
- <span lang="default">connectionId</span><span lang="ruby">:connection_id</span> := when provided, will filter array of members returned that match the provided <span lang="default">@connectionId@</span><span lang="csharp">@ConnectionId@</span><span lang="ruby">@connection_id@</span>":/realtime/connection/#id string
- <span lang="default">waitForSync</span><span lang="ruby">:wait_for_sync</span> := _true_ A boolean value that by default waits for the initial presence synchronization following channel attachment to complete before returning the members present. When false, the current list of members is returned without waiting for a complete synchronization

blang[jsall,swift,objc].
  h5. Callback result

  On success, @members@ contains an array of "@PresenceMessage@":#presence-message objects corresponding to the current set of present members on the channel.

  On failure to retrieve the current presence member set, @err@ contains an "@ErrorInfo@":#error-info object with the failure reason.

blang[java].
  h5. Returns

  On success, the returned array of "@PresenceMessage@":#presence-message objects corresponds to the current set of present members on the channel.

  Failure to retrieve the current presence member set will raise an "@AblyException@":/realtime/types/#ably-exception

blang[csharp].
  h5. Returns

  On success, the returned enumerable of "#PresenceMessage@":#presence-message objects correspond to the current set of present members on the channel.

  Failure to retrieve the current presence member set will raise an "@AblyException@":/realtime/types/#ably-exception

blang[ruby].
  h5. Returns

  A "@Deferrable@":/realtime/types#deferrable object is returned from the method.

  On success, the registered success blocks for the "@Deferrable@":/realtime/types#deferrable and any block provided to the method yield an array of "@PresenceMessage@":#presence-message objects to the current set of present members on the channel.

  Failure to retrieve the current presence member set will trigger the @errback@ callbacks of the "@Deferrable@":/realtime/types#deferrable with an "@ErrorInfo@":#error-info object with the failure reason.

h6(#history).
  default: history
  csharp: History

bq(definition).
  default: history(Object options, callback("ErrorInfo":/realtime/types#error-info err, "PaginatedResult":#paginated-result<"PresenceMessage":#presence-message> resultPage))
  ruby:    "Deferrable":/realtime/types#deferrable history(Hash options) -> yields "PaginatedResult":#paginated-result<"PresenceMessage":#presence-message>
  java:    "PaginatedResult":#paginated-result<"PresenceMessage":#presence-message> history("Param":#param[] options)
  objc,swift: history(query: ARTRealtimeHistoryQuery?, callback: ("ARTPaginatedResult":#paginated-result<"ARTPresenceMessage":#presence-message>?, ARTErrorInfo?) -> Void) throws
  csharp:  Task<PaginatedResult<PresenceMessage>> HistoryAsync("PaginatedRequestParams":#paginated-request-params query, bool untilAttach = false [deprecated])


Gets a "paginated":#paginated-result set of historical presence message events for this channel. If the "channel is configured to persist messages to disk":https://faqs.ably.com/how-long-are-messages-stored-for, then the presence message event history will "typically be available for 24 - 72 hours":https://faqs.ably.com/how-long-are-messages-stored-for. If not, presence message events are only retained in memory by the Ably service for two minutes.

h5. Parameters

- <span lang="default">options</span><span lang="objc,swift">query</span><span lang="java">"Param":#param[] options</span><span lang="csharp">"PaginatedRequestParams":#paginated-request-params query</span> := <span lang="default">an optional object containing query parameters</span><span lang="ruby">an optional set of key value pairs containing query parameters</span>, as specified in the "presence history API documentation":/realtime/history#presence-history.

- <div lang="jsall">callback</div> := is a function of the form: @function(err, resultPage)@
- <div lang="ruby">&block</div> := yields a @PaginatedResult<Message>@ object
- <div lang="swift,objc">callback</div> := called with a "ARTPaginatedResult":#paginated-result<"ARTPresenceMessage":#presence-message> object or an error

Further details of the supported @options@ params, see "presence history API documentation":/realtime/history#presence-history.

blang[jsall,swift,objc].
  h5. Callback result

  On success, @resultPage@ contains a "@PaginatedResult@":#paginated-result encapsulating an array of "@PresenceMessage@":#presence-message objects corresponding to the current page of results. "@PaginatedResult@":#paginated-result supports pagination using "@next()@":#paginated-result and "@first()@":#paginated-result methods.

  On failure to retrieve message history, @err@ contains an "@ErrorInfo@":#error-info object with the failure reason.

blang[java].
  h5. Returns

  On success, the returned "@PaginatedResult@":#paginated-result encapsulates an array of "@PresenceMessage@":#presence-message objects corresponding to the current page of results. "@PaginatedResult@":#paginated-result supports pagination using "@next@":#paginated-result and "@first@":#paginated-result methods.

  Failure to retrieve the message history will raise an "@AblyException@":/realtime/types/#ably-exception

blang[csharp].
  h5. Returns

  Returns a task that needs to be awaited.

  On success, the returned "@PaginatedResult@":#paginated-result encapsulates an array of "@PresenceMessage@":#presence-message objects corresponding to the current page of results. "@PaginatedResult@":#paginated-result supports pagination using "@NextAsync@":#paginated-result and "@FirstAsync@":#paginated-result methods.

  Failure to retrieve the message history will raise an "@AblyException@":/realtime/types/#ably-exception. Only if the task is awaited.

blang[ruby].
  h5. Returns

  A "@Deferrable@":/realtime/types#deferrable object is returned from the method.

  On success, the registered success blocks for the "@Deferrable@":/realtime/types#deferrable and any block provided to the method yield a "PaginatedResult":#paginated-result that encapsulates an array of "@PresenceMessage@":#presence-message objects corresponding to the current page of results. "@PaginatedResult@":#paginated-result supports pagination using "@next()@":#paginated-result and "@first()@":#paginated-result methods.

  Failure to retrieve the message history will trigger the @errback@ callbacks of the "@Deferrable@":/realtime/types#deferrable with an "@ErrorInfo@":#error-info object with the failure reason.

h6(#subscribe).
  default: subscribe
  csharp: Subscribe

There are overloaded versions of this method:

bq(definition#subscribe-listener).
  default:  subscribe(listener("PresenceMessage":#presence-message))
  java:     void subscribe("PresenceListener":#presence-listener listener)
  ruby:     subscribe → yields "PresenceMessage":#presence-message
  objc,swift: subscribe(callback: ("ARTPresenceMessage":#presence-message) -> Void) -> ARTEventListener
  csharp:   void Subscribe(Action<PresenceMessage> handler)

Subscribe to presence message events on this channel. The caller supplies <span lang="default">a listener function</span><span lang="java">an implementation of the "PresenceListener":#presence-listener interface</span><span lang="ruby">a block</span><span lang="csharp">a handler</span>, which is called each time one or more presence events occurs such as a member entering or leaving a channel.

bq(definition#subscribe-event).
  default: subscribe(String "action":#presence-action, listener("PresenceMessage":#presence-message))
  java:    void subscribe("PresenceMessage.Action":#presence-action action, "PresenceListener":#presence-listener listener)
  ruby:    subscribe("PresenceMessage::ACTION":#presence-action action) → yields "PresenceMessage":#presence-message
  objc,swift: subscribe(action: ARTPresenceAction, callback: ("ARTPresenceMessage":#presence-message) -> Void) -> ARTEventListener
  csharp:  void Subscribe("PresenceAction":#presence-action action, Action<PresenceMessage> handler)

Subscribe to presence message events with a given "@action@":#presence-action on this channel. The caller supplies <span lang="default">a listener function</span><span lang="java">an implementation of the "PresenceListener":#presence-listener interface</span><span lang="ruby">a block</span><span lang="csharp">a handler</span>, which is called each time one or more presence events occurs such as a member entering or leaving a channel.

<div lang="objc,swift,csharp"></div>
<div lang="default">
bq(definition#subscribe-event-array).
  default: subscribe(String[] "actions":#presence-action, listener("PresenceMessage":#presence-message))
  java:    void subscribe("PresenceMessage.Action[]":#presence-action actions, "PresenceListener":#presence-listener listener)
  ruby:    subscribe("PresenceMessage::ACTION":#presence-action *actions) → yields "PresenceMessage":#presence-message

Subscribe a single listener to messages on this channel for multiple @name@ values.
</div>

h5. Parameters

- action := The presence "@action@ event":#presence-action to subscribe to<br>__Type: <span lang="jsall">@String@</span><span lang="java">"@PresenceMessage.Action@":#presence-action</span><span lang="csharp">"@PresenceAction@":#presence-action</span><span lang="ruby">"@PresenceMessage::ACTION@":#presence-action action</span><span lang="objc,swift">@ARTPresenceAction@</span>__

<div lang="objc,swift,csharp"></div>
<div lang="default">
- actions := An <span lang="ruby">argument</span> array of "@action@ events":#presence-action to subscribe to<br>__Type: <span lang="default">@String[]@</span><span lang="ruby">@*argument</span>__
</div>

- <div lang="jsall">listener</div> := is a function of the form @function(message)@ to be called for each matching presence message event
- <div lang="java">listener</div> := Message listener to be notified for matching presence message event<br>__Type: "@PresenceListener":#presence-listener__
- <div lang="ruby">&block</div> := yields matching presence message event when received on the channel
- <div lang="swift,objc">callback</div> := called with each matching "@presence message@":#presence-message when received on the channel
- <div lang="csharp">handler</div> := called with each matching "@presence message@":#presence-message when received on the channel

h5. Considerations

* If the channel is @initialized@ (i.e. no attempt to attach has yet been made for this channel), then calling @subscribe@ will implicitly attach the channel. However, regardless of the implicit attach outcome, the <span lang="default">listener</span><span lang="ruby">block</span><span lang="csharp">handler</span> will still be registered
* If @subscribe@ is called more than once with the same <span lang="default">listener</span><span lang="ruby">block</span><span lang="csharp">handler</span>, then duplicates will be registered. For example, if you @subscribe@ twice with the same <span lang="default">listener</span><span lang="ruby">block</span><span lang="csharp">handler</span> and a presence message is later received, the same <span lang="default">listener</span><span lang="ruby">block</span><span lang="csharp">handler</span> will be invoked twice
* The registered <span lang="default">listener</span><span lang="ruby">block</span><span lang="csharp">handler</span> remains active on the presence channel regardless of the underlying channel state. For example, if you call @subscribe@ when the underlying channel is @attached@ and it later becomes @detached@ or even @failed@, when the channel is reattached and a presence message is received, the <span lang="default">listeners</span><span lang="ruby">blocks</span><span lang="csharp">handlers</span> originally registered will still be invoked. Listeners are only removed when calling "@unsubscribe@":#unsubscribe or when the underlying channel is @released@ using the <span lang="default">@Realtime.channels.release(name)@</span><span lang="csharp">@Realtime.Channels.Release(name)@</span> method
* If an exception is thrown in the subscribe listener and bubbles up to the event emitter, it will be caught and logged at @error@ level, so as not to affect other listeners for the same event

h6(#unsubscribe).
  default: unsubscribe
  csharp: Unsubscribe

There are <span lang="jsall">six</span><span lang="default">three</span> overloaded versions of this method:

bq(definition#unsubscribe-event).
  default: unsubscribe(String action, listener)
  java:    void unsubscribe("PresenceMessage.Action":#presence-action action, "PresenceListener":#presence-listener listener)
  ruby:    unsubscribe("PresenceMessage::ACTION":#presence-action action, &listener_proc)
  objc,swift: unsubscribe(action: ARTPresenceAction, listener: ARTEventListener)
  csharp:  bool Unsubscribe("PresenceAction":#presence-action presenceAction, Action<PresenceMessage> handler)

Unsubscribe the given listener from presence message events on this channel for the given "@action@":#presence-action. This removes an earlier event-specific subscription.

bq(definition#unsubscribe-listener).
  default: unsubscribe(listener)
  java:    void unsubscribe("PresenceListener":#presence-listener listener)
  ruby:    unsubscribe(&listener_proc)
  objc,swift: unsubscribe(listener: ARTEventListener)
  csharp:  bool Unsubscribe(Action<PresenceMessage> handler)

Unsubscribe the given listener from presence message events on this channel. This removes an earlier subscription.

<div lang="jsall">
bq(definition). unsubscribe(String[] actions, listener)

Unsubscribe the given listener from all presence actions in the array.

bq(definition). unsubscribe(String action)

Unsubscribe all listeners for a given "@action@":#presence-action.

bq(definition). unsubscribe(String[] actions)

Unsubscribe all listeners for all presence actions in the array.
</div>

bq(definition#unsubscribe-all).
  default: unsubscribe()
  java:    void unsubscribe()
  objc,swift: unsubscribe()
  csharp:  bool Unsubscribe()

Unsubscribes all listeners to presence message events on this channel. This removes all earlier subscriptions.

h5. Parameters

- action := The presence "@action@ event":#presence-action to unsubscribe from<br>__Type: <span lang="jsall">@String@</span><span lang="java">"@PresenceMessage.Action@":#presence-action</span><span lang="ruby">"@PresenceMessage::ACTION@":#presence-action action</span><span lang="objc,swift">@ARTPresenceAction@</span>__
- <div lang="jsall">actions</div> := An array of actions to unsubscribe from<br>__Type: @String[]@__
- <div lang="jsall">listener</div> := is the callback listener function that was previously subscribed
- <div lang="java">listener</div> := previously registered listener<br>__Type: "@PresenceListener":#presence-listener__
- <div lang="csharp">handler</div> := previously registered handler
- <div lang="ruby">&listener_block</div> := previously registered listener block
- <div lang="swift,objc">listener</div> := previous return value from a @subscribe@ call

h6(#enter-client).
  default: enterClient
  ruby: enter_client
  csharp: EnterClientAsync

Enter this presence channel for the given <span lang="default">@clientId@</span><span lang="ruby">@client_id@</span><span lang="csharp">@ClientId@</span>. This method is provided to support typically server instances that act on behalf of multiple client IDs. See "Managing multiple client IDs":#presence-multiple-client-id for more info. In order to be able to publish presence changes for arbitrary client IDs, the client library must have been instantiated either with an "API key":https://faqs.ably.com/what-is-an-app-api-key, or with a "token bound to a wildcard client ID":https://faqs.ably.com/can-a-client-emulate-any-client-id-i.e.-authenticate-using-a-wildcard-client-id.

There are two overloaded versions of this method.
<span lang="csharp"></span><span lang="default">
  With both versions, a <span lang="default">callback</span><span lang="ruby">block</span><span lang="java">completion listener</span> can optionally be passed in to be notified of success or failure to enter.
</span>

bq(definition#enter-client-none).
  default:  enterClient(String clientId, callback("ErrorInfo":/realtime/types#error-info err))
  ruby:     "Deferrable":/realtime/types#deferrable enter_client(String client_id) -> yields
  java:     void enterClient(String clientId, "CompletionListener":#completion-listener listener)
  objc,swift: enterClient(clientId: String, data: nil, callback: ((ARTErrorInfo?) -> Void)?)
  csharp:   Task EnterClientAsync(string clientId, object clientData)

Enter a presence channel on behalf of the provided <span lang="default">@clientId@</span><span lang="ruby">@client_id@</span><span lang="csharp">@ClientId@</span> without any data. If the channel is @initialized@ (i.e. no attempt to attach has yet been made for this channel), then calling @enter@ will implicitly attach the channel.

bq(definition#enter-client-data).
  default: enterClient(String clientId, Object data, callback("ErrorInfo":/realtime/types#error-info err))
  ruby:    "Deferrable":/realtime/types#deferrable enter_client(String client_id, Object data) -> yields
  java:    void enterClient(String clientId, Object data, "CompletionListener":#completion-listener listener)
  objc,swift: enterClient(clientId: String, data: AnyObject?, callback: ((ARTErrorInfo?) -> Void)?)
  csharp:  Task EnterClientAsync(string clientId, object clientData)

Enter a presence channel and provide data that is associated with the current present member. If the channel is @initialized@ (i.e. no attempt to attach has yet been made for this channel), then calling @enter@ will implicitly attach the channel.

h5. Parameters

- <div lang="jsall">data</div> := data payload for the member. The supported payload types are Strings, JSON objects and arrays, buffers containing arbitrary binary data, and null.<br>__Type: @Object@__
- <div lang="java">data</div> := data payload for the member. The supported payload types are Strings, JsonObject, binary data as byte arrays, and null.<br>__Type: @Object@__
- <div lang="csharp">data</div> := data payload for the member. The supported payload types are strings, plain object convertible to json, binary data as byte arrays, and null.<br>__Type: @Object@__
- <div lang="ruby">data</div> := data payload for the member. The supported payload types are Strings, Hash or Array objects that can be serialized to JSON using @to_json@, binary data as @ASCII-8BIT@ byte arrays, and null.<br>__Type: @Object@__
- <div lang="objc,swift">data</div> := data payload for the message. The supported payload types are <span lang="objc">@NS@</span>@String@, <span lang="objc">@NS@</span>@Dictionary@ or <span lang="objc">@NS@</span>@Array@ objects that can be serialized to JSON, binary data as @NSData@, and @nil@.<br>__Type: @Object@__

- <div lang="jsall">callback</div> := is a function of the form @function(err)@ which is called upon completion
- <div lang="java">listener</div> := Listener to be notified on completion<br>__Type: "@CompletionListener@":#completion-listener__
- <div lang="ruby">&block</div> := yields upon successfully entering the channel
- <div lang="objc,swift">callback</div> := called upon successfully entering the channel, or with an error

blang[jsall,swift,objc].
  h5. Callback result

  On successfully entering the channel, @err@ is null. On failure to enter, @err@ contains an "@ErrorInfo@":#error-info object describing the failure reason.

blang[java].
  h5. Listener result

  On successfully entering the channel, the @onSuccess@ method of the "CompletionListener":#completion-listener is called. On failure to enter, the @onError@ method is called with an "@ErrorInfo@":#error-info argument describing the failure reason.

blang[csharp].
  h5. Returns

  The method returns a @Task@ that will need to be awaited. On success the method will complete and will not throw an exception. On failure to enter the method will throw an @AblyException@ with an "@ErrorInfo@":#error-info argument describing the failure reason.

blang[ruby].
  h5. Returns

  A "@Deferrable@":/realtime/types#deferrable object is returned from the method.

  On successfully entering the channel, the registered success blocks for the "@Deferrable@":/realtime/types#deferrable and any block provided to the method are executed. On failure to enter, the @errback@ callbacks of the "@Deferrable@":/realtime/types#deferrable are called with an "@ErrorInfo@":#error-info argument describing the failure reason.

h6(#leave-client).
  default: leaveClient
  ruby: leave_client
  csharp: LeaveClientAsync

Leave this presence channel for the given <span lang="default">@clientId@</span><span lang="ruby">@client_id@</span><span lang="csharp">@ClientId@</span>. This method is provided to support typically server instances that act on behalf of multiple client IDs. See "Managing multiple client IDs":#presence-multiple-client-id for more info. In order to leave the presence set of a channel, the client must have already "entered and been present":#enter-client.

There are two overloaded versions of this method.
<span lang="csharp"></span><span lang="default">
  With both versions, a <span lang="default">callback</span><span lang="ruby">block</span><span lang="java">completion listener</span><span lang="csharp">handler</span> can optionally be passed in to be notified of success or failure to leave.
</span>

bq(definition#leave-client-none).
  default:  leaveClient(String clientId, callback("ErrorInfo":/realtime/types#error-info err))
  ruby:     "Deferrable":/realtime/types#deferrable leave_client(String client_id) -> yields
  java:     void leaveClient(String clientId, "CompletionListener":#completion-listener listener)
  swift,objc: leaveClient(clientId: String, data: nil, callback: ((ARTErrorInfo?) -> Void)?)
  csharp:   Task LeaveClientAsync(string clientId, object data)

Leave a presence channel on behalf of the provided <span lang="default">@clientId@</span><span lang="ruby">@client_id@</span><span lang="csharp">@ClientId@</span> without emitting any data.

bq(definition#leave-client-data).
  default: leaveClient(String clientId, Object data, callback("ErrorInfo":/realtime/types#error-info err))
  ruby:    "Deferrable":/realtime/types#deferrable leave_client(String client_id, Object data) -> yields
  java:    void leaveClient(String clientId, Object data, "CompletionListener":#completion-listener listener)
  swift,objc: leave(clientId: String, data: AnyObject?, callback: ((ARTErrorInfo?) -> Void)?)
  csharp:  Task LeaveClientAsync(string clientId)

Leave a presence channel on behalf of the provided <span lang="default">@clientId@</span><span lang="ruby">@client_id@</span><span lang="csharp">@ClientId@</span> and emit data that is associated with the current leaving member.

h5. Parameters

- <div lang="jsall">data</div> := data payload for the member. The supported payload types are Strings, JSON objects and arrays, buffers containing arbitrary binary data, and null.<br>__Type: @Object@__
- <div lang="java">data</div> := data payload for the member. The supported payload types are Strings, JsonObject, binary data as byte arrays, and null.<br>__Type: @Object@__
- <div lang="csharp">data</div> := data payload for the member. The supported payload types are strings, plain object convertible to json, binary data as byte arrays, and null.<br>__Type: @Object@__
- <div lang="ruby">data</div> := data payload for the member. The supported payload types are Strings, Hash or Array objects that can be serialized to JSON using @to_json@, binary data as @ASCII-8BIT@ byte arrays, and null.<br>__Type: @Object@__
- <div lang="objc,swift">data</div> := data payload for the message. The supported payload types are <span lang="objc">@NS@</span>@String@, <span lang="objc">@NS@</span>@Dictionary@ or <span lang="objc">@NS@</span>@Array@ objects that can be serialized to JSON, binary data as @NSData@, and @nil@.<br>__Type: @Object@__

- <div lang="jsall">callback</div> := is a function of the form @function(err)@ which is called upon completion
- <div lang="java">listener</div> := Listener to be notified on completion<br>__Type: "@CompletionListener@":#completion-listener__
- <div lang="ruby">&block</div> := yields upon successfully entering the channel
- <div lang="objc,swift">callback</div> := called upon successfully entering the channel, or with an error

blang[jsall,swift,objc].
  h5. Callback result

  On successfully leaving the channel, @err@ is null. On failure to leave, @err@ contains an "@ErrorInfo@":#error-info object describing the failure reason.

blang[java].
  h5. Listener result

  On successfully leaving the channel, the @onSuccess@ method of the "CompletionListener":#completion-listener is called. On failure to leave, the @onError@ method is called with an "@ErrorInfo@":#error-info argument describing the failure reason.

blang[csharp].
  h5. Returns

  The method returns a @Task@ that will need to be awaited. On success the method will complete and will not throw an exception. On failure to leave the method will throw an @AblyException@ with an "@ErrorInfo@":#error-info argument describing the failure reason.

blang[ruby].
  h5. Returns

  A "@Deferrable@":/realtime/types#deferrable object is returned from the method.

  On successfully leaving the channel, the registered success blocks for the "@Deferrable@":/realtime/types#deferrable and any block provided to the method are executed. On failure to leave, the @errback@ callbacks of the "@Deferrable@":/realtime/types#deferrable are called with an "@ErrorInfo@":#error-info argument describing the failure reason.

h6(#update-client).
  default: updateClient
  ruby: update_client
  csharp: UpdateClientAsync

Clients can update the member data on behalf of the given <span lang="default">@clientId@</span><span lang="ruby">@client_id@</span><span lang="csharp">@ClientId@</span> which will trigger a broadcast of this update to all presence subscribers. This method is provided to support typically server instances that act on behalf of multiple client IDs. See "Managing multiple client IDs":#presence-multiple-client-id for more info. If an attempt to update is made before the member has entered the channel, the update is treated as an enter.

<span lang="csharp"></span><span lang="default">
  A <span lang="default">callback</span><span lang="ruby">block</span><span lang="java">completion listener</span> can optionally be passed in to be notified of success or failure to update the member data.
</span>

bq(definition#update-client-data).
  default: updateClient(String clientId, Object data, callback("ErrorInfo":/realtime/types#error-info err))
  ruby:    "Deferrable":/realtime/types#deferrable update_client(String client_id, Object data) -> yields
  java:    void updateClient(String clientId, Object data, "CompletionListener":#completion-listener listener)
  swift,objc: update(clientId: String, data: AnyObject?, callback: ((ARTErrorInfo?) -> Void)?)
  csharp:  Task UpdateClientAsync(string clientId, object data)

Update the member data on behalf of the provided <span lang="default">@clientId@</span><span lang="ruby">@client_id@</span><span lang="csharp">@ClientId@</span> and broadcast an update event to all subscribers. @data@ may be @null@. If the channel is @initialized@ (i.e. no attempt to attach has yet been made for this channel), then calling @enter@ will implicitly attach the channel.

h5. Parameters

- <div lang="jsall">data</div> := data payload for the member. The supported payload types are Strings, JSON objects and arrays, buffers containing arbitrary binary data, and null.<br>__Type: @Object@__
- <div lang="java">data</div> := data payload for the member. The supported payload types are Strings, JsonObject, binary data as byte arrays, and null.<br>__Type: @Object@__
- <div lang="csharp">data</div> := data payload for the member. The supported payload types are strings, plain object convertible to json, binary data as byte arrays, and null.<br>__Type: @Object@__
- <div lang="ruby">data</div> := data payload for the member. The supported payload types are Strings, Hash or Array objects that can be serialized to JSON using @to_json@, binary data as @ASCII-8BIT@ byte arrays, and null.<br>__Type: @Object@__
- <div lang="objc,swift">data</div> := data payload for the message. The supported payload types are <span lang="objc">@NS@</span>@String@, <span lang="objc">@NS@</span>@Dictionary@ or <span lang="objc">@NS@</span>@Array@ objects that can be serialized to JSON, binary data as @NSData@, and @nil@.<br>__Type: @Object@__

- <div lang="jsall">callback</div> := is a function of the form @function(err)@ which is called upon completion
- <div lang="java">listener</div> := Listener to be notified on completion<br>__Type: "@CompletionListener@":#completion-listener__
- <div lang="ruby">&block</div> := yields upon successfully entering the channel
- <div lang="objc,swift">callback</div> := called upon successfully entering the channel, or with an error

blang[jsall,objc,swift].
  h5. Callback result

  On successfully updating the data, @err@ is null. On failure to update, @err@ contains an "@ErrorInfo@":#error-info object describing the failure reason.

blang[java].
  h5. Listener result

  On successfully updating the data, the @onSuccess@ method of the "CompletionListener":#completion-listener is called. On failure to update, the @onError@ method is called with an "@ErrorInfo@":#error-info argument describing the failure reason.

blang[csharp].
  h5. Returns

  The method returns a Task that will need to be awaited. On success the method will complete and will not throw an exception. On failure to update the method will throw an @AblyException@ with an "@ErrorInfo@":#error-info argument describing the failure reason.

blang[ruby].
  h5. Returns

  A "@Deferrable@":/realtime/types#deferrable object is returned from the method.

  On successfully updating the data, the registered success blocks for the "@Deferrable@":/realtime/types#deferrable and any block provided to the method are executed. On failure to update, the @errback@ callbacks of the "@Deferrable@":/realtime/types#deferrable are called with an "@ErrorInfo@":#error-info argument describing the failure reason.

h3(#related-types). Related types

h4(#presence-message).
  default: PresenceMessage
  swift,objc: ARTPresenceMessage
  ruby:    Ably::Models::PresenceMessage
  java:    io.ably.lib.types.PresenceMessage
  csharp:  IO.Ably.PresenceMessage

<%= partial partial_version('types/_presence_message') %>

h4(#presence-action).
  default: Presence action
  swift,objc: ARTPresenceAction
  java:    io.ably.lib.types.PresenceMessage.Action
  ruby:    Ably::Models::PresenceMessage::ACTION
  csharp:  IO.Ably.PresenceAction

<%= partial partial_version('types/_presence_action') %>

h4(#paginated-request-params).
  csharp: PaginatedRequestParams

blang[csharp].
  <%= partial partial_version('types/_history_request_params'), indent: 2, skip_first_indent: true %>

h4(#completion-listener).
  java:   io.ably.lib.realtime.CompletionListener

blang[java].
  <%= partial partial_version('types/_completion_listener'), indent: 2, skip_first_indent: true %>

h4(#paginated-result).
  default: PaginatedResult
  swift,objc: ARTPaginatedResult
  ruby:    Ably::Models::PaginatedResult
  java:    io.ably.lib.types.PaginatedResult
  csharp:  IO.Ably.PaginatedResult

<%= partial partial_version('types/_paginated_result') %>

h4(#param).
  java:    io.ably.lib.types.Param

blang[java].
  <%= partial partial_version('types/_param'), indent: 2, skip_first_indent: true %>

h4(#presence-listener).
  java:   io.ably.lib.realtime.PresenceListener

blang[java].
  <%= partial partial_version('types/_presence_listener'), indent: 2, skip_first_indent: true %>

h2(#push-api). Push API Reference

inline-toc.
  Push Admin:
    - Methods:
      - publish#publish
    - Properties:
      - deviceRegistrations#device-registrations
      - channelSubscriptions#channel-subscriptions
    - DeviceRegistrations:
      - get#device-get-id
      - list(params)#device-list
      - save(DeviceDetails)#device-save
      - remove#device-remove-id
      - removeWhere(params)#device-remove-where
    - PushChannelSubscriptions:
      - list(params)#push-channel-sub-list
      - listChannels(params)#push-channel-sub-list-channels
      - save(PushChannelSubscription)#push-channel-sub-save
      - remove(PushChannelSubscription)#push-channel-sub-remove
      - removeWhere(params)#push-channel-sub-remove-where
  Push Device:
    - Methods:
      - activate()#activate
      - deactivate()#deactivate
  Related types:
    - DeviceDetails#device-details
    - PushChannelSubscription#push-channel-subscription
    - LocalDevice#local-device
    - PushChannel#push-channel
    - PaginatedResult#paginated-result

<%= partial partial_version('types/_push_admin') %>

<div lang="android,swift,objc">

<%= partial partial_version('types/_push_device') %>

</div>

h3(#related-types). Related types

h4(#device-details).
  default:      DeviceDetails
  ruby:         Ably::Models::DeviceDetails
  swift,objc:   ARTDeviceDetails

<%= partial partial_version('types/_device_details') %>

h4(#push-channel-subscription).
  default:      PushChannelSubscription
  ruby:         Ably::Models::PushChannelSubscription
  java,android: ChannelSubscription
  swift,objc:   ArtPushChannelSubscription

<%= partial partial_version('types/_push_channel_subscription') %>

h4(#local-device).
  default: LocalDevice
  ruby:    Ably::Models::LocalDevice

<%= partial partial_version('types/_local_device') %>

h4(#push-channel).
    default: PushChannel
    ruby:    Ably::Models::PushChannel

<%= partial partial_version('types/_push_channel') %>

h4(#paginated-result).
  default:      PaginatedResult
  swift,objc:   ARTPaginatedResult
  ruby:         Ably::Models::PaginatedResult
  java,android: io.ably.lib.types.PaginatedResult
  csharp:       IO.Ably.PaginatedResult

<%= partial partial_version('types/_paginated_result') %>

h2(#statistics-api). Statistics API Reference

h6(#stats). stats

bq(definition).
  jsall:   stats(Object options, callback("ErrorInfo":/realtime/types#error-info err, "PaginatedResult":/realtime/types#paginated-result<"Stats":/realtime/types#stats> results))
  ruby:    "Deferrable":/realtime/types#deferrable stats(Hash options) -> yields "PaginatedResult":/realtime/types#paginated-result<"Stats":/realtime/types#stats>
  java:    "PaginatedResult":/realtime/types#paginated-result<"Stats":/realtime/types#stats-type> stats("Param":#param[] options)
  swift,objc: stats(query: ARTStatsQuery?, callback: ("ARTPaginatedResult":/realtime/types#paginated-result<"ARTStats":/realtime/types#stats>?, ARTErrorInfo?) -> Void) throws
  csharp:  Task<"PaginatedResult":/realtime/types#paginated-result<"Stats":/realtime/types#status>> StatsAsync("StatsRequestParams":#statsdatarequest query)

This call queries the "REST @/stats@ API":/rest-api#stats-type and retrieves your application's usage statistics. A "PaginatedResult":/realtime/types#paginated-result is returned, containing an array of "Stats":/realtime/types#stats-type for the first page of results. "PaginatedResult":/realtime/types#paginated-result objects are iterable providing a means to page through historical statistics. "See an example set of raw stats returned via the REST API":/general/statistics.

<%= partial partial_version('realtime/_stats') %>

h3(#related-types). Related types

h4(#stats-type).
  default: Stats object
  objc,swift: ARTStats
  java:    io.ably.lib.types.Stats
  ruby:    Ably::Models::Stats
  csharp:  IO.Ably.Stats

<%= partial partial_version('types/_stats') %>

h4(#stats-request-params).
  csharp: IO.Ably.StatsRequestParams

blang[csharp].
  <%= partial partial_version('types/_history_request_params'), indent: 2, skip_first_indent: true %>

h4(#stats-granularity).
  objc,swift: ARTStatsGranularity
  csharp: StatsIntervalGranularity

<%= partial partial_version('types/_stats_granularity') %>

h4(#param).
  java:    io.ably.lib.types.Param

blang[java].
  <%= partial partial_version('types/_param'), indent: 2, skip_first_indent: true %>

h2(#see-also). See also

* "Client Library SDK - Realtime interface overview":/realtime
* "Client Library SDK - REST interface overview":/rest
