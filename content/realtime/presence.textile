---
title: Presence
section: realtime
index: 40
jump_to:
  Help with:
    - Getting started#getting-started
    - Presence
    - Presence states and events#presence-states
    - Presence data
    - Presence member list
    - Presence history
    - Multiple client IDs#presence-multiple-client-id
  Presence API properties:
    - syncComplete#sync-complete
  Presence API methods:
    - enter
    - leave
    - update
    - get
    - history
    - subscribe
    - unsubscribe
    - enterClient#enter-client
    - updateClient#update-client
    - leaveClient#leave-client
  Related types:
    - PresenceMessage#presence-message
    - CompletionListener#completion-listener
    - PaginatedResult#paginated-result
    - PresenceListener#presence-listener
---

Presence enables clients to be aware of other clients that are currently "present" on a channel. Each member present on a channel has a unique self-assigned client identifier and system-assigned connection identifier, along with an optional payload that can be used to describe the member's status or attributes. Presence allows you to quickly build apps such as chat rooms and multiplayer games by automatically keeping track of who is present in real time across any device.

h2(#getting-started). Getting started

The @Presence@ object provides a straightforward API to subscribe to presence events such as members entering or leaving, retrieve a list of members present, or register the connected client as "present" on a channel. Here is a simple presence example using the "@presence@":/realtime/channels-messages#presence <span lang="default">property</span><span lang="java">field</span><span lang="ruby">attribute</span> of the "@Channel@":/realtime/channels-messages object to enter a channel and subscribe to presence events.

```[javascript](code-editor:realtime/presence-simple)
  var realtime = new Ably.Realtime({
    key: '{{API_KEY}}',
    clientId: 'bob' }
  );
  var channel = realtime.channels.get('{{RANDOM_CHANNEL_NAME}}');
  channel.presence.subscribe('enter', function(member) {
    alert('Member ' + member.clientId + ' entered');
  });
  channel.presence.enter();
```

```[nodejs](code-editor:realtime/presence-simple)
  var Ably = require('ably-js');
  var realtime = new Ably.Realtime({
    key: '{{API_KEY}}',
    clientId: 'bob' }
  );
  var channel = realtime.channels.get('{{RANDOM_CHANNEL_NAME}}');
  channel.presence.subscribe('enter', function(member) {
    alert('Member ' + member.clientId + ' entered');
  });
  channel.presence.enter();
```

```[ruby]
  realtime = Ably::Realtime.new(key: '{{API_KEY}}', client_id: 'bob')
  channel = realtime.channels.get('{{RANDOM_CHANNEL_NAME}}')
  channel.presence.subscribe(:enter) do |member|
    puts "Member #{member.client_id} entered"
  end
  channel.presence.enter
```

```[java]
  ClientOptions options = new ClientOptions("{{API_KEY}}");
  options.clientId = "bob";
  AblyRealtime realtime = new AblyRealtime(options);
  Channel channel = realtime.channels.get("{{RANDOM_CHANNEL_NAME}}");
  channel.presence.subscribe(new PresenceListener() {
    @Override
    public void onPresenceMessage(PresenceMessage[] messages) {
      PresenceMessage member = messages[0]; // use only first for this example
      System.out.println("Member " + member.clientId + " : " + member.action.toString());
    }
  });
  channel.presence.enter(null, new CompletionListener());
```

h2(#presence). Presence

In order to be present on a channel, a client must "be identified by having a client ID":https://support.ably.io/solution/articles/3000038608-authenticated-and-identified-clients, "have permission to be present":https://support.ably.io/solution/articles/3000048535-using-capabilities-to-manage-client-access-privileges-on-channels, and be attached to the channel. For simplicity, the library will implicitly attach to a channel when entering or subscribing to presence events. Clients are assigned a <span lang="default">"@clientId@":/realtime/usage#client-id</span><span lang="ruby">"@client_id@":/realtime/usage#client-id</span> when using token authentication, "find out more about token authentication":/general/authentication#token-authentication.

A single <span lang="default">"@clientId@":/realtime/usage#client-id</span><span lang="ruby">"@client_id@":/realtime/usage#client-id</span> may be present multiple times on the same channel via different client connections. As far as Ably is concerned, these are different members of the presence set for the channel, however they will be differentiated by their unique <span lang="default">"@connectionId@":/realtime/connection#id</span><span lang="ruby">"@connection_id@":/realtime/connection/#id</span>. For example, if a client with ID "Sarah" is connected to a chat channel on both a desktop and a mobile device simultaneously, "Sarah" will be present twice in the member set with the same client ID, yet will have two unique connection IDs. A member of the presence set is therefore unique by the combination of the <span lang="default">"@clientId@":/realtime/usage#client-id</span><span lang="ruby">"@client_id@":/realtime/usage#client-id</span> and <span lang="default">"@connectionId@":/realtime/connection#id</span><span lang="ruby">"@connection_id@":/realtime/connection/#id</span> strings.

h3(#presence-states). Presence states and events

Whenever a member enters or leaves a channel, or updates "their member data":#member-data, a presence event is emitted to all presence subscribers on that channel. Subscribing to presence events makes it incredibly easy to build an app that shows, in real time, any changes to clients connected to Ably and present on a channel.

The following presence events are emitted:

- <span lang="ruby">@:enter@</span><span lang="java">@Action.ENTER@</span><span lang="default">@enter@</span> := A new member has entered the channel

- <span lang="ruby">@:leave@</span><span lang="java">@Action.LEAVE@</span><span lang="default">@leave@</span> := A member who was present has now left the channel. This may be a result of an explicit request to leave or implicitly when detaching from the channel. Alternatively, if a member's connection is abruptly disconnected and they do not resume their connection within a minute, Ably treats this as a leave event as the client is no longer present

- <span lang="ruby">@:update@</span><span lang="java">@Action.UPDATE@</span><span lang="default">@update@</span> := An already present member has updated their "member data":#member-data. Being notified of member data updates can be very useful, for example, it can be used to update the status of a user when they are typing a message

- <span lang="ruby">@:present@</span><span lang="java">@Action.PRESENT@</span><span lang="default">@present@</span> := When subscribing to presence events on a channel that already has members present, this event is emitted for every member already present on the channel before the subscribe listener was registered

"View a presence states and events example":<%= JsBins.url_for('realtime/presence-events') %>

h3(#member-data). Member data

In addition to the <span lang="default">"@clientId@":/realtime/usage#client-id</span><span lang="ruby">"@client_id@":/realtime/usage#client-id</span> for members on a channel, it is also possible to include data when entering a channel. Clients can "update":#update their data at any point which will be broadcasted to all presence subscribers as an <span lang="ruby">@:update@</span><span lang="java">@Action.UPDATE@</span><span lang="default">@update@</span> event.

```[jsall]
/* Subscribe to presence enter events */
channel.presence.on('enter', function(member) {
  console.log(member.data); // => not moving
});

/* Subscribe to presence update events */
channel.presence.on('update', function(member) {
  console.log(member.data); // => travelling North
});

/* Enter this client with data and update once entered */
channel.presence.enter('not moving', function(err) {
  channel.presence.update('travelling North');
});
```

```[java]
/* Subscribe to presence enter and update events */
channel.presence.subscribe(new PresenceListener() {
  @Override
  public void onPresenceMessage(PresenceMessage[] messages) {
    PresenceMessage member = messages[0]; // use only first for this example
    switch (member.action) {
      case ENTER: {
        System.out.println(member.data); // => not moving
        break;
      }
      case UPDATE: {
        System.out.println(member.data); // => travelling North
        break;
      }
    }
  }
});

/* Enter this client with data and update once entered */
channel.presence.enter("not moving", new CompletionListener() {
  @Override
  public void onSuccess() {
    channel.presence.update("travelling North", new CompletionListener());
  }
});
```

```[ruby]
# Subscribe to presence enter events
channel.presence.subscribe(:enter) do |member|
  puts member.data # => not moving
end

# Subscribe to presence update events
channel.presence.subscribe(:update) do |member|
  puts member.data # => travelling North
end

# Enter this client with data and update once entered
channel.presence.enter(data: 'not moving') do
  channel.presence.update(data: 'travelling North')
end
```

h3(#member-list). Presence member list

The @Presence@ object exposes a "@get@":#get method allowing a client to retrieve an array of all members present on the channel. The Ably client is responsible for keeping track of the presence set from the time that the channel is attached; an up to date presence set is pushed to the client following attach and the presence set is updated on each subsequent presence event. Thus @get@ returns the already-known presence set retained in memory and does not trigger a new request to the Ably service.

```[jsall]
channel.presence.get(function(err, members) {
  console.log('There are ' + members.length + ' members on this channel');
  console.log('The first member has client ID: ' + members[0].clientId);
});
```

```[ruby]
channel.presence.get do |members|
  puts "There are #{members.size} members on this channel"
  puts "The first member has client ID: #{members.first.client_id}"
end
```

```[java]
PresenceMessage[] members = channel.presence.get();
System.out.println("There are " + members.length + " members on this channel");
System.out.println("The first member has client ID: " + members[0].clientId);
```

h3(#presence-history). Presence History

The @Presence@ object exposes a "@history@":#history method allowing a client to retrieve historical presence events on the channel. Presence history can be used to return continuous presence event history up to the exact point a realtime channel was attached.

History provides access to instantaneous "live" history as well as the longer term persisted history for presence channels. If "persisted history":/realtime/history#persisted-history is enabled for the channel, then presence events will "typically be stored for 24 - 72 hours":https://support.ably.io/solution/articles/3000030059-how-long-are-messages-stored-for. If persisted history is not enabled, Ably retains the last two minutes of presence event history in memory.

The following example retrieves the first two pages of historical presence events published up until the point the channel was attached.

bc[jsall]. channel.attach(function() {
  var presence = channel.presence;
  presence.history({ untilAttach: true }, function(err, resultPage) {
    if(err) {
      console.log('Unable to get presence history; err = ' + err.message);
    } else {
      console.log(resultPage.items.length + ' presence events received in first page');
      if(resultPage.hasNext()) {
        resultPage.next(function(err, nextPage) { ... });
      }
  });
});

bc[ruby]. channel.attach do
  presence = channel.presence
  presence.history(until_attach: true) do |result_page|
    puts "#{result_page.items.length} presence events received in first page"
    if result_page.has_next?
      result_page.next { |next_page| ... }
    end
  end
end

```[java]
PaginatedResult<PresenceMessage> resultPage = channel.presence.history(null);
System.out.println(resultPage.items().length + " presence events received in first page");
if(resultPage.hasNext()) {
  PaginatedResult<PresenceMessage> nextPage = resultPage.next();
  System.out.println(nextPage.items().length + " presence events received in 2nd page");
}
```

See the "history":/realtime/history documentation for further details of the supported query parameters.

h3(#presence-multiple-client-id). Managing multiple client IDs

p(tip). Each unique <span lang="default">"@clientId@":/realtime/usage#client-id</span><span lang="ruby">"@client_id@":/realtime/usage#client-id</span> may only be present once when entering on behalf of another client as the unique identifier for each member in a presence set is the combined <span lang="default">"@clientId@":/realtime/usage#client-id</span><span lang="ruby">"@client_id@":/realtime/usage#client-id</span> and shared <span lang="default">"@connectionId@":/realtime/connection#id</span><span lang="ruby">"@connection_id@":/realtime/connection/#id</span>

An Ably client instance might, if on an application server for example, publish messages and be present on channels on behalf of multiple distinct "client IDs":/realtime/usage#client-id. The channel's @Presence@ object therefore also supports methods that enable presence messages to be emitted for a <span lang="default">"@clientId@":/realtime/usage#client-id</span><span lang="ruby">"@client_id@":/realtime/usage#client-id</span> specified at the time of the call, rather than implicitly based on the <span lang="default">"@clientId@":/realtime/usage#client-id</span><span lang="ruby">"@client_id@":/realtime/usage#client-id</span> "specified when the library is instanced or authenticated":/realtime/usage#client-id.

In order to be able to publish presence changes for arbitrary client IDs, the client library must have been instanced either with an "API key":https://support.ably.io/solution/articles/3000030054-what-is-an-app-api-key, or with a "token bound to a wildcard client ID":https://support.ably.io/solution/articles/3000048586-can-a-client-emulate-any-client-id-i-e-use-a-wildcard-client-id.

```[jsall](code-editor:realtime/presence-multiple-client-id)
var rest = new Ably.Rest({ key: '{{API_KEY}}' });
/* request a wildcard token */
rest.auth.requestToken({ clientId: '*' }, function(err, token) {
  var realtime = new Ably.Realtime({ token: token });
  var channel = realtime.channels.get('realtime-chat');

  channel.presence.subscribe('enter', function(member) {
    console.log(member.client_id + 'entered realtime-chat');
  });

  channel.presence.enterClient('Bob'); // => Bob entered realtime-chat
  channel.presence.enterClient('Mary'); // => Mary entered realtime-chat
});
```

```[ruby]
rest = Ably::Rest.new(key: '{{API_KEY}}')
# request a wildcard token
rest.auth.requestToken(clientId: '*') do |token|
  realtime = Ably::Realtime.new(token: token)
  channel = realtime.channels.get('realtime-chat')

  channel.presence.subscribe(:enter) do |member|
    puts "#{member.client_id} entered realtime-chat"
  end

  channel.presence.enter_client 'Bob' # => Bob entered realtime-chat
  channel.presence.enter_client 'Mary' # => Mary entered realtime-chat
end
```

```[java]
/* request a wildcard token */
AblyRest rest = new AblyRest('{{API_KEY}}');
TokenParams params = new TokenParams();
params.clientId = "*";
ClientOptions options = new ClientOptions();
options.tokenDetails = rest.auth.requestToken(null, params);

AblyRealtime realtime = new AblyRealtime(options);
Channel channel = realtime.channels.get("realtime-chat");

channel.presence.subscribe(new PresenceListener() {
  @Override
  public void onPresenceMessage(PresenceMessage[] messages) {
    PresenceMessage member = messages[0]; /* use only first for this example */
    System.out.println(member.clientId + " entered realtime-chat");
  }
});

CompletionListener noop = new CompletionListener();
channel.presence.enterClient("Bob", noop); /* => Bob entered realtime-chat */
channel.presence.enterClient('Mary', noop); /* => Mary entered realtime-chat */
```

h1. API Reference

inline-toc.
  Presence reference:
    - Methods:
      - enter
      - leave
      - update
      - get
      - history
      - subscribe
      - unsubscribe
      - enterClient#enter-client
      - updateClient#update-client
      - leaveClient#leave-client
    - Properties:
      - syncComplete#sync-complete
    - Related types:
      - PresenceMessage#presence-message
      - CompletionListener#completion-listener
      - PaginatedResult#paginated-result
      - PresenceListener#presence-listener

h2(#properties).
  default: Presence Properties
  ruby: Ably::Realtime::Presence Attributes
  java: io.ably.lib.realtime.Presence Members

The @Presence@ object exposes the following public <span lang="default">properties</span><span lang="ruby">attributes</span><span lang="java">members</span>:

h6(#sync-complete).
  default: syncComplete
  ruby: sync_complete?

A @boolean@ field indicating whether the member set is synchronised with server after a channel attach.
When a channel is attached, the Ably service automatically synchronises the member set with the client. Typically this process completes almost immediately, however when the member set is very large, bandwidth restrictions may slow this synchronisation process down.

h2. Methods

h6(#enter). enter

In order to enter and be present on a channel, the client must "be identified by having a client ID":https://support.ably.io/solution/articles/3000038608-authenticated-and-identified-clients, "have permission to be present":https://support.ably.io/solution/articles/3000048535-using-capabilities-to-manage-client-access-privileges-on-channels, and be attached to the channel. For simplicity, the library will implicitly attach to a channel when entering. Entering when already entered is treated as an "update":#update.

There are two overloaded versions of this method. With both versions, a <span lang="default">callback</span><span lang="ruby">block</span><span lang="java">completion listener</span> can optionally be passed in to be notified of success or failure to enter.

bq(definition#enter-none).
  default:  enter(callback("ErrorInfo":/realtime/types#error-info err))
  ruby:     "Deferrable":/realtime/types#deferrable enter() -> yields
  java:     public void enter("CompletionListener":#completion-listener listener)

Enter a presence channel without any data.

bq(definition#enter-data).
  default: enter(Object data, callback("ErrorInfo":/realtime/types#error-info err))
  ruby:    "Deferrable":/realtime/types#deferrable enter(Object data) -> yields
  java:    public void enter(Object data, "CompletionListener":#completion-listener listener)

Enter a presence channel and provide data that is associated with the current present member.

h4. Parameters

- <div lang="jsall">Object data</div> := data payload for the current present member. The supported payload types are Strings, JSON objects and arrays, buffers containing arbitrary binary data, and null.
- <div lang="java">Object data</div> := data payload for the current present member. The supported payload types are Strings, JsonObject, binary data as byte arrays, and null.
- <div lang="ruby">Object data</div> := data payload for the current present member. The supported payload types are Strings, Hash or Array objects that can be serialised to JSON using @to_json@, binary data as @ASCII-8BIT@ byte arrays, and null.

- <div lang="jsall">callback</div> := is a function of the form @callback(err)@ which is called upon completion
- <div lang="java">"CompletionListener":#completion-listener listener</div> := Listener to be notified on completion
- <div lang="ruby">&block</div> := yields upon successfully entering the channel

blang[jsall].
  h4. Callback result

  On successfully entering the channel, @err@ is null. On failure to enter, @err@ contains an "@ErrorInfo@":#error-info object describing the failure reason.

blang[java].
  h4. Listener result

  On successfully entering the channel, the @onSuccess@ method of the "CompletionListener":#completion-listener is called. On failure to enter, the @onError@ method is called with an "@ErrorInfo@":#error-info argument describing the failure reason.

blang[ruby].
  h4. Returns

  A "@Deferrable@":/realtime/types#deferrable object is returned from the method.

  On successfully entering the channel, the registered success blocks for the "@Deferrable@":/realtime/types#deferrable and any block provided to the method are executed. On failure to enter, the @errback@ callbacks of the "@Deferrable@":/realtime/types#deferrable are called with an "@ErrorInfo@":#error-info argument describing the failure reason.

h6(#leave). leave

In order to leave the presence set of a channel, the client must have already "entered and been present":#enter.

There are two overloaded versions of this method. With both versions, a <span lang="default">callback</span><span lang="ruby">block</span><span lang="java">completion listener</span> can optionally be passed in to be notified of success or failure to leave.

bq(definition#leave-none).
  default:  leave(callback("ErrorInfo":/realtime/types#error-info err))
  ruby:     "Deferrable":/realtime/types#deferrable leave() -> yields
  java:     public void leave("CompletionListener":#completion-listener listener)

Leave a presence channel without emitting any data.

bq(definition#leave-data).
  default: leave(Object data, callback("ErrorInfo":/realtime/types#error-info err))
  ruby:    "Deferrable":/realtime/types#deferrable leave(Object data) -> yields
  java:    public void leave(Object data, "CompletionListener":#completion-listener listener)

Leave a presence channel and emit data that is associated with the current leaving member.

h4. Parameters

- <div lang="jsall">Object data</div> := data payload for the current present member. The supported payload types are Strings, JSON objects and arrays, buffers containing arbitrary binary data, and null.
- <div lang="java">Object data</div> := data payload for the current present member. The supported payload types are Strings, JsonObject, binary data as byte arrays, and null.
- <div lang="ruby">Object data</div> := data payload for the current present member. The supported payload types are Strings, Hash or Array objects that can be serialised to JSON using @to_json@, binary data as @ASCII-8BIT@ byte arrays, and null.

- <div lang="jsall">callback</div> := is a function of the form @callback(err)@ which is called upon completion
- <div lang="java">"CompletionListener":#completion-listener listener</div> := Listener to be notified on completion
- <div lang="ruby">&block</div> := yields upon successfully leaving the channel

h6(#update). update

Clients can update their member data on the channel which will trigger a broadcast of this update to all presence subscribers. The "pre-requisites for @update@":#enter are the same as for "@enter@":#enter. If an attempt to @update@ is made before the client has entered the channel, the update is treated as an @enter@.

A <span lang="default">callback</span><span lang="ruby">block</span><span lang="java">completion listener</span> can optionally be passed in to be notified of success or failure to update the member data.

bq(definition#update-data).
  default: update(Object data, callback("ErrorInfo":/realtime/types#error-info err))
  ruby:    "Deferrable":/realtime/types#deferrable update(Object data) -> yields
  java:    public void update(Object data, "CompletionListener":#completion-listener listener)

Update the current member's data and broadcast an update event to all subscribers. @data@ may be @null@.

h4. Parameters

- <div lang="jsall">Object data</div> := data payload for the current present member. The supported payload types are Strings, JSON objects and arrays, buffers containing arbitrary binary data, and null.
- <div lang="java">Object data</div> := data payload for the current present member. The supported payload types are Strings, JsonObject, binary data as byte arrays, and null.
- <div lang="ruby">Object data</div> := data payload for the current present member. The supported payload types are Strings, Hash or Array objects that can be serialised to JSON using @to_json@, binary data as @ASCII-8BIT@ byte arrays, and null.

- <div lang="jsall">callback</div> := is a function of the form @callback(err)@ which is called upon completion
- <div lang="java">"CompletionListener":#completion-listener listener</div> := Listener to be notified on completion
- <div lang="ruby">&block</div> := yields upon successfully updating the member data

blang[jsall].
  h4. Callback result

  On successfully updating the data, @err@ is null. On failure to update, @err@ contains an "@ErrorInfo@":#error-info object describing the failure reason.

blang[java].
  h4. Listener result

  On successfully updating the data, the @onSuccess@ method of the "CompletionListener":#completion-listener is called. On failure to update, the @onError@ method is called with an "@ErrorInfo@":#error-info argument describing the failure reason.

blang[ruby].
  h4. Returns

  A "@Deferrable@":/realtime/types#deferrable object is returned from the method.

  On successfully updating the data, the registered success blocks for the "@Deferrable@":/realtime/types#deferrable and any block provided to the method are executed. On failure to update, the @errback@ callbacks of the "@Deferrable@":/realtime/types#deferrable are called with an "@ErrorInfo@":#error-info argument describing the failure reason.

h6(#enter-client).
  default: enterClient
  ruby: enter_client

Enter this presence channel for the given <span lang="default">@clientId@</span><span lang="ruby">@client_id@</span>. This method is provided to support typically server instances that act on behalf of multiple client IDs. See "Managing multiple client IDs":#presence-multiple-client-id for more info. In order to be able to publish presence changes for arbitrary client IDs, the client library must have been instanced either with an "API key":https://support.ably.io/solution/articles/3000030054-what-is-an-app-api-key, or with a "token bound to a wildcard client ID":https://support.ably.io/solution/articles/3000048586-can-a-client-emulate-any-client-id-i-e-use-a-wildcard-client-id. The connec

There are two overloaded versions of this method. With both versions, a <span lang="default">callback</span><span lang="ruby">block</span><span lang="java">completion listener</span> can optionally be passed in to be notified of success or failure to enter.

bq(definition#enter-client-none).
  default:  enterClient(String clientId, callback("ErrorInfo":/realtime/types#error-info err))
  ruby:     "Deferrable":/realtime/types#deferrable enter_client(String client_id) -> yields
  java:     public void enterClient(String clientId, "CompletionListener":#completion-listener listener)

Enter a presence channel on behalf of the provided <span lang="default">@clientId@</span><span lang="ruby">@client_id@</span> without any data.

bq(definition#enter-client-data).
  default: enterClient(String clientId, Object data, callback("ErrorInfo":/realtime/types#error-info err))
  ruby:    "Deferrable":/realtime/types#deferrable enter_client(String client_id, Object data) -> yields
  java:    public void enterClient(String clientId, Object data, "CompletionListener":#completion-listener listener)

Enter a presence channel and provide data that is associated with the current present member.

h4. Parameters

- <div lang="jsall">Object data</div> := data payload for the member. The supported payload types are Strings, JSON objects and arrays, buffers containing arbitrary binary data, and null.
- <div lang="java">Object data</div> := data payload for the member. The supported payload types are Strings, JsonObject, binary data as byte arrays, and null.
- <div lang="ruby">Object data</div> := data payload for the member. The supported payload types are Strings, Hash or Array objects that can be serialised to JSON using @to_json@, binary data as @ASCII-8BIT@ byte arrays, and null.

- <div lang="jsall">callback</div> := is a function of the form @callback(err)@ which is called upon completion
- <div lang="java">"CompletionListener":#completion-listener listener</div> := Listener to be notified on completion
- <div lang="ruby">&block</div> := yields upon successfully entering the channel

blang[jsall].
  h4. Callback result

  On successfully entering the channel, @err@ is null. On failure to enter, @err@ contains an "@ErrorInfo@":#error-info object describing the failure reason.

blang[java].
  h4. Listener result

  On successfully entering the channel, the @onSuccess@ method of the "CompletionListener":#completion-listener is called. On failure to enter, the @onError@ method is called with an "@ErrorInfo@":#error-info argument describing the failure reason.

blang[ruby].
  h4. Returns

  A "@Deferrable@":/realtime/types#deferrable object is returned from the method.

  On successfully entering the channel, the registered success blocks for the "@Deferrable@":/realtime/types#deferrable and any block provided to the method are executed. On failure to enter, the @errback@ callbacks of the "@Deferrable@":/realtime/types#deferrable are called with an "@ErrorInfo@":#error-info argument describing the failure reason.

h6(#leave-client).
  default: leaveClient
  ruby: leave_client

Leave this presence channel for the given <span lang="default">@clientId@</span><span lang="ruby">@client_id@</span>. This method is provided to support typically server instances that act on behalf of multiple client IDs. See "Managing multiple client IDs":#presence-multiple-client-id for more info. In order to leave the presence set of a channel, the client must have already "entered and been present":#enter-client.

There are two overloaded versions of this method. With both versions, a <span lang="default">callback</span><span lang="ruby">block</span><span lang="java">completion listener</span> can optionally be passed in to be notified of success or failure to leave.

bq(definition#leave-client-none).
  default:  leaveClient(String clientId, callback("ErrorInfo":/realtime/types#error-info err))
  ruby:     "Deferrable":/realtime/types#deferrable leave_client(String client_id) -> yields
  java:     public void leaveClient(String clientId, "CompletionListener":#completion-listener listener)

Leave a presence channel on behalf of the provided <span lang="default">@clientId@</span><span lang="ruby">@client_id@</span> without emitting any data.

bq(definition#leave-client-data).
  default: leaveClient(String clientId, Object data, callback("ErrorInfo":/realtime/types#error-info err))
  ruby:    "Deferrable":/realtime/types#deferrable leave_client(String client_id, Object data) -> yields
  java:    public void leaveClient(String clientId, Object data, "CompletionListener":#completion-listener listener)

Leave a presence channel on behalf of the provided <span lang="default">@clientId@</span><span lang="ruby">@client_id@</span> and emit data that is associated with the current leaving member.

h4. Parameters

- <div lang="jsall">Object data</div> := data payload for the present member. The supported payload types are Strings, JSON objects and arrays, buffers containing arbitrary binary data, and null.
- <div lang="java">Object data</div> := data payload for the present member. The supported payload types are Strings, JsonObject, binary data as byte arrays, and null.
- <div lang="ruby">Object data</div> := data payload for the present member. The supported payload types are Strings, Hash or Array objects that can be serialised to JSON using @to_json@, binary data as @ASCII-8BIT@ byte arrays, and null.

- <div lang="jsall">callback</div> := is a function of the form @callback(err)@ which is called upon completion
- <div lang="java">"CompletionListener":#completion-listener listener</div> := Listener to be notified on completion
- <div lang="ruby">&block</div> := yields upon successfully leaving the channel

h6(#update-client).
  default: updateClient
  ruby: update_client

Clients can update the member data on behalf of the given <span lang="default">@clientId@</span><span lang="ruby">@client_id@</span> which will trigger a broadcast of this update to all presence subscribers. This method is provided to support typically server instances that act on behalf of multiple client IDs. See "Managing multiple client IDs":#presence-multiple-client-id for more info. If an attempt to update is made before the member has entered the channel, the update is treated as an enter.

A <span lang="default">callback</span><span lang="ruby">block</span><span lang="java">completion listener</span> can optionally be passed in to be notified of success or failure to update the member data.

bq(definition#update-data).
  default: updateClient(String clientId, Object data, callback("ErrorInfo":/realtime/types#error-info err))
  ruby:    "Deferrable":/realtime/types#deferrable update_client(String client_id, Object data) -> yields
  java:    public void updateClient(String clientId, Object data, "CompletionListener":#completion-listener listener)

Update the member data on behalf of the provided <span lang="default">@clientId@</span><span lang="ruby">@client_id@</span> and broadcast an update event to all subscribers. @data@ may be @null@.

h4. Parameters

- <div lang="jsall">Object data</div> := data payload for the member. The supported payload types are Strings, JSON objects and arrays, buffers containing arbitrary binary data, and null.
- <div lang="java">Object data</div> := data payload for the member. The supported payload types are Strings, JsonObject, binary data as byte arrays, and null.
- <div lang="ruby">Object data</div> := data payload for the member. The supported payload types are Strings, Hash or Array objects that can be serialised to JSON using @to_json@, binary data as @ASCII-8BIT@ byte arrays, and null.

- <div lang="jsall">callback</div> := is a function of the form @callback(err)@ which is called upon completion
- <div lang="java">"CompletionListener":#completion-listener listener</div> := Listener to be notified on completion
- <div lang="ruby">&block</div> := yields upon successfully updating the member data

blang[jsall].
  h4. Callback result

  On successfully updating the data, @err@ is null. On failure to update, @err@ contains an "@ErrorInfo@":#error-info object describing the failure reason.

blang[java].
  h4. Listener result

  On successfully updating the data, the @onSuccess@ method of the "CompletionListener":#completion-listener is called. On failure to update, the @onError@ method is called with an "@ErrorInfo@":#error-info argument describing the failure reason.

blang[ruby].
  h4. Returns

  A "@Deferrable@":/realtime/types#deferrable object is returned from the method.

  On successfully updating the data, the registered success blocks for the "@Deferrable@":/realtime/types#deferrable and any block provided to the method are executed. On failure to update, the @errback@ callbacks of the "@Deferrable@":/realtime/types#deferrable are called with an "@ErrorInfo@":#error-info argument describing the failure reason.

h6(#subscribe)[default]. subscribe(listener)

h6(#subscribe)[java]. public void subscribe(PresenceListener listener)

Subscribe to presence messages for this channel. The caller supplies <span lang="default">a listener function</span><span lang="java">an implementation of the PresenceListener interface</span>, which is called each time one or more messages arrives on the channel.

h4. Parameters

- <div lang="jsall">listener</div> := The listener function to call for each message.

- <div lang="java">listener</div> := The MessageListener to be notified on completion.

h6(#unsubscribe)[default]. unsubscribe(listener)

h6(#unsubscribe)[java]. public void unsubscribe(PresenceListener listener)

Unsubscribe a previously subscribed listener.

h4. Parameters

- <div lang="jsall">listener</div> := The listener function registered on subscription.

- <div lang="java">listener</div> := The PresenceListener registered on subscription.

h6(#get)[default]. get()

h6(#get)[java]. public PresenceMessage[] get()

Get the current presence set for this channel. This returns synchronously with the presence set already known by the client.

h6(#history). history

bq(definition).
  default: presence.history(params, callback)
  ruby:    presence.history(options) → json_result
  java:    public PaginatedResult&lt;PresenceMessage&gt; history(Param[] params)

Get presence history for this channel.

h4. Parameters

- params := an optional object containing the query parameters, as specified in the "history":/realtime/history API documentation.
- <div lang="jsall">callback</div> := is a function of the form: @callback(err, messages, relParams)@
where:
<ul>
<li>@err@ contains an error value on the case of an error response as defined in the "REST API":/rest-api#common documentation</li>
<li>on success, @messages@ contains the query result as an array of PresenceMessage objects.</li>
<li>where applicable, @relParams@ is a map containing query params for each of the pagination links in the query response (see below).</li>
</ul>

Further details of the supported query params are in the "history API":/realtime/history documentation.

<div lang="java">
h4. Returns

On success, the returned "PaginatedResult":#paginated-result encapsulates a collection of @PresenceMessage@ objects corresponding to the current page of results, and also provides query parameters for any applicable related (eg @first@ or @next@ result pages).

Failure to retrieve the history will raise an @AblyException@.

</div>

<div lang="ruby">
h4. Returns

On success, @json_result@ contains an array of results whose type corresponds to the result type for the request granularity as specified in "REST API":/rest-api/#message-history.

Example @json_result@:

```[json]
[{
  "name": "<event name>",
  "channel": "<channel id>",
  "data": "<message payload>",
  "timestamp": "<message timestamp>"
}]
```

Failure to retrieve the history will raise an exception - typical exceptions include:

* @Ably::NetworkUnavailableException@
* @Ably::QuotaExceededException@
* @Ably::AuthenticationFailureException@

</div>

<div lang="jsall">

h4. Pagination

A paginated result is indicated in the @relParams@ callback argument. For each available link, @relParams@ contains a map of params to pass to a subsequent @history()@ call.
  Example @relParams@:

```[json]
[{
  "first": {"start": 1380794880000, "end": 138079488105, ...},
  "current": {"start": 1380794880000, "end": 138079488105, ...},
  "next": {"start": 1380794880000, "end": 138079488105, ...}
}]
```

Further details of the paginated response are in the "history API":/realtime/history documentation.
</div>

h2(#related-types). Related types

h3(#message).
  default: PresenceMessage
  ruby:    Ably::Models::PresenceMessage Enum
  java:    io.ably.lib.types.PresenceMessage

<%= partial 'types/_presence_message' %>

h3(#completion-listener).
  java:   io.ably.lib.realtime.CompletionListener

blang[java].
  <%= partial 'types/_completion_listener', indent: 2, skip_first_indent: true %>

h3(#paginated-result).
  default: PaginatedResult
  ruby:    Ably::Models::PaginatedResult
  java:    io.ably.lib.types.PaginatedResult

<%= partial 'types/_paginated_result' %>

h3(#presence-listener).
  java:   io.ably.lib.realtime.PresenceListener

blang[java].
  <%= partial 'types/_presence_listener', indent: 2, skip_first_indent: true %>
