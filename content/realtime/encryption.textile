---
title: Encryption
section: realtime
index: 70
jump_to:
  Help with:
    - Getting started#getting-started
    - Understanding encryption#encryption
  API Reference:
    - getDefaultParams#get-default-params
  Related types:
    - Channel Options
    - CipherParams#cipher-params
---

Ably client libraries support built-in symmetrical encryption of message content, making it easier to build apps that encrypt content fully end-to-end. Whilst "TLS is enabled by default":https://support.ably.io/solution/articles/3000045208-are-messages-sent-to-and-received-from-ably-sent-securely-using-tls and ensures that data is securely sent to and received from Ably, messages are not encrypted within the Ably system. Using the encryption feature of our client libraries ensures that message payloads are opaque, can never be decrypted by Ably, and can only be decrypted by other clients that share your secret key.

h2(#getting-started). Getting started

"Channels":/realtime/channels-messages can be easily configured to automatically encrypt and decrypt all message payloads using the secret @key@ provided in the "channel options":/realtime/types#channel-options. Below is a simple example:

```[jsall](code-editor:realtime/channel-encrypted)
  var channelOpts = { encrypted: true, cipherParams: { key: 'A__SECRET__KEY__' } };
  var channel = realtime.channels.get('{{RANDOM_CHANNEL_NAME}}', channelOpts);
  channel.subscribe(function(message) {
    alert('Decrypted data: ' + message.data);
  });
  channel.publish('example', 'secret payload');
```

```[ruby]
  channel_opts = { encrypted: true, cipher_params: { key: 'A__SECRET__KEY__' } }
  channel = realtime.channels.get('{{RANDOM_CHANNEL_NAME}}', channel_opts)
  channel.subscribe do |message|
    puts "Decrypted data: #{message.data}"
  end
  channel.publish 'example', 'secret payload'
```

```[java]
  CipherParams params = Crypto.getDefaultParams("A__SECRET__KEY__");
  ChannelOptions options = new ChannelOptions();
  options.encrypted = true;
  options.cipherParams = params;
  Channel channel = realtime.channels.get("{{RANDOM_CHANNEL_NAME}}", options);
  channel.subscribe(new MessageListener() {
    @Override
    public void onMessage(Message[] messages) {
      System.out.println(messages.length + " new messages arrived");
    }});
  end
  channel.publish("example", "message data");
```

h2. Understanding encryption

The libraries support encryption purely as a convenience; the libraries ensure interoperability between environments by having compatible implementations of encryption algorithms and by making common choices on format, mode, padding etc. However,  Ably intentionally does not manage the distribution of keys between clients, and end-to-end encryption is enabled without exposing keys to the Ably service at all. This has the advantage that Ably demonstrably has no access to the unencrypted contents of your messages, but also means that each app is responsible for enabling the distribution of keys to clients independently of Ably.

The client library support for encryption supports symmetric encryption only, and requires each participating client to each specify the correct @cipherParams@ secret @key@ when creating a @Channel@ instance. Clients that do not specify a key will be delivered the still-encrypted message payloads that they may then still wish to decrypt offline.

The client libraries are designed to be extensible, but initially only support the AES algorithm (with a default key length of 128 bits) and CBC mode. These defaults are intended to ensure that encryption support can be provided in all target environments and platforms.

Encryption is supported for the @data@ attribute (payload) of "published messages":/realtime/types#messages and "presence member messages":/realtime/types#presence-message on a channel, over both REST and Realtime publish operations. Decryption is supported in Realtime "message":/realtime/channels-messages and "presence message":/realtime/presence subscriptions and in REST and "Realtime history":/realtime/history operations.

All other attributes of "messages":/realtime/types#messages and "presence messages":/realtime/types#presence-message, such as event @name@ or <span lang="default">@clientId@</span><span lang="ruby">@client_id@</span> remain unencrypted. All sensitive data, when using the library's symmetrical encryption, must be placed in the @data@ attribute to ensure it is encypted before it is transmitted to Ably.

The key in use at any given time is known by the client library, but the Ably service has no visibility of the key; it knows only that a given message payload was encrypted. When accessing messages via the "history API":/realtime/history, it is the caller's responsibility to ensure that the correct key is configured for the channel before the history request is made.

Encryption options (algorithm, key, etc) are specified on a per-channel basis; it is expected that apps may wish to have both unencrypted and encrypted channels on a single connection.


h1. Crypto API Reference

inline-toc.
  Crypto reference:
    - Methods:
      - getDefaultParams#get-default-params
    - Related types:
      - Channel Options
      - CipherParams#cipher-params

The <span lang="default">@Ably.Realtime.@</span><span lang="ruby">@Ably::Util::@</span><span lang="java">@io.ably.lib.util.@</span>@Crypto@ object exposes the following public methods:

h2(#methods). Methods

h6(#get-default-params).
  default:  getDefaultParams
  ruby:     get_default_params

bq(definition).
  default: Crypto.getDefaultParams(String key?, callback("ErrorInfo":/realtime/types#error-info err, "CipherParams":#cipher-params cipherParams))
  ruby:    "CipherParams":#cipher-params Crypto.get_default_params(String key?)
  java:    public "CipherParams":#cipher-params Crypto.getDefaultParams(String key?)

This call obtains a "@CipherParams@":#cipher-params object with default values for the implementation, either taking a supplied cipher key or generating a secure random key.

h4. Parameters

- key := an optional <span lang="java">@byte[]@</span><span lang=default>@String@</span> containing the secret key. If not provided, a secure random key is generated

- <div lang="jsall">callback</div> := is a function of the form @function(err, cipherParams)@ which is called upon completion

blang[jsall].
  h4. Callback result

  On successfully creating default cipher params, the callback is called with the default "@CipherParams@":#cipher-params object and @err@ is @null@. On failure to create default cipher params, @err@ contains an "@ErrorInfo@":#error-info object describing the failure reason.

blang[java,ruby].
  h4. Returns

  On success, the method returns the default "@CipherParams@":#cipher-params. Failure to create default cipher params will raise an "@AblyException@":/realtime/types/#ably-exception

h4. Example

```[jsall](code-editor:realtime/channel-encrypted)
  var cipherParams = Ably.Realtime.Crypto.getDefaultParams('A__SECRET__KEY__');
  var channelOpts = { encrypted: true, cipherParams: cipherParams };
  var channel = realtime.channels.get('{{RANDOM_CHANNEL_NAME}}', channelOpts);
```

```[ruby]
  cipher_params = Ably::Util::Crypto.get_default_params('A__SECRET__KEY__')
  channel_opts = { encrypted: true, cipher_params: cipher_params }
  channel = realtime.channels.get('{{RANDOM_CHANNEL_NAME}}', channel_opts)
```

```[java]
  CipherParams params = Crypto.getDefaultParams("A__SECRET__KEY__");
  ChannelOptions options = new ChannelOptions();
  options.encrypted = true;
  options.cipherParams = params;
  Channel channel = realtime.channels.get("{{RANDOM_CHANNEL_NAME}}", options);
```

h2(#related-types). Related types

h3(#channel-options).
  default:   ChannelOptions Object
  ruby:      ChannelOptions Hash
  java:      io.ably.lib.types.ClientOptions

<%= partial 'types/_channel_options' %>

h3(#cipher-params).
  default: CipherParams
  ruby:    CipherParams Hash
  java:    io.ably.lib.util.Crypto.CipherParams

<%= partial 'types/_cipher_params' %>
