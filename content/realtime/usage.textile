---
title: Using the Realtime library
section: realtime
index: 10
jump_to:
  Help with:
    - Usage#title
  Realtime API reference:
    - constructor
  Attributes:
    - auth
    - channels
    - client_id#client-id
    - connection
    - rest_client#rest-client
  Methods:
    - connect
    - close
    - stats
    - time
  Related types:
    - Options#options
---

The Realtime library when initialized attempts to establish and maintain a single connection to the Ably realtime service. The library extends the "REST library":/rest/usage to provide all REST API functionality including the "authentication API":/rest/authentication.   Whereas the REST API is stateless, the Realtime API maintains connection and channel state.

The Ably Realtime client library is available for "most popular languages and platforms":https://www.ably.io/download/realtime-client-libraries with a consistent API across all platforms. You can view this documentation with your preferred language API and code examples using the language selector navigation above.

blang[javascript].
  The Realtime library for browser Javascript environments should be loaded from the Ably CDN as follows:

  ```[javascript]
  <script lang="text/javascript" src="//cdn.ably.io/lib/ably.min.js" />
  ```

  The script contains both the Realtime and REST libraries as well as all their dependencies. To instance the Realtime library:

  ```[javascript]
  var realtime = new Ably.Realtime({ key: apiKey });
  ```

blang[nodejs].
  The Realtime library for nodejs targets clients and servers and is obtainable as a module "directly from npm":https://npmjs.org/package/ably. Install with:

  ```[sh]
  npm install ably-js
  ```

  The Ably Node.js module contains both the REST and Realtime libraries; each is exported separately by the module. To instance the Realtime library:

  ```[nodejs]
  var Ably = require('ably-js');
  var realtime = new Ably.Realtime({ key: apiKey });
  ```

blang[ruby].
  The Realtime library for Ruby is obtainable as a RubyGem direcly using:

  ```[sh]
  gem install ably
  ```

  If using bundler, simply add the following to your Gemfile and run @bundle install@:

  ```[ruby]
  gem 'ably'
  ```

  The Ably Ruby gem contians both the REST and Realtime libraries; each is namespaced separately by the gem. To instance the Realtime library:

  ```[ruby]
  ably = Ably::Realtime.new(key: api_key)
  ```

blang[java].
  The Realtime library for Java is downloadable as a JAR from "https://github.com/ably/ably-java/releases":https://github.com/ably/ably-java/releases.

  Ensure this JAR is included in your classpath.

  ```[java]
  import io.ably.types;
  import io.ably.realtime;
  ClientOptions options = new ClientOptions(apiKey);
  AblyRealtime realtime = new AblyRealtime(options);
  ```

The required and supported "client options":#client-options are described below.

h1. Realtime API Reference

h2(#constructor). Constructor

The Ably Realtime library constructor is overloaded allowing it to be instanced using either a string API key or Token ID, or "@ClientOptions@":#client-options

bq(definition).
  default: Ably.Realtime(keyOrTokenIdString)
  ruby: Ably::Realtime.new(key_or_token_id_string)
  java: io.ably.AblyRealtime(String keyOrTokenIdString)

This will instance the Realtime library with the provided API key or Token ID string.

bq(definition).
  default: Ably.Realtime(clientOptions)
  ruby: Ably::Realtime.new(client_options)
  java: io.ably.AblyRealtime(ClientOptions clientOptions)

blang[default].
  This will instance the library using the specified "ClientOptions":#client-options.

blang[ruby].
  This will instance the library and create a new @Ably::Realtime::Client@ using the specified "@ClientOptions@":#client-options.

The Realtime constructor is used to instance the library. The Realtime library may be instanced multiple times with the same or different "@ClientOptions@":#client-options in any given context. Except where specified otherwise, instances operate independently of one another.


h3(#authentication). Authentication

The Realtime library needs to have credentials to be able to authenticate with the Ably service:

The @key@ option takes a key string, as obtained from the "application dashboard":http://support.ably.io/solution/articles/3000030053-how-do-i-access-my-app-dashboard. Use this option if you wish to use Basic authentication, or if you want to be able to request tokens without needing to defer to a separate entity to sign token requests. Note that initialising the library with a @key@ does not necessarily mean that the library will use Basic auth; but knowing the key it is able to create and sign token requests and use token authentication when necessary.

The @token@ option takes a token string, and assumes the token has been obtained from some other instance that requested the token. Use the token option if you are provided with a token to use and you do not have a key (or do not have a key with the capabilities that you require).

Since tokens are short-lived, it is rarely sufficient to start with a token without the means for refreshing it. The <span lang="default">@authUrl@ and @authCallback@ options</span><span lang="ruby">@:auth_url@ and @:auth_callback@ options</span> are provided to allow a user of the library to provide new tokens or token requests to the library as required; using these options allows the library to be instanced without a @key@ or @token@, and an initial token will be obtained automatically when required.

See "@ClientOptions@":#client-options for the full set of initialisation options.

h2(#members).
  default: AblyRealtime Attributes
  java: io.ably.AblyRealtime Members
  javascript,nodejs: AblyRealtime Properties

The Realtime object exposes the following public <span lang="default">attributes</span><span lang="java">members</span><span lang="javascript,nodejs">properties</span>.

blang[ruby].
  h6(#auth). auth

  A reference to the "@Auth@":/realtime/authentication authentication object configured for this client library.

h6(#channels). channels

A reference to the "@Channel@ collection":/realtime/channels-messages instance for this library indexed by the channel name. See "channels and messages":/realtime/channels-messages/ for more information.

blang[ruby].
  h6(#client-id).
    default: clientId
    ruby:    client_id

  The client ID string, if any, configured for this client connection. See "authentication":/realtime/authentication for more information on authentication and using a client ID.

h6(#connection). connection

A reference to the "@Connection@":/realtime/connection object for this library instance.

blang[ruby].
  h6(#rest-client). rest_client

  A reference to the "REST Client":/rest/usage configured with the same "@ClientOptions@":#client-options.  The Realtime library is a superset of the REST library, however accessing methods in the REST library, unlike the Realtime library, are blocking operations.

h2(#methods).
  default: AblyRealtime Methods
  ruby: Realtime::Client Methods
  java: io.ably.AblyRealtime Methods

h6(#close). close

bq(definition).
  default: close()
  ruby:    close(&block)
  java:    public void close()

This simply calls <span lang="default">"@connection.close()@":/realtime/connection#close</span><span lang="ruby">"@connection.close@":/realtime/connection#close</span> and causes the connection to close, entering the @closing@ state. Once closed, the library will not attempt to re-establish the connection without an explicit call to <span lang="default">"@connect()@":/realtime/connection#connect</span><span lang="ruby">"@connect@":/realtime/connection#connect</span>.

h6(#connect). connect

bq(definition).
  default: connect()
  ruby:    connect(&block)
  java:    public void connect()

Explicitly calling @connect@ is unnecessary unless the "@ClientOption@":#client-option <span lang="default">@connectAutomatically@</span><span lang="ruby">@connect_automatically@</span> is disabled. This method simply calls <span lang="default">"@connection.connect()@":/realtime/connection#connect</span><span lang="ruby">"@connection.connect@":/realtime/connection#connect</span> and causes the connection to open, entering the @connecting@ state.

h6(#stats). stats

bq(definition).
  default: stats(params, callback("ErrorInfo":/realtime/types#error-info err, "PaginatedResult":/realtime/types#paginated-result<"Stats":/realtime/types#stats> result))
  ruby:    stats(Hash options) -> EventMachine::Deferrable -> yields "PaginatedResult":/realtime/types#paginated-result<"Stats":/realtime/types#stats>
  java:    public "PaginatedResult":/realtime/types#paginated-result<"Stats":/realtime/types#stats> stats(Param[] params)

This call queries the "REST @/stats@ API":/rest-api#stats and retrieves application statistics. A "PaginatedResult":/realtime/types#paginated-result is returned, containing an array of "Stats":/realtime/types#stats for the current page of results.

h4. Parameters

- <div lang="default">params</div> := an optional object containing the query parameters
- <div lang="ruby">options</div> := an optional options Hash containing the query parameters
- <div lang="java">params</div> := an optional array @Param@ key value pairs containing the query parameters

- <div lang="nodejs,javascript">callback</div> := is a function of the form: @callback(err, results)@
- <div lang="ruby">&block</div> := yields a @PaginatedResult<Stats>@ array

h4.
  default: Query params
  ruby: Query options

Match the <span lang="default">params</span><span lang="ruby">options</span> used in the "REST @/stats@ API":/rest-api#stats endpoint

- <span lang="ruby">:</span>start := earliest <span lang="ruby">@Time@ or </span>millisecond since epoch time for any stats retrieved<br>__Type: Long<span lang="ruby">, Time</span>__
- <span lang="ruby">:</span>end := latest <span lang="ruby">@Time@ or </span>millisecond since epoch time for any stats retrieved<br>__Type: Long<span lang="ruby">, Time</span>__
- <span lang="ruby">:</span>direction := <span lang="ruby">:</span>@forwards@ or <span lang="ruby">:</span>@backwards@, defaults to <span lang="ruby">:</span>@backwards@<br>__Type: <span lang="default">String</span><span lang="ruby">Symbol</span>__
- <span lang="ruby">:</span>limit := maximum number of messages to retrieve up to 1,000, defaults to 100<br>__Type: Integer__
- <span lang="ruby">:</span>unit := <span lang="ruby">:</span>@minute@, <span lang="ruby">:</span>@hour@, <span lang="ruby">:</span>@day@ or <span lang="ruby">:</span>@month@. Defaults to <span lang="ruby">:</span>@minute@<br>__Type: <span lang="default">String</span><span lang="ruby">Symbol</span>__

blang[nodejs,javascript].
  h4. Callback result

  On success, @result@ contains a "@PaginatedResult@":#paginated-result encapsulating a collection of @Stats@ objects corresponding to the current page of "@Stats@":/realtime/types#stats" results. "@PaginatedResult@":#paginated-result supports pagination using @next@ and @first@ methods.

  On failure to retrieve stats, @err@ contains an "@ErrorInfo@":#error-info object with an error response as defined in the "REST API":/rest-api#common documentation.

blang[java].
  h4. Returns

  On success, the returned "@PaginatedResult@":#paginated-result encapsulates a collection of @Stats@ objects corresponding to the current page of results. "@PaginatedResult@":#paginated-result supports pagination using @next@ and @first@ methods.

  Failure to retrieve the stats will raise an "@AblyException@":#ably-exception

blang[ruby].
  h4. Returns

  A "@Deferrable@":/realtime/types#deferrable object is returned from the stats method.

  On success, the registered success callbacks for the "@Deferrable@":/realtime/types#deferrable and any block provided to the method yields a "PaginatedResult":#paginated-result that encapsulates a collection of @Stat@ objects corresponding to the current page of results. "@PaginatedResult@":#paginated-result supports pagination using @next@ and @first@ methods.

  Failure to retrieve the stats will trigger the errback callbacks of the "@Deferrable@":/realtime/types#deferrable with an "@ErrorInfo@":#error-info object containing an error response as defined in the "REST API":/rest-api#common documentation.

h6(#time). time

bq(definition).
  default: time(callback("ErrorInfo":/realtime/types#error-info err, Number time))
  ruby:   time → EventMachine::Deferrable → yields Time
  java:   public long time

Obtains the time from the Ably service.  This may be required on clients that do not have access to a sufficiently well maintained time source, to provide timestamps for use in token requests.

blang[nodejs,javascript].
  h4. Callback result

  On success, @time@ is millisecond since epoch.

  On failure to retrieve the Ably server time, @err@ contains an "@ErrorInfo@":#error-info object with an error response as defined in the "REST API":/rest-api#common documentation.

blang[java].
  h4. Returns

  On success, millisecond since epoch is returned.

  Failure to retrieve the Ably server time will raise an "@AblyException@":#ably-exception.

blang[ruby].
  h4. Returns

  A "@Deferrable@":/realtime/types#deferrable object is returned from this method.

  On success, the registered success callbacks for the "@Deferrable@":/realtime/types#deferrable and any block provided to the method yields a @Time@ object.

  Failure to retrieve the Ably server time will trigger the errback callbacks of the "@Deferrable@":/realtime/types#deferrable with an "@ErrorInfo@":#error-info object containing an error response as defined in the "REST API":/rest-api#common documentation.

h2(#client-options).
  default:   ClientOptions
  java:      io.ably.types.ClientOptions

<%= partial 'types/_client_options' %>
