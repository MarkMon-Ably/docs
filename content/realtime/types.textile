---
title: Types
section: realtime
index: 500
jump_to:
  Data types:
    - Message
    - Presence Message
    - Paginated Result
    - Token Request
    - Token Details
  Option Types:
    - Client Options
---

The Ably client library defines both data types and option types.  Data types are used to represent object such as messages; Option types are used in method arguments.

h2. Data types

h3(#message).
  default: Message
  java:    io.ably.types.Message
  ruby:    Ably::Models::Message

A @Message@ represents an individual message that is sent to or received from Ably

h4. Attributes

- @name@ := Event name, if provided<br>__Type: String__

- <div lang="java">@data@</div> := The message payload<br>__Type: String, ByteArray, JSONObject, JSONArray__
- <div lang="javascript">@data@</div> := The message payload<br>__Type: String, StringBuffer, JSON Object__
- <div lang="ruby">@data@</div> := The message payload<br>__Type: String, Binary (ASCII-8BIT String), Hash, Array__

- @id@ := Unique ID assigned by Ably to this message<br>__Type: String__

- <span lang="default">@clientId@</span><span lang="ruby">@client_id@</span> := The client ID of the publisher of this message<br>__Type: String__

- <span lang="default">@connectionId@</span><span lang="ruby">@connection_id@</span> := The connection ID of the publisher of this message<br>__Type: String__

- @timestamp@ := Timestamp when the presence update was received by the Ably the realtime service, as milliseconds since the epoch<br>__Type: <span lang="java">Long Integer</span><span lang="javascript">Integer</span><span lang="ruby">Time</span>__

- @encoding@ := This will typically be empty as all messages received from Ably are automatically decoded client-side using this value. However, if the message encoding cannot be processed, this attribute will contain the remaining transformations not applied to the @data@ payload<br>__Type: String__


h3(#presence-message).
  default: PresenceMessage
  java:    io.ably.types.PresenceMessage
  ruby:    Ably::Models::PresenceMessage

A @PresenceMessage@ represents an individual presence update that is sent to or received from Ably

h4. Attributes

- <div lang="java">@action@</div> := the event signified by a PresenceMessage<br>__Type: enum Action { ABSENT, PRESENT, ENTER, LEAVE, UPDATE }__
- <div lang="javascript">@action@</div> := the event signified by a PresenceMessage<br>__Type: Integer value for Action { "ABSENT" : 0, "PRESENT" : 1, "ENTER" : 2, "LEAVE" : 3, "UPDATE" : 4 }__
- <div lang="ruby">@action@</div> := the event signified by a PresenceMessage<br>__Type: enum ACTION { :absent, :present, :enter, :leave, :update }__

- <div lang="java">@data@</div> := The optional presence update payload<br>__Type: String, ByteArray, JSONObject, JSONArray__
- <div lang="javascript">@data@</div> := The optional presence update payload<br>__Type: String, StringBuffer, JSON Object__
- <div lang="ruby">@data@</div> := The optional presence update payload<br>__Type: String, Binary (ASCII-8BIT String), Hash, Array__

- @id@ := Unique ID assigned by Ably to this presence update<br>__Type: String__

- <span lang="default">@clientId@</span><span lang="ruby">@client_id@</span> := The client ID of the publisher of this presence update<br>__Type: String__

- <span lang="default">@connectionId@</span><span lang="ruby">@connection_id@</span> := The connection ID of the publisher of this presence update<br>__Type: String__

- @timestamp@ := Timestamp when the presence update was received by the Ably the realtime service, as milliseconds since the epoch<br>__Type: <span lang="java">Long Integer</span><span lang="javascript">Integer</span><span lang="ruby">Time</span>__

- @encoding@ := This will typically be empty as all presence updates received from Ably are automatically decoded client-side using this value. However, if the message encoding cannot be processed, this attribute will contain the remaining transformations not applied to the @data@ payload<br>__Type: String__

h3(#paginated-result). PaginatedResult

A @PaginatedResult@ is a type that represents a page of results for all message and presence history, stats and REST presence requests. The response from a "paginated REST API query":/rest-api/#pagination is accompanied by metadata that indicates the relative queries available to the @PaginatedResult@ object

h4. Attributes

- @items@ := contains a page of results (for example an Array of "@Message@":#message or "@PresenceMessage@":#presence-message objects for a channel history request)<br>__Type: Array <Message, Presence, Stats>__
- <div lang="default">@isFirst@</div> := @true@ if this page is the first page<br>__Type: Boolean__
- <div lang="ruby">@first?@</div> := @true@ if this page is the first page<br>__Type: Boolean__

- <div lang="default">@isLast@</div> := @true@ if this page is the last page<br>__Type: Boolean__
- <div lang="ruby">@last?@</div> := @true@ if this page is the last page<br>__Type: Boolean__

- <div lang="default">@hasNext@</div> := @true@ if there are further pages<br>__Type: Boolean__
- <div lang="ruby">@has_next?@</div> := @true@ if there are further pages<br>__Type: Boolean__

h4. Methods

bq(definition).
  default:  next()
  ruby:     next
  java:     public PaginatedResult next()

Returns a new @PaginatedResult@ loaded with the next page of results. If there are no further pages, then <span lang="default">@null@</span><span lang="java">@Null@</span><span lang="ruby">@nil@</span> is returned

bq(definition).
  default:  first()
  ruby:     first
  java:     public PaginatedResult first()

Returns a new @PaginatedResult@ for the first page of results

h4. Example

```[javascript]
channel.history(function(err, paginatedResult) {
  console.log("Page 0 item 0:" + paginatedResult.items[0].data);
  paginatedResult.next(function(err, nextPage) {
    console.log("Page 1 item 1:" + nextPage.items[1].data);
  });
});
```
```[java]
PaginatedResult firstPage = channel.history();
System.out.println("Page 0 item 0:" + firstPage.items[0].data);
if (firstPage.hasNext) {
  PaginatedResult nextPage = firstPage.next();
  System.out.println("Page 1 item 1:" + nextPage.items[1].data);
});
```
```[ruby]
# When using the REST sync library
first_page = channel.history
puts "Page 0 item 0: #{first_page.items[0].data}"
if first_page.has_next?
  next_page = first_page.next
  puts "Page 1 item 1: #{next_page.items[1].data}"
end

# When using the Realtime EventMachine library
channel.history do |first_page|
  puts "Page 0 item 0: #{first_page.items[0].data}"
  if first_page.has_next?
    first_page.next do |next_page|
      puts "Page 1 item 1: #{next_page.items[1].data}"
    end
  end
end
```

h3(#token-request). TokenRequest (WIP)

@TokenRequest@ is a type containing parameters for a token request. Tokens are requested using the "REST requestToken endpoint":/rest-api/#requesttoken

h3. Attributes

- <span lang="default">@keyName@</span><span lang="ruby">@key_name@</span> := The key name of the key against which this request is made. The key name is public, whereas the key secret is private<br>__Type: String__
- @ttl@ := Requested time to live for the token in <span lang="default">milliseconds</span><span lang="ruby">seconds</span>. If the token request is successful, the TTL of the returned token will be less than or equal to this value depending on application settings and the attributes of the issuing key.<br>__Type: Integer__
- @timestamp@ := The timestamp of this request in milliseconds<br>__Type: <span lang="java">Long Integer</span><span lang="javascript">Integer</span><span lang="ruby">Time</span>__
- @capability@ :=  Capability of the token. If the token request is successful, the capability of the returned token will be the intersection of this capability with the capability of the issuing key. The capability is a a JSON stringified canonicalised representation of the resource paths and associated operations. "Read more about authentication and capabilities":/realtime/authentication<br>__Type: String__
- <span lang="default">@clientId@</span><span lang="ruby">@client_id@</span> := The client ID to associate with this token. When provided, the token may only be used to perform operations on behalf of that client ID<br>__Type: String__
- @nonce@ := An opaque nonce string of at least 16 characters<br>__Type: String__
- @mac@ := The Message Authentication Code for this request<br>__Type: String__

h3(#token-details). TokenDetails

@TokenDetails@ is a type providing details of a token and its associated metadata, provided when the system successfully requests a token from the system

h3. Attributes

- @token@ := The token itself<br>__Type: String__
- @expires@ := <span lang="default">The time (in millis since the epoch)</span><span lang="ruby">The time</span> at which this token expires<br>__Type: <span lang="java">Long Integer</span><span lang="javascript">Integer</span><span lang="ruby">Time</span>__
- @issued@ :=  <span lang="default">The time (in millis since the epoch)</span><span lang="ruby">The time</span> at which this token was issued<br>__Type: String__
- @capability@ :=  The capability associated with this token. The capability is a a JSON stringified canonicalised representation of the resource paths and associated operations. "Read more about authentication and capabilities":/realtime/authentication<br>__Type: String__
- <span lang="default">@clientId@</span><span lang="ruby">@client_id@</span> := The client ID, if any, bound to this token. If a client ID is included, then the token authenticates its bearer as that client ID, and the token may only be used to perform operations on behalf of that client ID.<br>__Type: String__

<div lang="Ruby">
h3. Methods

- @expired?@ := True when the token has expired<br>__Type: Boolean__
</div>


h2. Option types

h3(#client-options). ClientOptions (WIP)
