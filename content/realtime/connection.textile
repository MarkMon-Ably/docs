---
title: Connection
section: realtime
index: 20
jump_to:
  Help with:
    - Getting started#title
    - Connection state explained
    - Available connection states#connection-states
    - Connection state recovery
  Connection API properties:
    - id
    - error reason
    - key
    - recovery key
    - serial
    - state
  Connection API methods:
    - close
    - connect
    - on
    - once
    - off
    - ping
  Related types:
    - Completion listener
    - Connection state
    - Connection state change
---

The Ably Realtime library establishes and maintains a connection to the Ably service, using the most efficient transport available, typically WebSockets. The Ably realtime protocol operates and multiplexes all channel traffic over that connection.

h3(#getting-started). Getting started

The Ably Realtime library will open and maintain a connection to the Ably realtime servers as soon as it is instanced. The @Connection@ object provides a straightforward API to monitor and manage connection state. The following example simply connects to Ably:

bc[javascript](code-editor:realtime/connection). var ably = new Ably.Realtime('{{API_KEY}}');
ably.connection.on('connected', function() {
  alert('Connected, that was easy');
})

bc[nodejs](code-editor:realtime/connection). var Ably = require('ably-js');
var ably = new Ably.Realtime('{{API_KEY}}');
ably.connection.on('connected', function() {
  alert('Connected, that was easy');
})

bc[ruby]. ably = Ably::Realtime.new('{{API_KEY}}')
ably.connection.on(:connected) do |message|
  puts "Connected, that was easy"
end

bc[java]. import io.ably.lib.realtime;
AblyRealtime ably = new AblyRealtime("{{API_KEY}}");
ably.connection.on('connected', new ConnectionStateListener() {
  @Override
  public void onConnectionStateChanged(ConnectionStateChange change) {
    System.out.println("Connected, that was easy");
  }
});

h2(#connection-state-explained). Connection state explained

Although connection state is temporary, the Ably protocol provides continuity of message delivery between the client and the service, provided that a dropped connection is reestablished by the client within a limited interval (typically around 2 minutes). Beyond that, the connection becomes stale and the system will not attempt to recover the connection state. The lifecycle of a connection, and the strategy for reconnecting on failure, reflect the transient nature of the connection state.

The client library is responsible for managing the connection; this includes selecting a transport (in those environments supporting multiple transports), selecting a host to connect to (automatically falling back to an alternate data centre host if the closest data centre is unreachable), and managing continuity of operation when the connection drops.

When the library is instanced, if connectivity to the service is available, the library will establish a connection immediately, and if the connection drops at any time it will attempt to re-establish it by making repeated connection attempts every 15 seconds for up to two minutes.

If, after that time, there has been no connection, the library falls back to a lower level of activity, still periodically attempting reconnection at 30 second intervals. This reflects the assumption that there will no longer be recoverable connection state and the client may be offline for a period of time. As soon as a reconnection attempt has been successful, the system reverts to the more active connection behaviour. Further, you can explicitly trigger a reconnection attempt at any time if you wish to implement a different reconnection strategy.

The connection object provides methods to observe the lifecycle of the connection and to trigger state transitions.

h3(#connection-states). Available connection states

A series of connection states is defined as follows:

- initialised := A connection object having this state has been initialised but no connection has yet been attempted.

- connecting := A connection attempt has been initiated. The connecting state is entered as soon as the library has completed initialisation, and is reentered each time connection is re-attempted following disconnection.

- connected := A connection exists and is active.

- disconnected := A temporary failure condition. No current connection exists because there is no network connectivity or no host is available.<br><br>The disconnected state is entered if an established connection is dropped, or if a connection attempt was unsuccessful. In the disconnected state the library will periodically attempt to open a new connection (approximately every 15 seconds), anticipating that the connection will be re-established soon and thus connection and channel continuity will be possible. <br><br>In this state, developers can continue to publish messages as they are automatically placed in a local queue, and sent as soon as a connection is established. <br>Messages published by other clients to the Ably service, whilst this client is disconnected, are queued and delivered to this client upon reconnection, so long as the connection is resumed within 2 minutes. <br><br>If connection state recovery is not possible following a new connection being established, all channels are detached, thus ensuring the developer is made aware that continuity on the channel was not possible. The developer is then responsible for reattaching channels and recovering state, if required, using the "history API":/realtime/history.

- suspended := A long term failure condition. No current connection exists because there is no network connectivity or no host is available.<br><br>The suspended state is entered after a failed connection attempt if there has then been no connection for a period of two minutes. In the suspended state, the library will periodically attempt to open a new connection every 30 seconds. Developers are unable to publish messages in this state. A new connection attempt can also be triggered by an explicit call to <span lang="default">"@connect()@":#connect</span><span lang="ruby">"@connect@":#connect</span> on the @Connection@ object.

- closing := An explicit request by the developer to close the connection has been sent to the Ably service. If a reply is not received from Ably within a short period of time, the connection will be forcibly terminated and the connection state will become @closed@.

- closed := The connection has been explicitly closed by the client.<br><br>In the closed state, no reconnection attempts are made automatically by the library, and clients may not publish messages. No connection state is preserved by the service or by the library. A new connection attempt can be triggered by an explicit call to <span lang="default">"@connect()@":#connect</span><span lang="ruby">"@connect@":#connect</span> on the @Connection@ object, which will result in a new connection.

- failed := An indefinite failure condition. This state is entered if a connection error has been received from the Ably service (such as an attempt to connect with invalid credentials). A failed state may also be triggered by the client library directly as a result of some local permanent error.<br><br>In the failed state, no reconnection attempts are made automatically by the library, and clients may not publish messages. A new connection attempt can be triggered by an explicit call to <span lang="default">"@connect()@":#connect</span><span lang="ruby">"@connect@":#connect</span> on the @Connection@ object.

h4. Typical connection state sequences

The library is initialised and initiates a successful connection.

bq. initialised &rarr; connecting &rarr; connected

An existing connection is dropped and reestablished on the first attempt.

bq. connected &rarr; disconnected &rarr; connecting &rarr; connected

An existing connection is dropped, and reestablished after several attempts but within a two minute interval.

bq. connected &rarr; disconnected &rarr; connecting &rarr; disconnected &rarr; &hellip; &rarr; connecting &rarr; connected

There is no connection established after initialising the library.

bq. initialised &rarr; connecting &rarr; disconnected &rarr; connecting &rarr; &hellip; &rarr; suspended

After a period of being offline a connection is reestablished.

bq. suspended &rarr; connecting &rarr; suspended &rarr; &hellip; &rarr; connecting &rarr; connected

h4. Listening for state changes

The @Connection@ object is an @EventEmitter@ and emits an event whose name is the new state whenever there is a connection state change. <span lang="default">An event listener function is passed a "ConnectionStateChange":#connection-state-change object as the first argument for state change events.</span><span lang="ruby">The event block is passed the new state and an optional "@ErrorInfo@":/realtime/types#error-info object</span>

blang[javascript,nodejs].
  ```[javascript,nodejs]
    realtime.connection.on('connected', function(stateChange) {
      console.log('Ably is connected');
    });
  ```

  Alternatively a listener may be registered so that it receives all state change events.

  ```[javascript,nodejs]
    realtime.connection.on(function(stateChange) {
      console.log('New connection state is ' + stateChange.current);
    });
  ```

  Previously registered listeners can be removed individually or all together.

  ```[javascript,nodejs]
    /* remove a listener registered for a single event */
    realtime.connection.off('connected', myListener);

    /* remove a listener registered for all events */
    realtime.connection.off(myListener);

    /* remove all event listeners */
    realtime.connection.off();
  ```

blang[java].
  ```[java]
    realtime.connection.on('connected', new ConnectionStateListener() {
      @Override
      public void onConnectionStateChanged(ConnectionStateChange change) {
        System.out.println("New state is connected");
      }
    });
  ```

  Alternatively a listener may be registered so that it receives all state change events.

  ```[java]
    realtime.connection.on(new ConnectionStateListener() {
      @Override
      public void onConnectionStateChanged(ConnectionStateChange change) {
        System.out.println("New state is " + change.current.name());
      }
    });
  ```

  Previously registered listeners can be removed individually or all together.

  ```[java]
    /* remove a single listener */
    realtime.connection.off(myListener);

    /* remove all event listeners */
    realtime.connection.off();
  ```

blang[ruby].
  ```[ruby]
    realtime.connection.on(:connected) do
      puts 'Ably is connected'
    end
  ```

  Alternatively a listener may be registered so that it receives all state change events.

  ```[ruby]
    realtime.connection.on do |state|
      puts "New connection state is #{state}"
    end
  ```

  Previously registered listeners can be removed individually or all together.

  ```[ruby]
    # remove a listener registered for a single even
    realtime.connection.off :connected, &block

    # remove a listener registered for all events
    realtime.connection.off &block

    # remove all event listeners
    realtime.connection.off
  ```

h3(#connection-state-recovery). Connection state recovery

The Ably system preserves connection state to allow connections to continue transparently across brief disconnections. The connection state that is tracked includes the messages sent to the client on the connection, members present on a channel and the set of channels that the client is attached to.

There are two modes of connection state recovery:

* @resume@: this is transparent recovery of a live client instance across disconnections. Upon disconnection, the library will automatically re-attempt connection and, once the connection is re-established, any missed messages will be sent to the client. The developer does not need to do anything to trigger this behaviour; all client channel event listeners remain attached and are called when the backlog of messages is received.

* @recover@: this addresses the case in which a new client library instance wishes to connect and recover the state of an earlier connection. This occurs typically in a browser environment when the page has been refreshed and therefore the client instance is disposed and no client state is retained. In this case any message listeners associated with channels will no longer exist so it is not possible for the library simply to send the message backlog on reconnection; instead the client must re-subscribe to each channel it is interested in, and its message listener(s) will be called with any message backlog for that channel. A client requests recovery of connection state by including a recovery string in the "client options":/realtime/usage#client-options when instancing the Realtime library.  See "connection state recover options":#connection-state-recover-options for more info.

In either case, when a connection is resumed or recovered, the message backlog held on the server will be pushed to the client. However, any new messages published will be sent as they become available or messages could be indefinitely deferred on very heavily loaded connections. Therefore the system does not guarantee that messages received after reconnection are delivered in the same order that would have occurred if the connection had not been dropped. In the @recover@ case, in particular, the order of the message delivery depends on the timing of the re-attachment of each channel.

h4(#connection-state-recover-options). Connection state recover options

In @recover@ mode it is necessary to request recovery mode in the "client options":/realtime/usage#client-options when instancing the library. Recovery requires that the library knows the most previous connection's <span lang="default">"@recoveryKey@":#recovery-key</span><span lang="ruby">"@recovery_key@":#recovery-key</span> value, which includes both the private unique "@Connection#key@":#key and the last message serial received on that connection. As the recovery key is never shared with any other clients, it allows Ably to safely resend message backlogs to the original client.

blang[javascript].
  In the browser environment a @window close@ event causes those parameters to be saved in a cookie; a client can then request recovery simply by including @recover: true@ in the initialisation options.

  Alternatively, if it is necessary to be explicit about the connection @recoveryKey@ - for example if there are multiple tabs and the cookies would conflict, or if third-party cookies are disabled - the connection can be recovered by providing the last value of the connection's @recoverKey@ value in the "client options":/realtime/usage#client-options @recover@ attribute when instancing the library.

Connection recovery requires that the new client library instance uses credentials that are compatible with those used for the inherited connection; this requires that the same authentication mode is used, with the same key. If token auth was used, the same token is not required, but the token used must have the same @capability@ and <span lang="default">@clientId@</span><span lang="ruby">@client_id@</span>. This ensures that the client recovering the connection cannot receive a backlog of messages that its new credentials are not entitled to access. Incompatible credentials will result in an unrecoverable connection error.

h1. Connection API reference

h2(#members).
  default: Connection Properties
  ruby: Ably::Realtime::Connection Attributes
  java: io.ably.lib.realtime.Connection Members

The @Connection@ object exposes the following public <span lang="default">properties</span><span lang="ruby">attributes</span><span lang="java">members</span>.

h6(#id). id

A unique public identifier @String@ for this connection, used to identify this member in presence events and messages.

h6(#error-reason).
  default: errorReason
  ruby:    error_reason

When a connection failure occurs this <span lang="default,ruby">attribute</span><span lang="java">member</span><span lang="javascript,nodejs">property</span> contains the <span lang="javascript,nodejs">"@ErrorInfo@":/realtime/types#error-info</span><span lang="java,ruby">"@AblyException@":/realtime/types#ably-exception</span>.

h6(#key). key

A unique private connection key @String@ used to recover or resume a connection, assigned by Ably. When recovering a connection explicitly, the <span lang="default">@recoveryKey@</span><span lang="ruby">@recovery_key@</span> is used in the @recover@ "client options":/realtime/usage#client-options as it contains both the @key@ and the last message @serial@.

h6(#recovery-key).
  default: recoveryKey
  ruby:    recovery_key

The recovery key @String@ can be used by another client to recover this connection's state in the @recover@ "client options":/realtime/usage#client-options <span lang="default">property</span><span lang="java">member</span><span lang="ruby">attribute</span>. See "connection state recover options":#connection-state-recover-options for more information.

h6(#serial). serial

The serial number @Integer@ of the last message to be received on this connection, used automatically by the library when recovering or resuming a connection. When recovering a connection explicitly, the <span lang="default">@recoveryKey@</span><span lang="ruby">@recovery_key@</span> is used in the @recover@ "client options":/realtime/usage#client-options as it contains both the @key@ and the last message @serial@.

h6(#state). state

The current <span lang="java">"@io.ably.lib.realtime.ConnectionState@":#connection-state @state@</span><span lang="ruby">"@Ably::Realtime::Connection::STATE@":#connection-state @state@</span><span lang="default">@state String@</span> of this Connection. See the "@Connection@ states":#connection-states for more information.


h2(#methods).
  default: Connection Methods
  ruby: Ably::Realtime::Connection Methods
  java: io.ably.lib.realtime.Connection Methods

h6(#connect). connect

bq(definition).
  default: connect()
  ruby:    "Deferrable":/realtime/types#deferrable connect -> yields "@Connection@":/realtime/connection
  java:    public void connect()

Explicitly calling @connect@ is unnecessary unless the "@ClientOption@":#client-option <span lang="default">@connectAutomatically@</span><span lang="ruby">@connect_automatically@</span> is disabled. Unless already @connected@ or @connecting@, this method causes the connection to open, entering the @connecting@ state.

blang[ruby].
  h4. Returns

  A "@Deferrable@":/realtime/types#deferrable object is returned from this method.

  On successfully connecting to Ably, the registered success callbacks for the "@Deferrable@":/realtime/types#deferrable and any block provided to this method yields a "@Connection@":/realtime/connection object.

  Failure to connect will trigger the errback callbacks of the "@Deferrable@":/realtime/types#deferrable with an "@ErrorInfo@":#error-info object containing an error response as defined in the "REST API":/rest-api#common documentation.

h6(#close). close

bq(definition).
  default: close()
  ruby:    "Deferrable":/realtime/types#deferrable close -> yields "@Connection@":/realtime/connection
  java:    public void close()

Causes the connection to close, entering the @closing@ state. Once @closed@, the library will not attempt to re-establish the connection without an explicit call to <span lang="default">"@connect()@":#connect</span><span lang="ruby">"@connect@":#connect</span>.

blang[ruby].
  h4. Returns

  A "@Deferrable@":/realtime/types#deferrable object is returned from this method.

  On successfully closing the connection, the registered success callbacks for the "@Deferrable@":/realtime/types#deferrable and any block provided to this method yields a "@Connection@":/realtime/connection object.

  Failure to close the connection will trigger the errback callbacks of the "@Deferrable@":/realtime/types#deferrable with an "@ErrorInfo@":#error-info object containing an error response as defined in the "REST API":/rest-api#common documentation.

h6(#on). on

There are two overloaded versions of this method:

bq(definition#on-listener).
  default:  on(callback("ConnectionStateChange":#connection-state-change))
  java:     public void on("ConnectionStateListener":#connection-state-listener listener)
  ruby:     on → yields "ConnectionStateChange":#connection-state-change

Subscribe to messages on this channel. The caller supplies <span lang="default">a listener function</span><span lang="java">an implementation of the "MessageListener":#message-listener interface</span><span lang="ruby">a block</span>, which is called each time one or more messages arrives on the channel.

bq(definition#on-event-listener).
  default: subscribe(name, callback("Message":/realtime/types#message))
  java:    public void subscribe(String name, "MessageListener":#message-listener listener)
  ruby:    subscribe(name) → yields "Message":/realtime/types#message

Subscribe to messages with a given event @name@ on this channel. The caller supplies <span lang="default">a listener function</span><span lang="java">an implementation of the "MessageListener":#message-listener interface</span><span lang="ruby">a block</span>, which is called each time one or more matching messages arrives on the channel.

bq(definition#subscribe-event-array).
  default: subscribe(names, callback("Message":/realtime/types#message))
  java:    public void subscribe(String[] names, "MessageListener":#message-listener listener)
  ruby:    subscribe(*name) → yields "Message":/realtime/types#message

Subscribe a single listener to messages on this channel for multiple event @name@ values.

h4. Parameters

- String name := The event name to subscribe to

- String[] names := An array of event names to subscribe to

- <div lang="javascript,nodejs">callback</div> := is a function of the form @callback(message)@ to be called for each message
- <div lang="java">"MessageListener":#message-listener listener</div> := Message listener to be notified for matching messages
- <div lang="ruby">&block</div> := yields each matching message when received on the channel

h6(#ping). ping

bq(definition).
  default: ping(callback("ErrorInfo":/realtime/types#error-info err))
  java:    public void ping("CompletionListener":#completion-listener listener)

When connected, sends a heartbeat ping to the Ably server and <span lang="default">executes the callback</span><span lang="java">calls the listener</span><span lang="ruby">yields the elapsed time in milliseconds</span> when a heartbeat ping request is echoed from the server. This can be useful for measuring true roundtrip latency to the connected Ably server.

blang[ruby].
  h4. Returns

  A "@Deferrable@":/realtime/types#deferrable object is returned from this method.

  On successfully echoing a heartbeat from Ably, the registered success callbacks for the "@Deferrable@":/realtime/types#deferrable and any block provided to this method yields an Integer representing the time in milliseconds for the heartbeat ping request to be echoed.

  Failure to receive a heartbeat ping will trigger the errback callbacks of the "@Deferrable@":/realtime/types#deferrable with an "@ErrorInfo@":#error-info object containing an error response as defined in the "REST API":/rest-api#common documentation.

h2(#related-types).
  java,javascript,nodejs, ruby: Related types

h3(#completion-listener).
  java:   io.ably.lib.realtime.CompletionListener

blang[java].
  <%= partial 'types/_completion_listener', indent: 2, skip_first_indent: true %>

h3(#connection-state).
  ruby:   Connection::STATE enum
  java:   io.ably.lib.realtime.ConnectionState enum

<%= partial 'types/_connection_state' %>

h3(#connection-state-change).
  javascript,nodejs:    ConnectionStateChange Object
  java:                 ConnectionStateChange
  ruby:                 ConnectionStateChange

blang[java,javascript,nodejs,ruby].
  <%= partial 'types/_connection_state_change', indent: 2, skip_first_indent: true %>

h3(#connection-state-listener).
  java:                 ConnectionStateListener

blang[java].
  <%= partial 'types/_connection_state_listener', indent: 2, skip_first_indent: true %>

&nbsp;
