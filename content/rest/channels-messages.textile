---
title: Channels and Messages
section: rest
index: 20
jump_to:
  Help with:
    - Getting started#getting-started
    - Channels#channels
    - Channel namespaces
    - Subscribing to messages#message-subscription
    - Publishing messages#message-publish
    - Retrieving message history#message-history
  Channel API properties:
    - name
    - presence
  Channel API methods:
    - publish
    - history
---

The Ably Realtime service organises the message traffic within applications into named channels. Channels are the "unit" of message distribution; clients attach to channels to subscribe to messages, and every message published to a unique channel is broadcast by Ably to all subscribers. This scalable and resilient messaging pattern is commonly called "pub/sub":https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern.

h2(#getting-started). Getting started

The Ably REST client library provides a straightforward API for publishing and retrieve history messages on a channel.

```[javascript](code-editor:rest/channel-history)
  var rest = new Ably.Rest('{{API_KEY}}');
  var channel = rest.channels.get('{{RANDOM_CHANNEL_NAME}}');
  channel.publish('example', 'message data', function() {
    channel.history(function(err, resultPage) {
      console.log('Last published message:' + resultPage.items[0]);
    });
  });
```

```[nodejs](code-editor:rest/channel-history)
  var rest = new Ably.Rest('{{API_KEY}}');
  var channel = rest.channels.get('{{RANDOM_CHANNEL_NAME}}');
  channel.publish('example', 'message data', function() {
    channel.history(function(err, resultPage) {
      console.log('Last published message:' + resultPage.items[0]);
    });
  });
```

```[ruby]
  realtime = Ably::Rest.new('{{API_KEY}}')
  channel = rest.channels.get('{{RANDOM_CHANNEL_NAME}}')
  channel.publish 'example', 'message data'
  result_page = channel.history()
  puts "Last published message: #{result_page.items.first}"
```

```[java]
  AblyRest rest = new AblyRest("{{API_KEY}}");
  Channel channel = rest.channels.get("{{RANDOM_CHANNEL_NAME}}");
  channel.publish("example", "message data");
  PaginatedResult<Message> resultPage = channel.history(null);
  System.out.println("Last published message ID: " + resultPage.items[0].id);
```

h2(#channels). Channels

In order to publish, retrieve message history or access presence history, you must first obtain a REST channel instance.

h3. Obtaining a channel instance

A @Channel@ object is a reference to a single channel. A channel instance is obtained from the "@channels@ collection":/rest/usage/#channels of the <span lang="ruby">@Rest::Client@</span><span lang="default">@Rest@</span> instance, and is uniquely identified by its unicode string name. Find out more about "channel naming":https://support.ably.io/solution/articles/3000046824-what-restrictions-exist-for-the-name-field-of-a-channel

bc[jsall]. var channel = realtime.channels.get('channelName');

bc[java]. Channel channel = realtime.channels.get("channelName");

bc[ruby]. channel = realtime.channels.get('channelName')

To find out more about subscribing to messages published on channels in realtime, see the "Realtime channel API":/realtime/channels-messages.

h4. Setting channel options and encryption

A set of "channel options":#channel-options may also be passed to configure a channel for encryption. Find out more about "symmetrical message encryption":/rest/encryption.

bc[jsall]. Crypto.generateRandomKey(function(err, key) {
  var options = { cipher: { key: key } };
  var channel = rest.channels.get('channelName', options);
});

bc[java]. CipherParams params = Crypto.getDefaultParams(key);
ChannelOptions options = new ChannelOptions();
options.cipher = params;
Channel channel = rest.channels.get("channelName", channelOpts);

bc[ruby]. key = Ably::Util::Crypto.generate_random_key
options = { cipher: { key: key } }
channel = rest.channels.get('channelName', options)

h3. Channel namespaces

<%= partial 'realtime/_channel_namespaces' %>

h2. Messages

Each message published has an optional event @name@ <span lang="default">property</span><span lang="java">member</span><span lang="ruby">attribute</span> and a @data@ <span lang="default">property</span><span lang="java">member</span><span lang="ruby">attribute</span> carrying the payload of the message. Various primitive and object types are portably defined and supported in all clients, enabling clients to be interoperable despite being hosted in different languages or environments.

The supported payload types are Strings, JSON objects and arrays, buffers containing arbitrary binary data, and Null objects. Client libraries detect the supplied message payload and encode the message appropriately.

h3(#message-subscription). Subscribing to messages

The @name@ <span lang="default">property</span><span lang="java">member</span><span lang="ruby">attribute</span> of published messages does not affect the distribution of a channel message to clients but may be used as a subscription filter, allowing a client to register a listener that only sees a subset of the messages received on the channel. When subscribing, a message listener can subscribe to see all messages on the channel or only a subset whose name matches a given @name@ string.

Find out more about "subscribing to messages using the Realtime API":/realtime/channels-messages#message-subscription.

h3(#message-publish). Publishing messages

Channels expose a @publish@ method whereby a client can publish either a single message or an array of messages to a channel using the "REST API":/rest-api.

bc[jsall](code-editor:realtime/channel). channel.publish('event', 'This is my payload', function(err) {
  if(err) {
    console.log('Unable to publish message; err = ' + err.message);
  } else {
    console.log('Message successfully sent');
  }
});

bc[ruby]. channel.publish('event', 'This is my payload')

bc[java]. channel.publish("event", "This is my payload");

h3(#message-history). Retrieving message history

Channels expose a "@history@":#history method providing a means for clients to obtain messages previously sent on the channel. Channel history can be used to return continuous message history up to the exact point a realtime channel was attached.

History provides access to instantaneous "live" history as well as the longer term persisted history for attached channels. If "persisted history":/rest/history#persisted-history is enabled for the channel, then messages will "typically be stored for 24 - 72 hours":https://support.ably.io/solution/articles/3000030059-how-long-are-messages-stored-for. If persisted history is not enabled, Ably retains the last two minutes of message history in memory.

The following example retrieves the first two pages of historical messages published up until the point the channel was attached.

bc[jsall]. channel.history(function(err, resultPage) {
  if(err) {
    console.log('Unable to get channel history; err = ' + err.message);
  } else {
    console.log(resultPage.items.length + ' messages received in first page');
    if(resultPage.hasNext()) {
      resultPage.next(function(err, nextPage) { ... });
    }
  }
});

bc[java]. PaginatedResult<Message> resultPage = channel.history(null);
System.out.println(resultPage.items().length + " messages received in first page");
if(resultPage.hasNext()) {
  PaginatedResult<Message> nextPage = resultPage.next();
  System.out.println(nextPage.items().length + " messages received in second page");
}

bc[ruby]. result_page = channel.history
puts "#{result_page.items.length} messages received in first page"
if result_page.has_next?
  next_page = result_page.next
  puts "#{next_page.items.length} messages received in second page"
end

See the "history":/rest/history documentation for further details of the supported query parameters.

h2. Presence

Channels expose a @presence@ member which a client can use to obtain channel presence information and to enter and leave the presence channel itself. See the "presence":/rest/presence documentation for details.

h1. Channel API Reference

inline-toc.
  Channels and messages reference:
    - Methods:
      - publish(name, data)#publish-data
      - publish(message)#publish-msg
      - publish(messages)#publish-msg-array
      - history()#history
    - Members:
      - name#members
      - presence#members
    - Related types:
      - Message#message
      - MessageListener#message-listener
      - CompletionListener#completion-listener
      - ChannelOptions#channel-options

h2. Methods

h6(#publish). publish

bq(definition).
  nodejs: channel.publish(event, data, callback)
  ruby:   channel.publish(event, data) → success
  java:   channel.publish(String event, Object data) → Boolean success

This call queries the REST "@channels/<channel id>/publish@":/rest-api#publish API.

h4. Parameters

- event := the name of the event to publish
- data := the message payload
- <div lang="nodejs">callback</div> := is a function of the form: @callback(err, result)@
where:
<ul>
<li>@err@ contains an error value on the case of an error response as defined in the "REST API":/rest-api#common documentation</li>
<li>On success, @result@ contains the object returned in the response body, which may be empty.</li>
</ul>

<div lang="ruby,java">
h4. Returns

Returns @true@ if successful.  Failure to publish will raise an exception - typical publishing exceptions include:

  <div lang="ruby">

* @Ably::NetworkUnavailableException@
* @Ably::QuotaExceededException@
* @Ably::AuthenticationFailureException@
  </div>
  <div lang="java">

* @Ably.NetworkUnavailableException@
* @Ably.QuotaExceededException@
* @Ably.AuthenticationFailureException@
  </div>

</div>

h6(#history). history

bq(definition).
  nodejs: channel.history(params, callback)
  ruby:   channel.history(options) → json_result
  java:   public PaginatedResult&lt;Message&gt; history(Param[] params)

Get message history for this channel.

h4. Parameters

- params := an optional object containing the query parameters, as specified in the "history":/realtime/history API documentation.
- <div lang="jsall">callback</div> := is a function of the form: @callback(err, messages, relParams)@
where:
<ul>
<li>@err@ contains an error value on the case of an error response as defined in the "REST API":/rest-api#common documentation</li>
<li>on success, @messages@ contains the query result as an array of Message objects.</li>
<li>where applicable, @relParams@ is a map containing query params for each of the pagination links in the query response (see below).</li>
</ul>

Further details of the supported query params are in the "history API":/rest/history documentation.

<div lang="java">
h4. Returns

On success, the returned "PaginatedResult":#paginated-result encapsulates a collection of @Message@ objects corresponding to the current page of results, and also provides query parameters for any applicable related (eg @first@ or @next@ result pages).

Failure to retrieve the history will raise an @AblyException@.

</div>

<div lang="ruby">
h4. Returns

On success, <span lang="ruby">@json_result@</span> contains an array of results whose type corresponds to the result type for the request granularity as specified in "REST API":/rest-api/#message-history.

Example <span lang="ruby">@json_result@</span>:

bc[json]. [{
  "name": "<event name>",
  "channel": "<channel id>",
  "data": "<message payload>",
  "timestamp": "<message timestamp>"
}]

Failure to retrieve the history will raise an exception - typical exceptions include:
  <div lang="ruby">

* @Ably::NetworkUnavailableException@
* @Ably::QuotaExceededException@
* @Ably::AuthenticationFailureException@
  </div>

</div>

<div lang="jsall">

h4. Pagination

A paginated result is indicated in the @relParams@ callback argument. For each available link, @relParams@ contains a map of params to pass to a subsequent @history()@ call.
  Example @relParams@:
  <pre lang="json"><code>[{
    "first": {"start": 1380794880000, "end": 138079488105, ...},
    "current": {"start": 1380794880000, "end": 138079488105, ...},
    "next": {"start": 1380794880000, "end": 138079488105, ...}
  }]</code></pre>

Further details of the paginated response are in the "history API":/realtime/history documentation.
</div>

h6(#presence). presence

bq(definition).
  nodejs: channel.presence(options, callback)
  ruby:   channel.presence(options) → json_result
  java:   channel.presence(OptionsHash options) → JSONResult

This call queries the REST "@channels/<channel id>/presence@":/rest-api#channel-presence API.

h4. Parameters

- options := an optional object containing the query parameters, as specified in the "REST API":/rest-api#channel-presence.
- <div lang="nodejs">callback</div> := is a function of the form: @callback(err, result)@
where:
<ul>
<li>@err@ contains an error value on the case of an error response as defined in the "REST API":/rest-api#common documentation</li>
<li>On success, @result@ contains an array of results whose type corresponds to the result type for the request granularity as specified in "REST API":/rest-api#channel-presence.
  Example @result@:
  <pre lang="json"><code>[{
    "an example": "<needs to be inserted here>",
    "illustrating": "<a simple presence result>"
  }]</code></pre>
</li>
</ul>

<div lang="ruby,java">
h4. Returns

On success, <span lang="ruby">@json_result@</span><span lang="java">@JSONResult@</span> contains an array representing each client present on the channel as specified in "REST API":/rest-api#channel-presence.

Example <span lang="ruby">@json_result@</span><span lang="java">@JSONResult@</span>:

bc[json]. [{
    "an example": "<needs to be inserted here>",
    "illustrating": "<a simple presence result>"
  }]

Failure to retrieve the presence will raise an exception - typical exceptions include:
  <div lang="ruby">

* @Ably::NetworkUnavailableException@
* @Ably::QuotaExceededException@
* @Ably::AuthenticationFailureException@
  </div>
  <div lang="java">

* @Ably.NetworkUnavailableException@
* @Ably.QuotaExceededException@
* @Ably.AuthenticationFailureException@
  </div>

</div>

h2(#message). Message

A @Message@ encapsulates an individual message sent or received in Ably. A message has the following members.

- <span lang="java">String</span>name := The event name for the message. The name may be used to allow listeners to subscribed selectively for only a subset of the messages on the channel.

- <span lang="java">Object</span>data := The payload of the message. The data may be one of the supported payload datatypes.

- <span lang="java">String</span>clientId := The clientId of the client that published the message. This <span lang="default">property</span><span lang="java">field</span> is populated by the system, where the clientId is known, for messages delivered to subscribers. It is not required to populate the clientId of a message before publishing it.

- <span lang="java">long</span>timestamp := The system timestamp of the message, in milliseconds since the epoch. This <span lang="default">property</span><span lang="java">field</span> is populated by the system for messages delivered to subscribers. It is not required to populate the timestamp of a message before publishing it.

h2(#channel-options). ChannelOptions

A @ChannelOptions@ may optionally be specified when instancing a Channel, and this may be used to specify channel-specific options.

Currently the only supported channel options are encryption-related.

- <span lang="java">public boolean</span>encrypted := Requests encryption for this channel.

- <span lang="java">public Object</span>cipherParams := Specifies encryption-related parameters (such as algorithm, chaining mode, key length and key). Default cipher params for the implementation may be obtained by calling @Crypto.getDefaultParams()@.

<div lang="java">
h2(#paginated-result). PaginatedResult

A @PaginatedResult@ is an interface that represents the result of a query that supports pagination. An instance of @PaginatedResult@ encapsulates a collection of @Message@ objects representing the current page of results, and provides the means - in the form of @Param[]@ to perform queries for subsequent or related pages.

- public Message[] asArray() := Returns the current page of results as an Array.
- public List&lt;Message&gt; := Returns the current page of results as a List.
- public Param[] getFirst() := Returns the params to pass to a @history()@ call to reproduce the first call in this paginated sequence.
- public Param[] getCurrent() := Returns the params to pass to a @history()@ call to reproduce the current call in this paginated sequence.
- public Param[] getNext() := Returns the params to pass to a @history()@ call to reproduce the next call in this paginated sequence.

</div>
