To start using Ably in your Android app, you need to include the Ably Client library. We recommend that you include the latest client library via Gradle in your module-level @gradle.build@ file.

```[groovy]
apply plugin: 'com.android.application'
...
dependencies {
    ...
    compile 'io.ably:ably-android:1.1.0'
}
```

In the above example a specific version of the library is referenced, you can always "check which is the latest stable version":https://bintray.com/ably-io/ably/ably-android and always use that.

After you add the necessary dependencies, you can import the @AblyRealtime@ class into your code and initialize it as shown below:

```[java]
import io.ably.lib.realtime.AblyRealtime;

public class MainActivity extends AppCompatActivity {

    public static final int SUCCESS = 0;
    public static final int FAILURE = 1;
    public static final int UPDATE_LOGS = 2;

    public static final String STEP_1 = "Initialize Ably";
    public static final String STEP_2 = "Activate Push";
    public static final String STEP_3 = "Subscribe Channels";
    public static final String STEP_4 = "Send Test Push";

    public static final String TEST_PUSH_CHANNEL_NAME = "test_push_channel";
    //Ensure that ngrok is setup, or modify xml/network_security_config.xml accordingly.
    private static final String PRIVATE_SERVER_AUTH_URL = 'YOUR SERVER URL' + "/auth";
    private AblyRealtime ablyRealtime;

    private String getClientId() {
        String clientId = Settings.Secure.getString(getContentResolver(), Settings.Secure.ANDROID_ID);
        return clientId;
    }

    private void initAblyRuntime() throws AblyException {
        ClientOptions options = new ClientOptions();
        options.environment = BuildConfig.ABLY_ENV;
        options.key = BuildConfig.ABLY_KEY;
        //Token auth via server
        options.authUrl = PRIVATE_SERVER_AUTH_URL;
        options.authParams = new Param[]{new Param("clientId", getClientId())};

        ablyRealtime = new AblyRealtime(options);
        ablyRealtime.setAndroidContext(getApplicationContext());
        ablyRealtime.connect();
        ablyRealtime.connection.on(new ConnectionStateListener() {
            @Override
            public void onConnectionStateChanged(ConnectionStateChange state) {
                logMessage("Connection state changed to : " + state.current.name());
                switch (state.current) {
                    case connected:
                        /* Perform device registration and subscription, this is described later in the tutorial */
                        break;
                    case disconnected:
                    case failed:
                        //handle failure
                        break;
                }
            }
        });
    }
}
```

Alternatively, you can add your API key in the @local.properties@ file in order to prevent the secret keys from being accidentally committed to the version control system that you use. Further, assign the @ably.env@ variable to either 'sandbox' or 'production' accordingly. However, storing API keys on the client side makes it prone to compromise and hence is "not recommended":/best-practice-guide#using-api-key-client-side.

<a href="/images/tutorials/android-push/android-code-2.png" target="_blank">
    <img src="/images/tutorials/android-push/android-code-2.png" style="width: 100%" alt="Setting local properties in the android app">
</a>