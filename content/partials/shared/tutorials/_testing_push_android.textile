Now that our app is ready, let's test it out. Before using any of these methods make sure you have built and run the app on a real Android device and accepted push notifications.

h3. a. Testing using Device ID

Add the following method to your @index.js@ file and replace "YOUR_DEVICE_ID" with the id you just retrieved from your console:

```[nodejs]
app.get('/push/device', function (req, res) {
  var recipient = {
    deviceId: 'YOUR_DEVICE_ID'
  };
  var notification = {
    notification: {
      title: 'Hello from Ably!'
    }
  };
  realtime.push.publish(recipient, notification, function(err) {
    if (err) {
      console.log('Unable to publish push notification; err = ' + err.message);
      return;
    }
    console.log('Push notification published');
    res.send("Push Sent");
  });
})
```

Restart the server and navigate to @YOUR-SERVER-URL/push/device@ in your browser. You should be able to receive a notification on your device as shown the image below.

<a href="/images/tutorials/android-push/android-push-screenshot.jpg" target="_blank">
	 <img src="/images/tutorials/android-push/android-push-screenshot.jpg" style="width: 50%; height: 50%" alt="Android Push Notification Screenshot">
</a>

h3. b. Testing using Client ID

We can test sending push notifications using the client ID. This allows us to push all devices with that client ID by adding the following code to your @index.js@ file:

```[nodejs]
app.get('/push/client', function (req, res) {
  var recipient = {
    clientId: 'iosPushClient'
  };
  var notification = {
    notification: {
      title: 'Hello from Ably!'
    }
  };
  realtime.push.publish(recipient, notification, function(err) {
    if (err) {
      console.log('Unable to publish push notification; err = ' + err.message);
      return;
    }
    console.log('Push notification published');
    res.send("Push Sent");
  });
})
```
Note: If your clientId is different make sure to replace the clientId specified in the recipient object above with that.

Restart the server and go to @YOUR-SERVER-URL/push/client@ you should receive a notification on your device as shown in the image below.

<a href="/images/tutorials/android-push/android-push-screenshot.jpg" target="_blank">
	 <img src="/images/tutorials/android-push/android-push-screenshot.jpg" style="width: 50%; height: 50%" alt="Android Push Notification Screenshot">
</a>

h3. c. Testing using Channels

Channel based Push Notifications allow us to push messages to a channel that the client on the device has subscribed to. To test this, add the following code to our @index.js@ file:

```[nodejs]
app.get('/push/channel', function (req, res) {
  var extras = {
    push: {
      notification: {
        title: 'Hello from Ably!',
        body: 'Example push notification from Ably.'
      },
      data: {
        foo: 'bar',
        baz: 'qux'
      }
    }
  };

  var channel = realtime.channels.get('push');
  channel.publish({ name: 'example', data: 'data', extras: extras }, function(err) {
    if (err) {
      console.log('Unable to publish message with push notification; err = ' + err.message);
      return;
    }
    console.log('Message with push notification published');
    res.send("Push Sent");
  });
})
```

Restart the server and go to @YOUR-SERVER-URL/push/channel@. You should receive a notification on your device. Notice how this notification has both a title and a body. You can do this on all three types of push notifications mentioned earlier, if you wish. Simply add a @body@ object to the notification part of your push payload. See the above code for an example of this.

<a href="/images/tutorials/android-push/android-push-screenshot.jpg" target="_blank">
	 <img src="/images/tutorials/android-push/android-push-screenshot.jpg" style="width: 50%; height: 50%" alt="Android Push Notification Screenshot">
</a>
