---
title: Glossary
meta_description: "A glossary of common terms used in Ably products and the Ably documentation."
meta_keywords: "glossary, terms, descriptions"
section: root
index: 50
jump_to:
---

The following are a list of terms found throughout the Ably documentation.

h2(#ably-hub). Ably Hub

The Ably Hub is an open marketplace for realtime data streams.

See the "Ably Hub documentation":/api-streamer/hub for further information.

h2(#amqp). AMQP

Advanced Message Queuing Protocol (AMQP) is a protocol that can be used to retrieve messages from a queue.

See "Wikipedia":https://en.wikipedia.org/wiki/Advanced_Message_Queuing_Protocol for further information.

h2(#api-key). API key

API keys are used to authenticate with Ably, either directly or through Ably tokens, token requests or a JWT. Each application will have at least one API key and each key can grant different capabilities and restrictions on its associated application. API keys contain three parts: the public app ID, the public app key ID (which combined form the API key ID) and the API key secret. API keys should be kept secret and only shared with trusted parties.

h2(#api-streamer). API Streamer

The API Streamer allows producers to host their realtime APIs using Ably channels and manage the subscription models. Consumers can then search the streams on the Ably Hub and subscribe to them.

See the "API Streamer documentation":/api-streamer for further information. 

h2(#apps). Apps

Apps (or applications) in the context of Ably are created in the dashboard. Each app has its own set of API keys and all channel and queue names are unique within that app.

h2(#batch-publishing). Batch publishing

Batch publishing is the process of publishing the same message to multiple channels, at the same time.

See the "batch publishing documentation":/rest-api/beta#batch for further information.

h2(#capabilities). Capabilities

Capabilities specify which operations can be carried out on which channels and queues, for example to allow only subscriptions to channels in the @finance:@ channel namespace. Capabilities are set on an API key and can also be defined as part of an Ably-compatible token during authentication, however the token capabilities cannot exceed those of the associated API key.

See the "capabilities documentation":/core-features/authentication/#capabilities-explained for further information

h2(#channels). Channels

Channels are used to logically separate messages into different topics. Clients attach to a channel to subscribe to the messages sent on them. When a publisher sends a message on a channel, all subscribers receive that message.

See the "channels documentation":/core-features/channels for further information

h2(#channel-namespaces). Channel namespaces

Channels can be grouped together using channel namespaces in the format @namespace:channel-name@. Channel namespaces allow for API keys to be restricted to a particular group of channels or channel rules to be set for the namespace, rather than for each individual channel.

See the "channel namespace documentation":/realtime/channels#channel-namespaces for further information.

h2(#connection). Connection

A connection to Ably is must be established and maintained for realtime communication. A connection has several connection states throughout the lifecycle of a connection, such as @connecting@, @connected@ and @suspended@.

See the "connection documentation":/realtime/connection for further information.

h2(#dashboard). Dashboard

The Ably dashboard is the user interface for managing applications, viewing statistics, creating API keys and setting up integrations and channel rules.

Access your Ably dashboard by "logging in":https://ably.com/login or "signing up":https://ably.com/sign-up.     

h2(#dead-letter). Dead letter queue

Dead letter queues store messages that have failed to be processed correctly or have expired. They are created when a queue is provisioned, with one dead letter queue per application, not per queue.

See the "dead letter queue documentation":/general/queues#deadletter for further information.

h2(#deltas). Deltas

Deltas (or delta compression) is a parameter that means a subscriber will only receive the difference between the present and previous message payload. It is used when there is a degree of similarity between successive messages.

See the "deltas documentation":/realtime/channels/channel-parameters/deltas for further information.

h2(#firehose). Firehose

Reactor Firehose is a feature that allows the realtime data published in Ably to be streamed directly into another streaming or queuing service such as Amazon Kinesis or Kafka.

See the "Firehose documentation":/general/firehose for further information.

h2(#idempotent). Idempotent

Idempotent REST publishing in the context of Ably ensures that if the same message is published more than once due to errors such as network connectivity failure, it will not result in duplicate messages.

See the "idempotent messages documentation":/rest/messages#idempotent for further information.

h2(#inband-occupancy). Inband channel occupancy

The inband channel occupancy feature allows a client to subscribe to occupancy events related to a channel. The events are then delivered to that client as messages on the channel.

See the "inband channel occupancy docuemtnation":/realtime/inband-occupancy for further information

h2(#iot). IoT

Internet of Things (IoT) is a term used to describe physical objects using software or sensors that are connected to the internet. Examples include smart meters, smart appliances and smart security systems.

See "Wikipedia":https://en.wikipedia.org/wiki/Internet_of_things for further information.

h2(#jwt). JWT

JSON Web Token (JWT) is an open standard for securely transmitting data. The contents of a JWT are in JSON format and can be verified by receiving parties because they are digitally signed. JWTs can be used for authenticating with Ably.

See "jwt.io":https://jwt.io/ for further information.

h2(#latency). Latency

Latency in the context of Ably can be measured by the time it takes for a message to be published in a channel on one connection and recevied in the channel by another connection. 

h2(#messages). Messages

Messages are how information is sent across the Ably platform. Messages are sent by publishers on a channel and received by all subscribers on a channel.

See the "messages documentation":/realtime/messages for further information.

h2(#metachannels). Metachannels

Metachannels are a group of channels that receive metadata related to connections, channels and messages. Examples of metachannels include a log channel that receives certain errors and the lifecycle of channels. All metachannels are in the reserved channel namespace @[meta]:@.

See the "metachannels documentation":/realtime/metachannels for further information.

h2(#mqtt). MQTT

Message Queuing Telemetry Transport (MQTT)) is a lightweight publish-subscribe protocol for minimal code implementations, or low bandwidth networks.

See "Wikipedia":https://en.wikipedia.org/wiki/MQTT for further information.

h2(#mqtt-adapter). MQTT Adapter

The Ably MQTT Adapter can translate between MQTT and the Ably protocol.

See the "MQTT Adapter documentation":https://ably.com/documentation/mqtt for further information.

h2(#presence). Presence

Presence enables clients in a channel to be aware of other presence members in the same channel. Each client has a presence state that is updated as a presence event when it changes, for example when they join or leave the channel.

See the "presence documentation":/realtime/presence for further information.

h2(#pub-sub). Pub/Sub

Publish-subscribe (or pub/sub), using Ably terms, is a format where publishers send messages to a channel with no knowledge of who the subscribers are. All subscribers on a channel receive the messages with no knowledge of who the publishers are. The ratio of publishers to subscribers can be M:N, across any number of channels.

h2(#publisher). Publisher

A publisher sends messages on a channel.

h2(#push-notifications). Push notifications

Push notifications are messages that are pushed to a device's user interface such as a visual notification. Ably can deliver push notifications using platforms such as Apple's Push Notification service or Google's Firebase Cloud Messaging service.

See the "push notification documentation":/realtime/push for further information.

h2(#queues). Queues

Reactor Queues store messages in the order they were produced and are retrieved by only a single consumer, as opposed to all subscribers when using publish-subscribe. Ably uses integration rules to publish messages received in a channel into a queue.

See the "queues documentation":/general/queues for further information.

h2(#realtime-sdk). Realtime client library SDK

The realtime client library SDKs are used to add persistent realtime connections to Ably within applications.

See the "SDK downloads page":https://ably.com/download for further information on SDKs and the available languages.

h2(#rest-sdk). REST client library SDK

The REST client library SDKs are used to add synchronous interface to Ably within applications.

See the "SDK downloads page":https://ably.com/download for further information on SDKs and the available languages.

h2(#rewind). Rewind

Rewind is a parameter that specifies a time interval or set number of messages to replay to a client when they attach to a channel. For example, if set to 5 then the client will receive the previous 5 messages on the channel at the point they attach to it.

See the "Rewind documentation":/realtime/channels/channel-parameters/rewind for further information.

h2(#sse). SSE

Server Sent Events (SSE) are where events are automatically pushed from a server to a client over an HTTP connection.

See the "SSE documentation":/sse for further information on using SSE with Ably.

h2(#stomp). STOMP

Simple (or Streaming) Text Orientated Messaging Protocol (STOMP) is a protocol that can be used to retrieve messages from a queue.

See "Wikipedia":https://en.wikipedia.org/wiki/Streaming_Text_Oriented_Messaging_Protocol for further information.

h2(#subscriber). Subscriber

A subscriber receives all messages on a channel.

h2(#webhooks). Webhooks

Webhooks are HTTP callbacks that are triggered by a specified event. Ably supports incoming and outbound webhooks. Incoming webhooks take data from an external application or service and publish it as messages on a channel. Outgoing webhooks notify an external application or service when a message or event is received.

See the "incoming webhook documentation":/general/incoming-webhooks or "outgoing webhook documentation":/general/events for further information.

h2(#websocket). WebSockets

WebSockets are a communication protocol. A WebSocket connection is established with Ably when the realtime client library is instanced. This connection is multiplexed, allowing multiple channels to share a single connection and allows realtime messages to be sent between Ably and the client.

See "Wikipedia":https://en.wikipedia.org/wiki/WebSocket for further information.