---
title: Glossary
meta_description: "A glossary of common terms used in Ably products and the Ably documentation."
meta_keywords: "glossary, terms, descriptions"
section: root
index: 50
jump_to:
---

h2(#ably-hub). Ably Hub

The Ably Hub is a service that supports the listing and discovery of realtime data streams.

See the "Ably Hub documentation":/api-streamer/hub for further information.

h2(#amqp). AMQP

Advanced Message Queuing Protocol (AMQP) is a protocol that can be used to retrieve messages from a queue.

See "Wikipedia":https://en.wikipedia.org/wiki/Advanced_Message_Queuing_Protocol for further information.

h2(#api-key). API key

API keys are used to authenticate with Ably, either directly or through Ably tokens, token requests or a JWT. Each application will have at least one API key and each key can confer different rights for access to channels and other resources within its associated application. API keys contain three parts: the public app ID, the public app key ID (which combined form the API key ID) and the API key secret. API keys should be kept secret and only shared with trusted parties.

h2(#api-streamer). API Streamer

The API Streamer allows producers to host their realtime streams using Ably channels and manage subscriptions to those streams. Using the Ably Hub, consumers can search for and discover streams to subscribe to.

See the "API Streamer documentation":/api-streamer for further information. 

h2(#apps). Apps

An app (or application) in the context of Ably is a grouping of channels and other resources that are managed as a collection. Each app has its own set of API keys and can have its own rules and queues. An app defines a "sandbox" or namespace of channel and queue names, so they are are unique within an app and access by a client is generally confined to a single app. An app is associated with a unique account.

h2(#batch-publishing). Batch publishing

Batch publishing is the process of making multiple publish requests as part of a single request. For example, a message can be published to multiple channels using a single request.

See the "batch publishing documentation":/rest-api/beta#batch for further information.

h2(#capability). Capability

A capability is an expression that defines a collection of resources. Each resource has a set of permitted operations, such as permission to subscribe to the @finance:@ channel namespace. Capabilities are used to define the rights associated with an authentication credential such as an API key or token, although the rights expressed by a capability for a token cannot exceed those of its associated API key. 

See the "capabilities documentation":/core-features/authentication/#capabilities-explained for further information

h2(#channels). Channels

Channels are used to logically separate messages into different topics. Clients subscribe to channels to receive the messages sent on them. When a publisher sends a message on a channel, all subscribers receive that message.

See the "channels documentation":/core-features/channels for further information

h2(#channel-namespaces). Channel namespaces

Channel namespaces provide a way for certain properties (such as persistence) to be assigned to a group of channels, rather than requiring them to be assigned to individual channels. The namespace is the first colon-delimited segment of a channel name, or the channel name itself if no colon exists. For example, the channels @finance@ and @finance:approvals@ would both be considered part of a @finance@ namespace.

See the "channel namespace documentation":/realtime/channels#channel-namespaces for further information.

h2(#connection). Connection

A connection to Ably is must be established and maintained for realtime communication. A connection has several connection states throughout the lifecycle of a connection, such as @connecting@, @connected@ and @suspended@.

See the "connection documentation":/realtime/connection for further information.

h2(#dashboard). Dashboard

The Ably dashboard is the user interface for managing applications, viewing statistics, creating API keys and setting up integrations and channel rules.

Access your Ably dashboard by "logging in":https://ably.com/login or "signing up":https://ably.com/sign-up.     

h2(#dead-letter). Dead letter queue

Dead letter queues store messages that were intended to be delivered to a queue, but have failed to be processed correctly. They are created when a queue is provisioned, with one dead letter queue per application, not per queue.

See the "dead letter queue documentation":/general/queues#deadletter for further information.

h2(#deltas). Deltas

Deltas (or delta compression) are a feature that enable a subscriber to only receive the difference between the payload of a message and its predecessor. They are used when there is a degree of similarity between successive messages.

See the "deltas documentation":/realtime/channels/channel-parameters/deltas for further information.

h2(#firehose). Firehose

Reactor Firehose is a feature that allows the realtime data published in Ably to be streamed directly into another streaming or queuing service such as Amazon Kinesis or Kafka.

See the "Firehose documentation":/general/firehose for further information.

h2(#idempotent). Idempotent

An idempotent operation is one whose effect is the same whether it is performed once or multiple times. In the context of Ably, idempotence ensures that retried publish attempts, such as in response to a network failure, do not result in duplicate messages being published.

See the "idempotent messages documentation":/rest/messages#idempotent for further information.

h2(#inband-occupancy). Inband channel occupancy

The inband channel occupancy feature allows a client to subscribe to occupancy events related to a channel. The events are then delivered to that client as messages on the channel.

See the "inband channel occupancy documentation":/realtime/inband-occupancy for further information

h2(#iot). IoT

Internet of Things (IoT) is a term used to describe physical objects using software or sensors that are connected to the internet. Examples include smart meters, smart appliances and smart security systems.

See "Wikipedia":https://en.wikipedia.org/wiki/Internet_of_things for further information.

h2(#jwt). JWT

JSON Web Token (JWT) is an open standard for securely representing claims transmitted between parties. The claims and metadata of a JWT are in JSON format and can be verified by recipients because they are cryptographically signed. JWTs can be used for authenticating with Ably.

See "jwt.io":https://jwt.io/ for further information.

h2(#latency). Latency

Latency is a measure of the delay between an operation being initiated and its effect. In the context of Ably, latency typically refers to the time it takes for a message to be published in a channel on one connection and received in the channel by another connection.

h2(#messages). Message

A message is the unit of information sent using the Ably platform. Messages are sent by publishers on a channel and received by all subscribers on a channel.

See the "messages documentation":/realtime/messages for further information.

h2(#metachannels). Metachannel

A metachannel is a channel that receives messages containing metadata or events relating to an application. Metachannels exist outside of regular channel namespaces and instead have their names qualified with @[meta]@, for example @[meta]log@ or @[meta]channel.lifecycle@.

See the "metachannels documentation":/realtime/metachannels for further information.

h2(#mqtt). MQTT

Message Queuing Telemetry Transport (MQTT)) is a lightweight publish-subscribe protocol for minimal code implementations, or low bandwidth networks.

See "Wikipedia":https://en.wikipedia.org/wiki/MQTT for further information.

h2(#mqtt-adapter). MQTT Adapter

The Ably MQTT Adapter can translate between MQTT and the Ably protocol.

See the "MQTT Adapter documentation":https://ably.com/documentation/mqtt for further information.

h2(#presence). Presence

Presence enables clients in a channel to be aware of other presence members in the same channel. Each client has a presence state that is updated as a presence event when it changes, such as when they join or leave the channel.

See the "presence documentation":/realtime/presence for further information.

h2(#pub-sub). Pub/Sub

Publish-subscribe (or pub/sub), using Ably terms, is a pattern of information exchange where a publisher does not need to interact directly with, or even know the existence or identities of, any subscribers. Conversely, a subscriber can gain access to published information without interacting directly with the publisher. The ratio of publishers to subscribers can be M:N, across any number of channels.

h2(#publisher). Publisher

A publisher is an entity that sends messages on one or more channels.

h2(#push-notification). Push notifications

Push notifications are messages that are pushed to a device's user interface such as a visual notification. Ably can deliver push notifications using platforms such as Apple's Push Notification service or Google's Firebase Cloud Messaging service.

See the "push notification documentation":/realtime/push for further information.

h2(#queues). Queues

Reactor Queues provide a service that distributes messages between subscribers, so that each message is only received by one subscriber. This model is referred to as "competing consumers" and is different to the pub/sub model where each message is delivered to every subscriber. Ably uses integration rules to publish messages received in a channel into a queue.

See the "queues documentation":/general/queues for further information.

h2(#realtime-sdk). Realtime client library SDK

The realtime client library SDKs are used to add long-lived realtime connections to Ably within applications.

See the "SDK downloads page":https://ably.com/download for further information on SDKs and the available languages.

h2(#rest-sdk). REST client library SDK

The REST client library SDKs provide an API to interact with the Ably REST (HTTP) interface.

See the "SDK downloads page":https://ably.com/download for further information on SDKs and the available languages.

h2(#rewind). Rewind

Rewind is a feature that enables a client to subscribe to a channel from a position earlier than the current point in time. The @rewind@ parameter can specify an earlier position as a time interval or set number of messages. When a client first attaches to a channel using rewind, all messages from that earlier position are replayed to them.

See the "Rewind documentation":/realtime/channels/channel-parameters/rewind for further information.

h2(#sse). SSE

Server Sent Events (SSE) is an HTTP-based protocol for streaming events from a server to a client. In the context of Ably, SSE can be used to establish a realtime subscription to a set of channels.

See the "SSE documentation":/sse for further information on using SSE with Ably.

h2(#stomp). STOMP

Simple (or Streaming) Text Orientated Messaging Protocol (STOMP) is a protocol that can be used to retrieve messages from a queue.

See "Wikipedia":https://en.wikipedia.org/wiki/Streaming_Text_Oriented_Messaging_Protocol for further information.

h2(#subscriber). Subscriber

A subscriber is an entity that establishes a realtime connection to Ably in order to receive messages on one or more channels.

h2(#webhooks). Webhooks

Webhooks are HTTP callbacks that are triggered by a specified event. Ably supports incoming and outbound webhooks. Incoming webhooks take data from an external application or service and publish it as messages on a channel. Outgoing webhooks notify an external application or service when a message or event is received.

See the "incoming webhook documentation":/general/incoming-webhooks or "outgoing webhook documentation":/general/events for further information.

h2(#websocket). WebSockets

WebSockets are a communication protocol. A WebSocket connection is established with Ably when the realtime client library is instanced. This connection is multiplexed, allowing multiple channels to share a single connection and allows realtime messages to be sent between Ably and the client.

See "Wikipedia":https://en.wikipedia.org/wiki/WebSocket for further information.