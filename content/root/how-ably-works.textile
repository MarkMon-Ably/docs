---
title: How Ably works
section: root
index: 20
jump_to:
  Concepts:
    - Channels
    - Authentication
    - Global routing
    - Connection state
    - Presence
---

Ably's global realtime service enables Internet enabled devices, such as a browser, phone, server or IoT sensor, to stream data in realtime between to any other Internet connected device in milliseconds. The Ably platform brings enterprise scale messaging to developers by delivering "100% service availability":http://support.ably.io/solution/articles/3000029531-100-uptime-guarantee, "message delivery guarantees":http://support.ably.io/solution/articles/3000044640-message-durability-and-qos-quality-of-service- and "low-latencies globally":http://support.ably.io/solution/articles/3000044625-round-trip-latency-and-performance (typically less than 60ms).

h2. Key concepts

At its simplest, Ably is a cloud-based "pub/sub":https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern Platform-as-a-Service ensuring any device publishing messages to Ably will be received in real time by any number of subscribing devices. But it is more than that. Ably makes it possible for developers to build apps and infrastructure that can communicate in realtime without the worries of managing scale, latency, data durability, integrity and storage, seamless connection recovery, device interopability, network outages, encryption, security and authentication, throttling, and denial of service attacks, to name a few.

In order to understand how Ably works, and why "pub/sub":https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern is only one part of the problem we solve for developers, we have have broken down the key concepts as follows:

h3(#channels). Channels

The Ably service organises the traffic within any application into named channels. Clients connected to Ably can either be publishers (they push messages with data to Ably), subscribers (they wait for messages to be pushed from Ably to them), or both. Messages are always published over a named channel. Channels are used to filter messages, so whilst billions of messages may be delivered by Ably, subscribers will only receive the messages on the channels they subscribe to.

Channels are uniquely identified by a string specified when publishing to or attaching to a channel. Publishers and subscribers are completely decoupled: a publisher can publish a message without any subscribers on the channel; subscribers can listen on channels that don't yet have publishers; arbitrarily many subscribers can receive a single message published on a channel.

In other words, Ably channels support one-to-many (fan-out), many-to-one (fan-in), and many-to-many.

The following diagram illustrates a very simple use case for channels. The server and vehicle are publishers and publish messages on channels without any knowledge of the subscribers. One mobile device is both a subscriber and publisher by publishing its location and also subscribing for alerts. All other devices are subscribed to just one channel.

<a href="/assets/diagrams/channels.png" target="_blank">
  <img src="/assets/diagrams/channels.png" style="width: 100%" alt="Channel concept diagram">
</a>

h3(#authentication). Authentication

Ably supports two forms of authentication described below. For an in-depth explanation, view the "authentication documentation":/general/authentication.

h4. Basic Authentication

Basic authentication is the simplest form of authentication, allowing clients to communicate with Ably by including the complete private API key within the URL or request headers. To mitigate the risks of sending a private key over the Internet, basic authentication is only permitted over an encrypted "TLS":https://en.wikipedia.org/wiki/Transport_Layer_Security connection. Private API keys and their capabilities (permissions) are managed within an "app's dashboard":http://support.ably.io/support/solutions/articles/3000030053-how-do-i-access-my-app-dashboard. In most cases, we do not recommend that basic authentication is used as it requires that you share your private API key with the client that is connecting to Ably. Our recommendation is to only use basic authentication on your trusted servers.

h4. Token Authentication

Token authentication provides a means for clients to connect to Ably without a private API key. Tokens have a time-to-live (they expire) ensuring that any compromise of a token will have a limited impact. Token authentication is also used to identify clients and provide fine-grained access control on a per-client basis.

Most often, token authentication is implemented as follows: a token request is generated by your server; it is signed using your private API key and then passed to the client; the realtime client uses this signed token request to request a token from Ably directly with the trusted token request. This approach is recommended as at no point does your server need to communicate directly with Ably and ever communicate the secret API key.

<a href="/assets/diagrams/signed-token-request-auth-process.png" target="_blank">
  <img src="/assets/diagrams/signed-token-request-auth-process.png" style="width: 100%" alt="Signed token request from your server concept diagram">
</a>

h5. Client identity and access control

A client using token authentication is either anonymous, or identified if a client ID exists in the token. All messages, presence state and connection state for identified clients contain the trusted client ID and are accessible by other clients. As a private key is needed to generate a token for a client with a client ID, the client ID can be trusted by other clients.

Tokens are limited to the capabilities of the API key used to create the token. When requesting a token, the capabilities may be limited further using fine-grained permissions using a combination of the operation (such as publish, subscribe, presence) and the channel(s).


h3. Global message routing

Explanation coming soon, "contact us":https://www.ably.io/contact in the mean time.

h3. Connection state

Explanation coming soon, "contact us":https://www.ably.io/contact in the mean time.

h3. Presence

Explanation coming soon, "contact us":https://www.ably.io/contact in the mean time.

h3. Redundancy

Explanation coming soon, "contact us":https://www.ably.io/contact in the mean time.

h3. Device support & multiple ransports

Explanation coming soon, "contact us":https://www.ably.io/contact in the mean time.

h3. Encryption

Explanation coming soon, "contact us":https://www.ably.io/contact in the mean time.
