---
title: Consumer
section: api-streamer
index: 68
---

The "Ably API Streamer":https://ably.io/api-streamer makes it easy and cost-effective for organizations and developers to offer realtime APIs, at any scale. It provides a unified solution for publishing, managing and distributing realtime data via open protocol APIs, all built on the "global Ably Data Stream Network":https://www.ably.io/dsn. API Streamer, amongst other things, is being used to share live sports scores and financial market data, mobility IoT data such as GPS locations, and SaaS integration updates in real time.

You can consume one or more data streams using the API Streamer either following a direct invitation from a data producer (mostly applicable for commercial and private streams) or by subscribing to an open data stream of a product listed on the "Ably Hub":https://www.ably.io/hub, a marketplace for streaming data sources. You can then manage these data streams to share it with your end clients. 

h2(#consuming-managing-streams). Consuming and managing data streams

Ably supports two models for subscribing to streams of data:

* **Pull Subscription Protocols** are used by clients that connect to Ably and explicitly subscribe to streams on-demand. Protocols such as MQTT, SSE, or Ably's native protocol, are all Pull based protocols as clients initiate the connection to Ably and request a subscription to a stream of data from the Ably service

* **Push Subscription Protocols** are outbound streams to third party systems that are initiated when data is published on a channel. Push Subscription protocols are often used where it is not practical to consume data on-demand, typically when the volumes of messages or channels are high, and complexity for the subscriber increases. Ably's Push Subscription Protocols are offered through the "Ably Reactor service":https://www.ably.io/reactor, and enable developers to stream data into their streaming or queuing services like Kafka, AMQP (RabbitMQ) or Amazon SQS/Kinesis, or to trigger serverless functions across all popular cloud providers.

<a href="/images/diagrams/api-streamer-consumer.png" target="_blank">
  <img src="/images/diagrams/api-streamer-consumer.png" style="width: 100%" alt="API Streamer Consumer options">
</a>

h3(#subscribing-to-data-streams-using-ably). Subscribing to data streams using Ably's Realtime Client SDKs

To start consuming data streams, you can log into the API Streamer's consumer dashboard. In the subscriptions tab, you'll see a list of all the products that you have access to. You can view any product for more information about the producer offering that product, as well as the documentation on how to use that product. One of the key things you need from the documentation is the channel names to which the data streams are being published.

For example, one of the free streaming data source publishes it's data into the channel @[product:ably-bbc/news]home@. As a consumer, if you wish to use the data available within this channel, you simply need to subscribe to this channel with either a Pull Subscription Protocol or a Push Subscription Protocol explained previously. 

To manage the data from the products you have access to easily, you can set up any number of apps in your apps dashboard. By default, all the Ably accounts come with two pre-loaded apps called 'Production' and 'Sandbox'. If you are just trying out the API Streamer for the first time, we recommend you use the 'Sandbox' app to get up and running quickly.  

In order to use the Ably client SDKs, your client devices will need to authenticate with Ably first. You can simply use the API key which you can obtain from the app you wish to use, also called "Basic Auth mechanism":/core-features/authentication#basic-authentication or set up an auth server so your client devices can use the "Token Auth mechanism":/core-features/authentication#token-authentication. Tokens are short lived and hence more secure in cases where embedding API Keys on the client-side code isn't feasible. "Learn more about the various authentication mechanisms in Ably":/core-features/authentication.

The following code snippets show examples of subscribing to the streaming data channels using Ably's Client SDKs using the basic authentication for simplicity. Note: You can choose the language of your choice from the navbar on the top of this page to see an example in that language.

```[javascript]
  var realtime = new Ably.Realtime('YOUR-API-KEY-OR-TOKEN');
  var channel = realtime.channels.get('CHANNEL-NAME-FROM-PRODUCT-DOCS');
  channel.subscribe(function(message) {
    alert('Received: ' + message.data);
  });
```

```[nodejs]
  var Ably = require('ably');
  var realtime = new Ably.Realtime('YOUR-API-KEY-OR-TOKEN');
  var channel = realtime.channels.get('CHANNEL-NAME-FROM-PRODUCT-DOCS');
  channel.subscribe(function(message) {
    console.log("Received: "  message.data);
  });
```

```[ruby]
  realtime = Ably::Realtime.new('YOUR-API-KEY-OR-TOKEN')
  channel = realtime.channels.get('CHANNEL-NAME-FROM-PRODUCT-DOCS')
  channel.subscribe do |message|
    puts "Received: #{message.data}"
  end
```

```[java]
  AblyRealtime realtime = new AblyRealtime("YOUR-API-KEY-OR-TOKEN");
  Channel channel = realtime.channels.get("CHANNEL-NAME-FROM-PRODUCT-DOCS");
  channel.subscribe(new MessageListener() {
    @Override
    public void onMessage(Message message) {
      System.out.println("New messages arrived. " + message.name);
    }
  });
```

```[csharp]
  AblyRealtime realtime = new AblyRealtime("YOUR-API-KEY-OR-TOKEN");
  IRealtimeChannel channel = realtime.Channels.Get("CHANNEL-NAME-FROM-PRODUCT-DOCS");
  channel.Subscribe(message => {
    Console.WriteLine($"Message: {message.Name}:{message.Data} received");
  });
```

```[objc]
ARTRealtime *realtime = [[ARTRealtime alloc] initWithKey:@"YOUR-API-KEY-OR-TOKEN"];
ARTRealtimeChannel *channel = [realtime.channels get:@"CHANNEL-NAME-FROM-PRODUCT-DOCS"];
[channel subscribe:^(ARTMessage *message) {
    NSLog(@"Received: %@", message.data);
}];
[channel publish:@"example" data:@"message data"];
```

```[swift]
let realtime = ARTRealtime(key: "YOUR-API-KEY-OR-TOKEN")
let channel = realtime.channels.get("CHANNEL-NAME-FROM-PRODUCT-DOCS")
channel.subscribe { message in
    print("Received: \(message.data)")
}
```

h2(#tutorials). Tutorials

We are working on step-by-step tutorials for you to easily follow along. In the meantime, if you'd like to get any questions answered, "we'll be happy to help":https://www.ably.io/support.