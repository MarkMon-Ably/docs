---
title: Producer
section: api-streamer
index: 67
languages:
  - javascript
  - nodejs
  - php
  - python
  - ruby
  - java
  - swift
  - objc
  - csharp
  - go
---

The "Ably API Streamer":https://ably.io/api-streamer makes it easy and cost-effective for organizations and developers to offer realtime APIs, at any scale. It provides a unified solution for publishing, managing and distributing realtime data via open protocol APIs, all built on the "global Ably Data Stream Network":https://www.ably.io/dsn. API Streamer, amongst other things, is being used to share live sports scores and financial market data, mobility IoT data such as GPS locations, and SaaS integration updates in real time.

h2(#publishing-data-streams). Using the API Streamer to publish data streams

You can share your realtime data streams with consumers in three distinct steps: 1) Deploy,  2) Manage and 3) Distribute.

<a href="/images/diagrams/api-streamer-producer-steps.png" target="_blank">
  <img src="/images/diagrams/api-streamer-producer-steps.png" style="width: 100%" alt="Steps involved in publishing data streams">
</a>

h3(#deploy). Deploy

Event-driven and realtime data, by it's very nature, needs to flow from the producer to the consumer with the lowest possible latency. Given producers in most cases are decoupled from consumers of data, and not all data that is published is needed by all subscribers, the "publish/subscribe pattern":https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern is most commonly used in systems designed to deliver realtime data as streams of events or messages.

In the first step of publishing data streams, you'll need to set up an app on the Ably app dashboard or use one of the existing apps. By default, all the Ably accounts come with two pre-loaded apps called 'Production' and 'Sandbox'. If you are just trying out the API Streamer for the first time, we recommend you use the 'Sandbox' app to get up and running quickly.

Ably fundamentally organizes all the data into units called "channels":/core-features/channels. In order to deploy your data into your Ably apps, you'll need to publish it to one or more channels.

You can do this by either by using our "Realtime Client SDKs":/realtime, our "REST Client SDKs":/rest, our "MQTT adapter":/mqtt, or directly using our "raw REST API":/rest-api (although this last option isn't recommended as it is inferior to our SDKs in terms of performance and resilience).

In most cases, if you are only publishing your data streams and not expecting a two-way communication between you and the consumer of the data, the most efficient way is to use the REST Client SDKs.

You authenticate yourself using the API Key in your app, and start publishing your data into one or more channels. Additionally, if your publisher is not secure enough to embed API Keys directly, you can "set up a separate authentication server and issue tokens to your publisher":/core-features/authentication#token-authentication who can then use them to authenticate with Ably before being able to publish.

h4(#deploy-using-rest-sdks). Deploying data streams using Ably's REST Client SDKs

Using Ably's REST Client SDKs to deploy your data streams to one of your apps is very easy. Note: You can choose the language of your choice from the navbar on the top of this page to see an example in that language.

The following example shows a mock data stream by repeating the publish action at regular intervals.
<!--TODO check code examples for accuracy-->

```[javascript]
  var rest = new Ably.Rest('{{API_KEY}}');
  var channel = rest.channels.get('{{RANDOM_CHANNEL_NAME}}');
  setInterval(function(){ 
      channel.publish('example', 'message data'); 
  }, 3000);
```

```[nodejs]
  var rest = new Ably.Rest('{{API_KEY}}');
  var channel = rest.channels.get('{{RANDOM_CHANNEL_NAME}}');
  setInterval(function(){ 
      channel.publish('example', 'message data'); 
  }, 3000);
```

```[ruby]
  rest = Ably::Rest.new('{{API_KEY}}')
  channel = rest.channels.get('{{RANDOM_CHANNEL_NAME}}')
  while true
    channel.publish 'example', 'message data'
    sleep 3
  end
```

```[python]
  rest = AblyRest('{{API_KEY}}')
  channel = rest.channels.get('{{RANDOM_CHANNEL_NAME}}')
  def setInterval(func,time):
    e = threading.Event()
    while not e.wait(time):
        func()

  def publish():
    channel.publish(u'example', u'message data')"

  setInterval(publish,3)
```

```[php]
  $rest = new Ably\AblyRest('{{API_KEY}}');
  $channel = $rest->channels->get('{{RANDOM_CHANNEL_NAME}}');
  function setInterval($f, $milliseconds){
    $seconds=(int)$milliseconds/1000;
    while(true){
        $f();
        sleep($seconds);
    }
  }
  setInterval(function() use($channel) {
   $channel->publish('example', 'message data');
  }, 3000);
```

```[java]
  AblyRest rest = new AblyRest("{{API_KEY}}");
  Channel channel = rest.channels.get("{{RANDOM_CHANNEL_NAME}}");
  new Timer().scheduleAtFixedRate(new TimerTask(){
    @Override
    public void run(){
       channel.publish("example", "message data");
    }
  },0,3000);
```

```[csharp]
  AblyRest rest = new AblyRest("{{API_KEY}}");
  var channel = rest.Channels.Get("{{RANDOM_CHANNEL_NAME}}");
  await channel.PublishAsync("example", "message data");
```

```[objc]
  ARTRest *rest = [[ARTRest alloc] initWithKey:@"{{API_KEY}}"];
  ARTRestChannel *channel = [rest.channels get:@"{{RANDOM_CHANNEL_NAME}}"];
  [channel publish:@"example" data:@"message data"];
```

```[swift]
  let rest = ARTRest(key: "{{API_KEY}}")
  let channel = rest.channels.get("{{RANDOM_CHANNEL_NAME}}")
  channel.publish("example", data: "message data")
```

```[go]
  rest, err := ably.NewRestClient(ably.NewClientOptions("{{API_KEY}}"))
  channel := rest.Channels.Get("{{RANDOM_CHANNEL_NAME}}", nil)
  err = channel.Publish("example", "message data")
```

h4(#deploy-using-realtime-sdks). Deploying data streams using Ably's Realtime Client SDKs

```[javascript]
  var realtime = new Ably.Realtime('{{API_KEY}}');
  var channel = realtime.channels.get('{{RANDOM_CHANNEL_NAME}}');
  setInterval(function(){ 
      channel.publish('example', 'message data'); 
  }, 3000);
```

```[nodejs]
  var Ably = require('ably');
  var realtime = new Ably.Realtime('{{API_KEY}}');
  var channel = realtime.channels.get('{{RANDOM_CHANNEL_NAME}}');
  setInterval(function(){ 
      channel.publish('example', 'message data'); 
  }, 3000);
```

```[ruby]
  realtime = Ably::Realtime.new('{{API_KEY}}')
  channel = realtime.channels.get('{{RANDOM_CHANNEL_NAME}}')
  while true
    channel.publish 'example', 'message data'
    sleep 3
  end
```

```[java]
  AblyRealtime realtime = new AblyRealtime("{{API_KEY}}");
  Channel channel = realtime.channels.get("{{RANDOM_CHANNEL_NAME}}");
  new Timer().scheduleAtFixedRate(new TimerTask(){
    @Override
    public void run(){
       channel.publish("example", "message data");
    }
  },0,3000);
```

```[csharp]
  AblyRealtime realtime = new AblyRealtime("{{API_KEY}}");
  IRealtimeChannel channel = realtime.Channels.Get("{{RANDOM_CHANNEL_NAME}}");
  channel.Publish("example", "message data");
```

```[objc]
ARTRealtime *realtime = [[ARTRealtime alloc] initWithKey:@"{{API_KEY}}"];
ARTRealtimeChannel *channel = [realtime.channels get:@"{{RANDOM_CHANNEL_NAME}}"];
[channel publish:@"example" data:@"message data"];
```

```[swift]
let realtime = ARTRealtime(key: "{{API_KEY}}")
let channel = realtime.channels.get("{{RANDOM_CHANNEL_NAME}}")
channel.publish("example", data: "message data")
```

h3(#manage). Manage

Use API Streamer’s realtime native API Management toolkit to maximize the value of your realtime APIs. Streamer’s developer portal gives you security, analytics, stream transformation, as well as monetization and billing tools. Streamer helps turn data streams into revenue streams.

<!-- INSERT IMAGE -->

h3(#distribute). Distribute

API Streamer is designed for ease of publishing, eliminating the need for custom-built integrations. You can simply publish realtime data to the platform with end-to-end delivery guarantees. Whether your data reaches one or a million subscribers, engineering effort is minimal.

<!-- INSERT IMAGE -->

h2(#getting-started-as-a-producer). Getting started

Our API Streamer Producer documentation is coming soon...

If you'd like to get any questions answered before that, "we'll be happy to help":https://www.ably.io/support.

<!-- To understand the end-to-end delivery-ness of the API Streamer, consider the scenario below:
TODO IMAGE
You have your data - > Publish it into DSN (thus making it available as an api) -> Let your clients use this data or => let other companies use this data by making it available via the API Streamer.
Link to tutorial -->