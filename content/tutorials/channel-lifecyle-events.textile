---
title: Channel Lifecycle Events tutorial
section: tutorials
index: 17
---

The Ably Realtime service organizes the message traffic within applications into named "channels":https://www.ably.io/channels. Channels are the “unit” of message distribution; clients attach to any number of channels to subscribe to messages, and every message published to a channel is broadcasted to all subscribers. 

A lot of times, developers find it helpful to be aware of certain metadata related to their channels and apps in general. This metadata can be accessed in the form of the channel lifecycle events, channel occupancy events or even channel enumeration, i.e. listing all the active channels associated with a particular API key in an app via our Channel Lifecycle API. In this tutorial, we'll see how to receive channel lifecycle events.

<%= partial 'tutorials/_step-1-setup-free-account' %>

h2(#permissions). Step 2 - Setting the right permissions on your API key

In order to be able to use the meta data that is offered as part of the Channel Lifecycle API, you'll need to attach to a special channel called '[meta]channel.lifecycle'. This is in essence similar to any other channel that you would use to share data within Ably's Data Stream Network. However, it's kept on a different namespace in order to easily separate concerns. All of the metadata, including channel lifecycle events and occupancy events, will be sent on this channel.

A regular Ably key has a @capability@ which lists resources (glob expressions that match channel names) and, for any given resource, a set of permitted operations. The wildcard resource @'*'@ will match any regular channel name.

In order to grant permission in a key to a metachannel, however, the resource name(s) in the @capability@ must include the @[meta]@ qualifier explicitly; so the following are examples of capabilities that will validly permit access to a metachannel:

```[json]
    {"[meta]*":["subscribe"]}
    {"[meta]*":["*"], "*":["*"]}
```

Under normal circumstances you won't be granted permission to publish to, or be present in metachannels.

h2(#using-ably-realtime). Channel lifecycle events using the realtime library.

Ably's realtime library allows you to subscribe to various channels. This means that whenever some new data is published onto the channel you are subscribed, you'll automaticlly receive that data, without needing to generate additional requests. You can learn more about the realtime library from our documentation.

In this section, we'll subscribe to the lifecycle events that will be published on the meta channel using the realtime library.

h3(#front-end). Step 3 - Creating a basic HTML page to display results

Since we'll be using JavaScript in this tutorial, the best way to display results is in a browser. So, go ahead and paste the following simple HTML in a file and name it @index.html@

```[html]
<html>

<head>
    <title>Channel Occupancy Events</title>
    <script src="https://cdn.ably.io/lib/ably.min-1.js" crossorigin="anonymous"></script>
</head>

<body style="padding: 60px; font-family:Arial, Helvetica, sans-serif">
    Ably Channel Lifecycle API - Lifecycle Events Demo
    <br/>
    <br/>
    <div>
        Ably console:
        <br>
        <textarea id="result" rows="30" style="width: 30%; margin-top: 10px; font-family: courier, courier new; background-color: #333; color: orange;  overflow-y: scroll;"
            disabled>
        </textarea>
    </div>
    <script src="main.js"></script>
</body>

</html>
```

The key thing to note in the HTML above, is the inclusion of two JS files, ones is the Ably Library, referenced via the CDN, while the other is the @main.js@ file which will include our logic. We'll work on this next. We have also added a text area to display our results in.


h3(#subscribing-to-channel-lifecycle-events). Step 4 - Subscribing to Channel Lifecycle events using Ably's Realtime Library

For the simplicity of this tutorial, we'll use "Basic authentication":/core-features/authentication#basic-authentication in our realtime client. However, it is highly recommended to use "Token auth":/core-features/authentication#token-authentication on client side applications for better security and protection of your API key.

Let's begin with instantiating the Ably Realtime library using the API key. Create a new file called @main.js@ and add the following to it.

```[javascript]
var apiKey = '<YOUR-API-KEY-WITH-OCCUPANCY-ENABLED>';
var myId = "id-" + Math.random().toString(36).substr(2, 16)
var ably = new Ably.Realtime({
    key: apiKey,
    clientId: myId
});
```
Next, let's instance the meta channel using the realtime client that we instanced above and also reference the text area we added in the HTML, to display results in.

```[javascript]
var metaChannel = ably.channels.get("[meta]channel.lifecycle");
var resultArea = document.getElementById("result");
resultArea.scrollTop = resultArea.scrollHeight;
```
The next step would be to subscribe to the channel lifecycle events. These events are triggered on the @[meta]channel.lifecycle@ that we instanced above and could be one of these: 'channel.opened', 'channel.closed', 'channel.region.active' and 'channel.region.inactive'. We can display the results returned in the callback in the text area in our HTML.

```[javascript]
metaChannel.subscribe('channel.opened', (msg) => {
    var msgJSONobj = JSON.parse(JSON.stringify(msg.data));
    resultArea.value += ('[META DATA - ' + (new Date().toLocaleTimeString()) + ' ]: Channel "' + msgJSONobj.name + '" has been activated globally\n');
    resultArea.scrollTop = resultArea.scrollHeight;
})

metaChannel.subscribe('channel.closed', (msg) => {
    var msgJSONobj = JSON.parse(JSON.stringify(msg.data));
    resultArea.value += ('[META DATA - ' + (new Date().toLocaleTimeString()) + ' ]: Channel "' + msgJSONobj.name + '" has been deactivated globally\n');
    resultArea.scrollTop = resultArea.scrollHeight;
})

metaChannel.subscribe('channel.region.active', (msg) => {
    var msgJSONobj = JSON.parse(JSON.stringify(msg.data));
    resultArea.value += ('[META DATA - ' + (new Date().toLocaleTimeString()) + ' ]: Channel "' + msgJSONobj.name + '" has been activated in ' + msgJSONobj.region + ' region\n');
    resultArea.scrollTop = resultArea.scrollHeight;
})

metaChannel.subscribe('channel.region.inactive', (msg) => {
    var msgJSONobj = JSON.parse(JSON.stringify(msg.data));
    resultArea.value += ('[META DATA - ' + (new Date().toLocaleTimeString()) + ' ]: Channel "' + msgJSONobj.name + '" has been deactivated in ' + msgJSONobj.region + ' region\n');
    resultArea.scrollTop = resultArea.scrollHeight;
})
```

In the above code, we have subscribed to the various channel lifecycle events on the meta channel and display the data returned in the text area. Simple as that!

h2(#live-demo). Step - 5 Live Demo

For the live demo, we'll manually attach and detach from channels, by means of button clicks, so we can see the channel lifecycle events live in action.

     Ably Channel Lifecycle API - Occupancy Events Demo
    <br/>
    <br/>
    <div style="text-align: left; padding: 10px">
        <input style="padding: 5px" id="create-ch-name" placeholder="Enter channel name">
        <button style="padding: 5px; width: 150px" id="create-channel" onclick="createChannel()">Create channel instance</button>
    </div>
    <div style="text-align: left; padding: 10px">
        <select id="channel-instances" style="width:140px;">
            <option value="none">None</option>
        </select>
        <button style="padding: 5px; width: 150px" id="attach-channel" onclick="attachChannel()">Attach to the channel</button>
    </div>
    <div style="text-align: left; padding: 10px">
        <select id="attached-channels" style="width:140px;">
            <option value="none">None</option>
        </select>
        <button style="padding: 5px; width: 150px" id="detach-channel" onclick="detachChannel()">Detach from the channel</button>
    </div>
    <div>
        Ably console:
        <br>
        <textarea id="result" rows="30" style="width: 30%; margin-top: 10px; font-family: courier, courier new; background-color: #333; color: orange;  overflow-y: scroll;"
            disabled>
        </textarea>
    </div>

h2(#next-steps). Next Steps

1. If you would like to find out more about how channels, publishing and subscribing works, see the "Realtime channels & messages documentation":https://www.ably.io/documentation/realtime/channels-messages
2. If you would like to check out the other two related tutorials to work with channel metadata, see TODO and TODO .
3. Learn more about "Ably features":https://www.ably.io/features by stepping through our other "Ably tutorials":https://www.ably.io/tutorials
4. Gain a good technical "overview of how the Ably realtime platform works":https://www.ably.io/documentation/how-ably-works
5. "Get in touch if you need help":https://www.ably.io/contact



<script src="https://cdn.ably.io/lib/ably.min-1.js" crossorigin="anonymous"></script>
<script type="text/javascript">
var apiKey = 'W-X4kg.BewSYw:kSvkaf9XAMnT_5sy';
var myId = "id-" + Math.random().toString(36).substr(2, 16)
var ably = new Ably.Realtime({ 
    key: apiKey,
    clientId: myId 
});
var metaChannel = ably.channels.get("[meta]channel.lifecycle");
var resultArea = document.getElementById("result");
resultArea.scrollTop = resultArea.scrollHeight;

metaChannel.subscribe('channel.opened', (msg) => {
    var msgJSONobj = JSON.parse(JSON.stringify(msg.data));
    resultArea.value += ('[META DATA - ' + (new Date().toLocaleTimeString()) + ' ]: Channel "' + msgJSONobj.name + '" has been activated globally\n');
    resultArea.scrollTop = resultArea.scrollHeight;
})

metaChannel.subscribe('channel.closed', (msg) => {
    var msgJSONobj = JSON.parse(JSON.stringify(msg.data));
    resultArea.value += ('[META DATA - ' + (new Date().toLocaleTimeString()) + ' ]: Channel "' + msgJSONobj.name + '" has been deactivated globally\n');
    resultArea.scrollTop = resultArea.scrollHeight;
})

metaChannel.subscribe('channel.region.active', (msg) => {
    var msgJSONobj = JSON.parse(JSON.stringify(msg.data));
    resultArea.value += ('[META DATA - ' + (new Date().toLocaleTimeString()) + ' ]: Channel "' + msgJSONobj.name + '" has been activated in ' + msgJSONobj.region + ' region\n');
    resultArea.scrollTop = resultArea.scrollHeight;
})

metaChannel.subscribe('channel.region.inactive', (msg) => {
    var msgJSONobj = JSON.parse(JSON.stringify(msg.data));
    resultArea.value += ('[META DATA - ' + (new Date().toLocaleTimeString()) + ' ]: Channel "' + msgJSONobj.name + '" has been deactivated in ' + msgJSONobj.region + ' region\n');
    resultArea.scrollTop = resultArea.scrollHeight;
})

function createChannel() {
    var channelName = document.getElementById('create-ch-name').value
    if (channelName == "") {
        alert('Enter a channel name to attach');
    }
    else {
        var channel = ably.channels.get(channelName)
        resultArea.value += ('[LOCAL LOG - ' + (new Date().toLocaleTimeString()) + ' ]: Channel instance obtained for "' + channelName + '" \n');
        resultArea.scrollTop = resultArea.scrollHeight;
        var chList = document.getElementById('attached-channels');
        chList.options[chList.options.length] = new Option(channelName, channelName);
        var channelInstances = document.getElementById('channel-instances');
        channelInstances.options[channelInstances.options.length] = new Option(channelName, channelName);
    }

}

function attachChannel() {
    var channelsList = document.getElementById("channel-instances");
    var chToAttach = channelsList.options[channelsList.selectedIndex].text;
    var channel = ably.channels.get(chToAttach)
    if (chToAttach == 'None') {
        alert('Select a channel to delete')
    }
    else {
        channel.attach(() => {
            resultArea.value += ('[LOCAL LOG - ' + (new Date().toLocaleTimeString()) + ' ]: Channel "' + channel.name + '" is now attached\n');
            resultArea.scrollTop = resultArea.scrollHeight;
        })
    }

}

function detachChannel() {
    var channelsList = document.getElementById("attached-channels");
    var chToDetach = channelsList.options[channelsList.selectedIndex].text;
    var channel = ably.channels.get(chToDetach)
    if (chToDetach == 'None') {
        alert('Select a channel to delete')
    }
    else {
        channel.detach(() => {
            resultArea.value += ('[LOCAL LOG - ' + (new Date().toLocaleTimeString()) + ' ]: Channel "' + channel.name + '" is now detached\n');
            resultArea.scrollTop = resultArea.scrollHeight;
        })
    }
}
</script>