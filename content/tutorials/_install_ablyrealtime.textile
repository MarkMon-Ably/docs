<%
  client_id = 'jamie'
%>
h2.
  default: Step 2 - Install Ably
  swift: Step 2 - Setup an Xcode project and install Ably
  android: Step 2 â€“ Set up environment and install Ably

blang[java].
  To start using Ably in your JRE application, you need to include the Ably Client library. We recommend that you include the latest client library via Gradle in your project's @gradle.build@ file.

  ```[groovy]
  apply plugin: 'application'
  mainClassName = 'io.ably.tutorial.Example'

  repositories {
    jcenter()
      maven { url "https://raw.github.com/paddybyers/Java-WebSocket/mvn-repo/" }
  }

  dependencies {
      compile 'io.ably:ably-java:0.8.4'
  }
  ```

  After you add necessary dependencies, you can import AblyRealtime class into your code and initialize it.

  ```[java]
  import io.ably.lib.realtime.AblyRealtime;

  public class Example {
    private final static String API_KEY = "INSERT-YOUR-API-KEY-HERE";

    public static void main(String[] args) {
        try {
            initAbly();
        } catch (AblyException e) {
            e.printStackTrace();
        }
    }

    private static void initAbly() throws AblyException {
        AblyRealtime ablyRealtime = new AblyRealtime(API_KEY);
    }
  }
  ```

  "See this step in Github":https://github.com/ably/tutorials/commit/21cbacb


blang[android].
  To build your own Android Project, please visit "Android Developers":https://developer.android.com/training/basics/firstapp/creating-project.html website and get familiar with steps necessary to set up your own application.
  To start using Ably in your Android app, you need to include the Ably Client library. We recommend that you include the latest client library via Gradle in your module-level @gradle.build@ file.

  ```[groovy]
  apply plugin: 'com.android.application'
  ...
  dependencies {
      ...
      compile 'io.ably:ably-java:0.8.4'
  }
  ```

  Also add following repo for a sub-dependency in your project-level @gradle.build@ file.

  ```[groovy]
  allprojects {
    repositories {
        ...
        maven { url "https://raw.github.com/paddybyers/Java-WebSocket/mvn-repo/" }
    }
  }
  ```

  After you add necessary dependencies, you can import AblyRest class into your code and initialize it.

  ```[java]
  import io.ably.lib.realtime.AblyRealtime;

  public class ExampleActivity extends AppCompatActivity {
    private final static String API_KEY = "INSERT-YOUR-API-KEY-HERE";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_example);
        try {
            initAbly();
        } catch (AblyException e) {
            e.printStackTrace();
        }
    }

    private void initAbly() throws AblyException {
        AblyRealtime realtime = new AblyRealtime(API_KEY);
    }
  }
  ```

  "See this step in Github":https://github.com/ably/tutorials/commit/089d9fd

blang[javascript].
  To start using Ably in your web app, you first need to include the Ably library. We recommend that you include the latest client library from our CDN using a simple @<script>@ tag. The client library must be instanced with the API key you copied in Step 1. <% if @use_client_id %>As we'll be using presence, we also include the @clientId@, which is what we'll appear as in the presence set.<% end %> Note that in production we recommend you always use the "token authentication scheme":/general/authentication#token-authentication for browser clients, however in this example we use an API key for simplicity.

  Include the code below just before your closing your HTML @</html>@ tag.

  ```[javascript]
    <!-- Include the latest Ably Library  -->
    <script src="//cdn.ably.io/lib/ably.min.js"></script>

    <!-- Instance the Ably library  -->
    <script type="text/javascript">
      var realtime = new Ably.Realtime(<%= @use_client_id ? "{key: apiKey, clientId: '#{client_id}'}" : 'apiKey' %>);
    </script>
  ```

  "See this step in Github":https://github.com/ably/tutorials/commit/843128d

blang[nodejs].
  To start using Ably you first need to install the NPM module. The NPM module can be installed as follows:

  ```[sh]
    npm install ably
  ```

  The client library must be instanced with the API key you copied in Step 1. API keys used with "basic authentication":/general/authentication#basic-authentication for your own servers is generally preferred, however clients running on insecure devices should always use the "token authentication scheme":/general/authentication#token-authentication instead. In this example, we use an API key for simplicity.

  Add the following to a file named @example.js@ to instance the Ably library inside your Node.js server:

  ```[nodejs]
    var Ably = require("ably");
    var realtime = new Ably.Realtime({ key: apiKey });
  ```

  "See this step in Github":https://github.com/ably/tutorials/commit/f8a9f4a

blang[ruby].
  To start using Ably you first need to install the Ably RubyGem. The RubyGem can be installed as follows:

  ```[sh]
    gem install ably
  ```

  Or if using bundler, simply add the following to your Gemfile and run @bundle install@:

  ```[ruby]
    gem 'ably'
  ```

  The client library must be instanced with the API key you copied in Step 1. API keys used with "basic authentication":/general/authentication#basic-authentication for your own servers is generally preferred, however clients running on insecure devices should always use the "token authentication scheme":/general/authentication#token-authentication instead. In this example, we use an API key for simplicity. <% if @use_client_id %>As we'll be using presence, we also include the @client_id@, which is what we'll appear as in the presence set.<% end %> 

  The Ruby realtime library uses "EventMachine":https://github.com/eventmachine/eventmachine to run the client library within an asynchronous event loop. However, typically when using Ruby on servers, most developers use the synchronous "REST client library API":/rest. As this tutorial needs realtime access to <%= @why_realtime %>, it uses the Ruby realtime library.

  Add the following to a file named @example.rb@ to instance the Ably library inside an EventMachine reactor:

  ```[ruby]
    require 'ably'
    EventMachine.run do
      ably = Ably::Realtime.new(key: api_key<%= ", client_id: #{client_id}" if @use_client_id %>)
    end
  ```

  "See this step in Github":https://github.com/ably/tutorials/commit/0ec2c7e

blang[php].
  To start using Ably you first need to install "composer package on packagist":https://packagist.org/packages/ably/ably-php into your composer.

  ```[sh]
    composer require ably/ably-php --update-no-dev
  ```

  The client library must be instanced with the API key you copied in Step 1. API keys used with "basic authentication":/general/authentication#basic-authentication for your own servers is generally preferred, however clients running on insecure devices should always use the "token authentication scheme":/general/authentication#token-authentication instead. In this example, we use an API key for simplicity.

  The PHP Client library doesn't provide Realtime API support, so we'll create a web app that uses Javascript on the client-side (browser) to demonstrate a server publishing messages to realtime Javascript clients.

  Javascript will handle subscribing to messages, while PHP will be responsible for publishing messages.

  First let's create @ably.php@ where we will store Ably library and Api key

  ```[php]
    <?php
    require_once 'vendor/autoload.php';
    $apikey = '{{ApiKey}}';
    $ably   = new \Ably\AblyRest($apikey);
  ```

  Next step is to create frontend of our app, and set up Javascript library. create @index.php@ file with code:

  ```[php]
    <?php
    require_once 'ably.php';
    ?>
    <html>
      <head>
        <script src="https://cdn.ably.io/lib/ably.min.js" type="text/javascript"></script>
      </head>
      <body>
        <h1>Publish &amp; Subscribe sample</h1>
      </body>
      <script type="text/javascript">
        /* Set up a Realtime client which will subscribe to the 'sport' channel*/
        var realtime = new Ably.Realtime('<?= $apikey?>');
      </script>
    </html>
  ```

  If you would like to try running the server now, you can do so with @php -S 0.0.0.0:8000@. Once running, open your browser to "http://localhost:8000/":http://localhost:8000/ and you should see "Publish & Subscribe sample".

  "See this step in Github":https://github.com/ably/tutorials/commit/64f73bd

blang[python].
  To start using Ably you first need to install The REST library for Python, it's "hosted on Github":https://github.com/ably/ably-python and is "published on PyPI":https://pypi.python.org/pypi/ably and can be installed as follows:

  ```[sh]
    pip install ably
  ```

  The client library must be instanced with the API key you copied in Step 1. API keys used with "basic authentication":/general/authentication#basic-authentication for your own servers is generally preferred, however clients running on insecure devices should always use the "token authentication scheme":/general/authentication#token-authentication instead. In this example, we use an API key for simplicity.

  Python Client library doesn't provide Realtime API support, so we'll create a web app that uses Javascript on the client-side (browser) to demonstrate a server publishing messages to realtime Javascript clients.

  Javascript will handle subscribing to messages, while Python will be responsible for publishing messages.

  "web.py":http://webpy.org/ is a simple web framework for Python. Django is arguably more popular as a web server framework, however for the purposes of this tutorial it is overkill.

  Let's get going with a simple web.py web server now. Install @web.py@ using @pip@:

  ```[sh]
    pip install web.py
  ```

  Now set up a vanilla web.py server in @server.py@:

  ```[python]
    from __future__ import unicode_literals
    from ably import AblyRest
    import web

    apiKey = '{{ApiKey}}'
    client = AblyRest(apiKey)

    render = web.template.render('templates/')


    class index:
        def GET(self):
            return render.index(apiKey)


    urls = (
        '/', index
    )

    app = web.application(urls, globals())

    if __name__ == "__main__":
        app.run()
  ```

  In @web.py@ each resource is mapped to a class, which in turn takes action depending on HTTP method used. In this case it's main domain @'/'@, that will be handled by @index@ class, and it will support HTTP @GET@.

  We've used @web.py@ template system to easily pass @apiKey@ to Javascript library, let's create @index.html@ in @templates@ directory:

  ```[html]
    $def with (apiKey)
    <html>
      <head>
        <script src="https://cdn.ably.io/lib/ably.min.js" type="text/javascript"></script>
      </head>
      <body>
        <h1>Publish &amp; Subscribe sample</h1>
      </body>
      <script type="text/javascript">
        /* Set up a Realtime client which will subscribe to the 'sport' channel*/
        var realtime = new Ably.Realtime('$apiKey');
      </script>
    </html>
  ```

  h4. Note on string encodings

  Since Ably supports both string and binary payloads, to avoid ambiguity, we recommend that strings passed to the library for publishing to Ably (eg as an event name or payload data) should be unicode strings. In Python 3 this is the normal string type, but in Python 2 it is not, so we suggest you prefix string literals with @u@ prefix (eg @u'eventname'@ - or alternatively, use @from __future__ import unicode_literals@, which will make this automatic), and to explicitly decode any user input (eg @raw_input().decode(sys.stdin.encoding@).

  If you would like to try running the server now, you can do so with @python server.py@. Once running, open your browser to "http://localhost:8080/":http://localhost:8080/ and you should see the text "Publish & Subscribe sample". If you would like to change port, on which your site will be available, simply add it after command ieg. @python server.py 1234@ for port @1234@.

  "See this step in Github":https://github.com/ably/tutorials/commit/277475e

blang[swift].
  We will start by creating an Xcode project for this tutorial. To build your own Xcode Project in Swift visit "Apple developer website":https://developer.apple.com/library/content/documentation/IDEs/Conceptual/AppStoreDistributionTutorial/Setup/Setup.html and get familiar with steps necessary to setup your own application.
  When you setup your application delete the default @ViewController.swift@ add new File -> New -> File... and choose @Cocoa Touch Class@.
  <a href="/images/tutorials/tutorials-swift-CTC.png" target="_blank">
    <img src="/images/tutorials/tutorials-swift-CTC.png" style="width: 100%" alt="Create new Cocoa Touch Class">
  </a>
  Name your new class "ExampleViewController" and choose @Swift@ as language:
  <a href="/images/tutorials/tutorials-swift-ExampleClass.png" target="_blank">
    <img src="/images/tutorials/tutorials-swift-ExampleClass.png" style="width: 100%" alt="Name new Cocoa Touch Class">
  </a>
  After that navigate to @Main.storyboard@ in your project, click on the @ViewController@ that has already been added by default during project creation and from the @Utilities@ that are located on the right choose @Identity Inspector@. Find the field labeled "Class" and select "ExampleViewController".
  <a href="/images/tutorials/tutorials-swift-IB-class.png" target="_blank">
    <img src="/images/tutorials/tutorials-swift-IB-class.png" style="width: 100%" alt="Interface design">
  </a>

  "See this step in Github":https://github.com/ably/tutorials/commit/a98f1bf

  To start using Ably you first need to install the Ably pod via CocoaPods. You need to add a @Podfile@ to your project directory:

  bc[sh]. touch Podfile

  Then add this line to your applicationâ€™s Podfile:

  ```[text]
    pod 'Ably'
  ```

  Install it with:

  bc[sh]. pod install

  To learn more about using CocoaPods in your project visit "official CocoaPods guide":https://guides.cocoapods.org/using/using-cocoapods.html.

  Then in your files in which you will be using Ably import:

  ```[swift]
    import Ably
  ```

  To connect to Ably, you need to instance the client library with the API key you copied in Step 1. API keys used with "basic authentication":/general/authentication#basic-authentication for your own servers is generally preferred, however clients running on insecure devices should always use the "token authentication scheme":/general/authentication#token-authentication instead. In this example, we use an API key for simplicity.

  Add the following to the file in which you imported the Ably library:

  ```[swift]
    let API_KEY = "INSERT-YOUR-API-KEY-HERE"
    let client = ARTRealtime(key: API_KEY)
  ```

  "See this step in Github":https://github.com/ably/tutorials/commit/59dcc56
