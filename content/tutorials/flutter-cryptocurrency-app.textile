---
title: Building a Realtime Cryptocurrency App with Flutter
excerpt: Learn how to build a cryptocurrency Flutter app ussing Ably's realtime package
section: tutorials
category:
    - channels
group: sdk
index: 14
platform: browser
authors:
- author_name: Mais Alheraki
  author_bio: ""
  author_profile_url: ""
  author_image: ""
- author_name: Thomas Burkhart
  author_bio: ""
  author_profile_url: ""
  author_image: ""
languages:
  - dart
level: intermediate
reading_time: 10
tags:
    - flutter
    - realtime
    - channel
    - graph
    - cryptocurrency
---

The Ably Flutter plugin is a wrapper around the Cocoa and Java client library SDKs, providing iOS and Android support for those using Flutter and Dart. It is really easy to get up and running. In this article, we'll show you how to build a realtime cryptocurrency Flutter app using this plugin. We will mainly focus on the important things you need to know to get started, along with best practices to receive and display real-time data. You can check out the "full source code on GitHub":https://github.com/ably-labs/live-cryptocurrency-streaming-flutterhttps://github.com/ably-labs/live-cryptocurrency-streaming-flutter.

h2(#realtime-in-flutter). Realtime in Flutter

Flutter is a toolkit made by Google for building cross-platform apps easily.

The tech world is increasingly moving towards event-driven systems, giving rise to a need for fast and reactive applications. The Ably Flutter plugin provides a robust and easy way to create Flutter apps with realtime capabilities.

h2(#getting-started). Getting Started

h3(#what-will-we-build). What will we build?

We’ll build a realtime cryptocurrency app with 3 screens as described below:

1. **Dashboard screen:** This will be the default home screen where we will display realtime data for cryptocurrency prices from "Ably’s Coindesk":https://www.ably.io/hub/ably-coindesk/crypto-pricing data stream on the "Ably Hub":https://www.ably.io/hub/ (more on the Hub later). Each currency will have its own line graph that shows the changes of the price over time, along with the actual updated price.
2. **Chat room screen:** This will be the chat screen which you’ll see when the chat icon is clicked. We will create a public chat room where all users who have the app can chat with others who are currently in the room.
3. **Twitter feed screen:** Clicking on the name of any given cryptocurrency on the dashboard will bring up another screen containing the twitter feed containing the latest tweets with that cryptocurrency mentioned.

h3(#pre-requisites). Pre-requisites

Before we get started, please make sure that you have Flutter correctly installed on your machine. You can do it by following the "Flutter installation guide":https://flutter.dev/docs/get-started/install.

The next step is to "sign up":https://www.ably.io/signup for a free Ably account to obtain an **Ably API key**. This is needed to make the Ably Flutter plugin work.

Ably has a set of streaming data sources that can be used free of charge in your apps and services. They are hosted on the "Ably Hub":https://www.ably.io/hub. For our application, we’ll make use of the “**Cryptocurrency pricing**”:https://www.ably.io/hub/ably-coindesk/crypto-pricing data stream. At the time of this writing, it supports the BTC, XRP, and ETH currencies and shows the corresponding prices in USD. Go ahead and click on the ‘subscribe’ button to get access to this data stream from your Ably account.

Next you need to "sign up":https://developer.twitter.com/ for a Twitter developer account to get Twitter API keys. This is needed to get the Twitter feed screen working. It’s not necessary as the application as a whole will still work even with the Twitter feed missing.

h3. Project Files Structure

bc. Lib // root folder of all dart files in a Flutter app
|_ service
|____ ably_service.dart
|____ twitter_api_service.dart
|_ view
|____ dashboard.dart
|____ twitter_feed.dart
|____ chat.dart
|_ config.dart
|_ main.dart

This is how our project’s structure will look like. The UI is going to be separated from the data source by creating services.

The most important file and the main focus of this tutorial will be @ably_service@. This is where we will write all functions and code communicating with Ably realtime.

If you cloned the project, you would notice @config_example.dart@ file, which has a few constants to hold the secret keys for Ably and Twitter APIs. Please paste your keys from the previous steps here, and rename the file to @config.dart@, you will also find notes to guide you inside the file.

**IMPORTANT:** We highly recommend not to commit this file into a public github repository.

h3. Packages and dependencies

In Flutter we can use packages to add extra functionality and make it easier to do many things without writing extra code. To use a package we just have to add the package name and version in @pubspec.yaml@, like this:

```[yaml]
dependencies:
  flutter:
    sdk: flutter
    
  ably_flutter_plugin: ^1.0.0+dev.2
  get_it: ^5.0.1
  syncfusion_flutter_charts: ^18.3.52
  http: ^0.12.2
  intl: ^0.16.1
  tweet_ui: ^2.4.2
  twitter_api: ^0.1.2
```

1. "ably_flutter_plugin":https://pub.dev/packages/ably_flutter_plugin
Ably’s Flutter package is a wrapper around existing iOS and Android packages, we will use it to connect to Ably realtime service. At the time of writing, it doesn’t yet have support for the web or desktop.
2. "get_it":https://pub.dev/packages/get_it
We’ll use the get_it package for locating the services and using them in the UI classes. It’s a popular package used to manage state in a Flutter app and help in separating Business Logic from UI, later in the tutorial we will see how to use it to connect our services with views.
3. "syncfusion_flutter_charts":https://pub.dev/packages/syncfusion_flutter_charts
Syncfusion provides a wide range of packages for Flutter, this charts package is easy to use and can be highly customized. We will use it for the charts in the dashboard page.
4. "intl":https://pub.dev/packages/intl
The most popular internationalization package for Flutter, we will use it for dates formatting.
5. "twitter_api":https://pub.dev/packages/twitter_api
Twitter has a complicated way of setting up a request, to simplify the process we will use this package which already takes care of all that complexity for us.
6. "http":https://pub.dev/packages/http
As we have a part where we will connect to Twitter’s API, this package is the easiest and most popular package to send http requests, but as you will see later, we won’t use it for this, we actually just needed it to override a simple problem with the twitter_api, it’s possible to go without it, but we will go through that part and explain why we will use it.
7. "tweet_ui":https://pub.dev/packages/tweet_ui
A ready made widget to display different types of tweets by only passing it the tweet json data.


h2. Building the Realtime Cryptocurrency Charts

Back to the Cryptocurrency prices hub you subscribed to in a previous step, each cryptocurrency will have a display name and a code, the code is used to connect to the specific channel of this currency on the Aply Hub, and display name is what the user will see.

We will make a const List that will have the currently available currencies on the hub, and if any new currency is added to the hub, we can add it by appending it to this list and the whole app will be updated.

```[flutter]
const List<Map> _coinTypes = [
  {
    "name": "Bitcoin",
    "code": "btc",
  },
  {
    "name": "Ethereum",
    "code": "eth",
  },
  {
    "name": "Ripple",
    "code": "xrp",
  },
];
```
