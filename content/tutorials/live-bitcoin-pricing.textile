---
title: Building a live bitcoin pricing chart in Angular using Ably and KendoUI
section: tutorials
index: 111
languages:
  - javascript
---

Realtime experiences are governing the tech world today. There's increasingly a need for realtime data, an event trigger telling everyone around the world within milliseonds of it happening. While moving this realtime data around poses to be a huge technical challenge, displaying this realtime data visually so a human can infer it usefully is another challenge. So, the DevRel teams at Ably and KendoUI came together to work on a small application to demonstrate how such challenges can be overcome by using the right SaaS products.

h2. What will we be building

In this tutorial, we show you how you can get a realtime data stream of changing bitcoin prices in USD using the Ably Hub, a marketplace for open streaming data sources and display it conveniently in a chart using KendoUI's Angular components. There are many other free-to-use open streaming data sources on the Ably Hub to choose from and so many other components offered by KendoUI that you can use to visually plot the realtime data easily. So, while this article would serve as a good primer on how to get started, feel free to explore other data sources and UI components. As a side node, you can also publish your own realtime data using Ably and share it with others an even host it publicly on the Ably Hub.

By the end of this tutorial, your Angular app would look as follows:

<a href="/images/tutorials/ably-kendo-ui/live-bitcoin-price-chart.jpg" target="_blank">
    <img src="/images/tutorials/ably-kendo-ui/live-bitcoin-price-chart.jpg" style="width: 100%" alt="Live bitcoin price chart demo">
</a>

h2. Step 1 - Setting up

h3. a. Getting an Ably API key

Before we get started, you will need an "Ably API key":https://support.ably.io/support/solutions/articles/3000030502-setting-up-and-managing-api-keys to authenticate with Ably. If you are not already signed up, you should "sign up now for a free Ably account":https://www.ably.io/signup.  Once you have an Ably account:

# "Log into your app dashboard":https://support.ably.io/support/solutions/articles/3000030053-how-do-i-access-my-app-dashboard
# Under "Your apps", click on "Manage app" for any app you wish to use for this tutorial, or create a new one with the "Create New App" button
# Click on the "API Keys" tab
# Copy the secret "API Key" value from your Root key and store it so that you can use it later in this tutorial
<a href="/images/tutorials/ably-account/copy-api-key.png" target="_blank">
  <img src="/images/tutorials/ably-account/copy-api-key.png" style="width: 100%" alt="Copy API Key screenshot">
</a>

h3. b. Installing all the pre-requisite libraries

Before we go ahead a create a new project, let's make sure we have a few pre-requisite libraries installed. We'll need:

* Node Package Manager (NPM): Angular requires Node.js installed in your system. "You can download and install NPM by following the instructions on their website":https://nodejs.org/en/.

* Angular CLI: You can use npm installed in the previous step to install the Angular Command Line Interface. The Angular CLI helps you with creating and managing your Angular apps with simple commands. You can run @npm install -g @angular/cli@ in your terminal or command line to install the Angular CLI globally on your system.

* Kendo UI's Angular chart component: TODO-KENDOUI

h3. c. Creating a new app using the Angular CLI

When you are in the directory of your choice, simply run @ng new live-bitcoin-chart@, where @live-bitcoin-chart@ is the name of our application. Feel free to replace it with a name of your choice.

h3. d. Serving the app locally to see the changes as you make them

The Angular CLI offers a very handy command @ng serve@ using which you can serve your app locally and see it update as you update the code.

h2. Step 2 - Creating a chart using Kendo UI's Angular chart component

TODO-KENDOUI

h2. Step 3 - Subscribing to a live bitcoing price data stream from the Ably Hub

The "Ably Hub":https://www.ably.io/hub is a marketplace for open realtime data streams. It is powered by Ably's API Streamer that lets you easily publish and subscribe to realtime data streams to and from various organizations or developer groups. For this article, we'll be using the "Bitcoin Pricing (USD)":https://www.ably.io/hub/products/20 product on the Ably Hub. Each product hosted on the Ably Hub comes with some "documentation on how you can subscribe to the data stream and start receiving updates":https://www.ably.io/hub/products/20#documentation. Some of the products are self-subscribe while others require the data producer to approve to decline your request to subscribe to the data source. The one we'll be using is self-subscribe.

So go ahead and "subscribe to the product on the Ably Hub":https://www.ably.io/hub/products/20 after logging into your Ably account. This will give your apps authenticated using API keys you earlier copied, access to the data stream in question. After this, you are all set to use this data stream in your app.

Let's get back to our Angular project. 

We'll begin by adding the Ably library, as a CDN link, in the @index.html@ file. Paste the following line of code:

```[html]
<script lang="text/javascript" src="https://cdn.ably.io/lib/ably.min-1.js"></script>
```

Next, in our chart component, i.e. @chart-ui-panel.component.ts@, let's declare @Ably@ with the type @any@, as follows:

```[typescript]
declare var Ably: any;
```

Inside the main class in the chart component, i.e. @ChartUiPanelComponent@, let's declare the types of some more variables that we'll use later:

```[typescript]
ably: any
usdPriceChannel: any
dataInDecimalcopy: any = 0;
```

Next, replace the contents of the @ngOnIniti()@ method with the following:

```[typescript]
this.ably = new Ably.Realtime('<YOUR-ABLY-API-KEY>');
// make sure you have access to this product by self-subscribing to it via the Ably Hub
this.usdPriceChannel = this.ably.channels.get('[product:ably-coindesk/bitcoin]bitcoin:usd');

this.usdPriceChannel.subscribe((msg) => {
  var timestamp = new Date(msg.timestamp)
  const dataInDecimal = msg.data.replace(/\,/g, '');

  // plot the data only when it has changed
  if (dataInDecimal != this.dataInDecimalcopy) {
    const dataCopy = this.series[0].data.slice(0);
    const timeCopy = this.timestamps[0].timedata.slice(0);
    dataCopy.push(parseFloat(dataInDecimal))
    timeCopy.push(timestamp.getHours() + ":" + timestamp.getMinutes() + ":" + timestamp.getSeconds())
    this.dataInDecimalcopy = dataInDecimal;

    // *optional: limit amount of data points shown
    if (dataCopy.length > 20) { dataCopy.shift(); }
    if (timeCopy.length > 20) { timeCopy.shift(); }
    // set the OG data equal to the copy
    this.series[0].data = dataCopy;
    this.timestamps[0].timedata = timeCopy;
  }
})
```

So, let's understand what the above code snippet does.

We started with initializing the Ably realtime client library using the API key. This is the basic authentication method to authenticate clients with Ably. While this is simple and easy to use for this demo, in reality, we always recommend that you use Token authentication in production level apps. Tokens expire at regular intervals and expect the clients to request new ones, thus ensuring better security as the API key is directly never exposed in the client side code.

Make sure to replace @<YOUR-ABLY-API-KEY>@ with your real API key that you copied and saved in Step 1.

After initialising the Ably realtime client library, we'll need to attach to the channel on which the required data is being published and then subscribe to it to continuously receive updates as they happen. The @ably.channels.get()@ let's you attach to a channel. In this case, we know the name of the channel from the "product documentation on the Ably Hub":https://www.ably.io/hub/products/20#documentation.

Next, the @subscribe()@ method lets you subscribe to the channel to receive realtime updates. After you've done that, Ably will automatically push updates over a duplex connection that remains open for the duration that the application is running. You can learn more about how WebSockets work from our in-depth explanatory article.

Whenever some data comes through as part of the @subscribe()@ method, we simply push the new data in the arrays we set up earlier - which serve as the data source for the Chart UI. We also get the timestamp to be displayed on the horizontal axis so the data points make more sense.

That's it, you have a neat chart that updates with live data based on real events!

h2. Further reading