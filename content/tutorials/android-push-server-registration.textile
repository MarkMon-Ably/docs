---
title: Android Push Notifications tutorial - Device registration via server
section: tutorials
index: 17
---

Ably can deliver native push notifications to devices using "Google’s Firebase Cloud Messaging":https://firebase.google.com/docs/cloud-messaging/ service. Native push notifications, unlike Ably’s "channel based pub/sub messaging":/realtime/channels, do not require the device to maintain a connection to Ably, as the underlying platform or OS is responsible for maintaining its own battery-efficient transport to receive push notifications. Therefore, native push notifications are commonly used to display visual notifications to users or launch a background process for an app in a battery-efficient manner.

In this tutorial, we'll see how you can setup and send push notifications to Android your app using the "Ably Push Notification service":/general/push. You will also learn how to test this integration by sending notifications to an Android device.

Ably supports two types of client permissions for access to the Push Notification service:

* @push-subscribe@: A client with this permission is a push target device, and it can manage its registration and any subscription for itself. However, it won't be able to manage push registrations or channel subscriptions for any other device.
* @push-admin@: A client with this permission has full access to the "Push admin API":https://www.ably.io/documentation/general/push/admin, and can manage registrations and subscriptions for all devices.

Read more about permissions (also called capabilities) in our "API documentation":/core-features/authentication#capabilities-explained.

By default, the Push Notification service provides the @AblyRealtime.push.activate@ method for the device to register itself with Ably directly, but you can instead delegate the device registration and subscription to your server. In this tutorial we will look at registration via server. You can jump to the "direct registration tutorial":/tutorials/ios-push-direct-registration if you'd rather like to have the device directly register itself with Ably.

<%= partial 'tutorials/_step-1-setup-free-account' %>

h2(#step2). Step 2 - Enabling Push in your Ably app

<%= partial 'shared/tutorials/_android_push_enable_permissions' %>

h2(#step3). Step 3 - Registering your app with FCM

<%= partial 'shared/tutorials/_android_push_fcm_register' %>

h2(#step4). Step 4 - Setting up a Node.js server for authentication

<%= partial 'shared/tutorials/_setup_node_push_auth' %>

h2(#step5). Step 5 - Using ngrok to make the server public

<%= partial 'shared/tutorials/_setup_ngrok' %>

h2(#step6). Step 6 - Adding the Google Services Gradle plugin

<%= partial 'shared/tutorials/_android_push_google_services' %>

h2(#step7). Step 7 - Adding the Ably client library to your Android project

<%= partial 'shared/tutorials/_android_push_library_setup' %>

h2(#step8). Step 8 - Adding device registration capability to the Node.js server and subscribing to the Push Notifications channel via server

<%= partial 'shared/tutorials/_android_push_server_registration' %>

h2(#step9). Step 9 - Sending device details to the server for registration

In the @MainActivity@ class, add the following below the @initAblyRuntime()@ function. In this function we send various device identifiers like @deviceId@, @clientId@ and @registrationToken@ to the server, so the device registration can be performed there.

```[java]
private void initAblyPush() throws AblyException {
    LocalDevice device = ablyRealtime.push.getActivationContext().getLocalDevice();
    if (device.push.recipient == null) {
        logMessage("Push not initialized. Please check Firebase settings");
        return;
    }
    String registrationToken = device.push.recipient.get("registrationToken").getAsString();
    if (registrationToken == null || registrationToken.length() == 0) {
        logMessage("Registration token cannot be null. Please check Firebase settings");
        return;
    }
    String deviceId = device.id;
    String clientId = getClientId();

    ServerAPI.getInstance().api().register(deviceId, registrationToken, clientId).enqueue(new Callback<NetResponse>() {
        @Override
        public void onResponse(Call<NetResponse> call, Response<NetResponse> response) {
            logMessage("Successfully registered: " + new Gson().toJson(response.body()));
            handler.sendMessage(handler.obtainMessage(SUCCESS, STEP_3));
        }

        @Override
        public void onFailure(Call<NetResponse> call, Throwable t) {
            logMessage("Error registering with server: " + t.getMessage());
            handler.sendMessage(handler.obtainMessage(FAILURE));
        }
    });
}
```

h2(#step10). Step 10 - Testing the app

<%= partial 'shared/tutorials/_testing_push_android' %>

h2(#further-reading). Further Reading

* Ably's "Push Notifications documentation":/general/push and info on "channels":/core-features/channels may be useful.

* "FCM documentation":https://firebase.google.com/docs/cloud-messaging/ is a good place to find more information on the use of Push Notifications in Android.

* You may also wish to deregister devices or get all of the stats related to your application implementing Push Notifications, such as the number and type of device registrations, etc. More information on how to do this can be found in the <a href="/general/push/admin">Push Admin API docs.</a>