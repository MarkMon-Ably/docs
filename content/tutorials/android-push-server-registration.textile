---
title: Android Push Notifications tutorial - Device registration via server
section: tutorials
index: 17
---

Ably can deliver native push notifications to devices using "Google’s Firebase Cloud Messaging":https://firebase.google.com/docs/cloud-messaging/ service. Native push notifications, unlike Ably’s "channel based pub/sub messaging":/realtime/channels, do not require the device to maintain a connection to Ably, as the underlying platform or OS is responsible for maintaining its own battery-efficient transport to receive push notifications. Therefore, native push notifications are commonly used to display visual notifications to users or launch a background process for an app in a battery-efficient manner.

In this tutorial, we'll see how you can setup and send push notifications to Android your app using the "Ably Push Notification service":/general/push. You will also learn how to test this integration by sending notifications to an Android device.

Ably supports two types of client permissions for access to the Push Notification service:

* @push-subscribe@: A client with this permission is a push target device, and it can manage its registration and any subscription for itself. However, it won't be able to manage push registrations or channel subscriptions for any other device.
* @push-admin@: A client with this permission has full access to the "Push admin API":https://www.ably.io/documentation/general/push/admin, and can manage registrations and subscriptions for all devices.

Read more about permissions (also called capabilities) in our "API documentation":/core-features/authentication#capabilities-explained.

By default, the Push Notification service provides the @AblyRealtime.push.activate@ method for the device to register itself with Ably directly, but you can instead delegate the device registration and subscription to your server. In this tutorial we will look at registration via server. You can jump to the "direct registration tutorial":/tutorials/ios-push-tutorial-direct if you'd rather like to have the device directly register itself with Ably.

<%= partial 'tutorials/_step-1-setup-free-account' %>

h2(#step2). Step 2 - Enabling Push in your Ably app

<%= partial 'shared/tutorials/_android_push_enable_permissions' %>

h2(#step3). Step 3 - Registering your app with FCM

<%= partial 'shared/tutorials/_android_push_fcm_register' %>

h2(#step4). Step 4 - Adding the Ably client library to your Android project

<%= partial 'shared/tutorials/_android_push_library_setup' %>

h2(#step5). Step 5 - Adding the Google Services Gradle plugin

<%= partial 'shared/tutorials/_android_push_google_services' %>

h2(#step6). Step 6 - Setting up a Node.js server for authentication

Borrow step from iOS after merge

h2(#step7). Step 7 - Adding device registration capability to the Node.js server and subscribing to the Push Notifications channel

<%= partial 'shared/tutorials/_android_push_server_registration' %>

h2(#step8). Step 8 - Using ngrok to make the server public

Borrow step from iOS after merge