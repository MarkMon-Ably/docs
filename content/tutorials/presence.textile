---
title: Presence Tutorial
section: tutorials
index: 10 # TODO ??
---

Presence enables clients to be aware of other clients that are currently ‚Äúpresent‚Äù on a channel. Each member present on a channel has a self-assigned name ‚Äî a "@client ID@" ‚Äî along with an optional payload that can be used to describe the member‚Äôs status or attributes. Presence allows you to quickly build apps such as chat rooms and multiplayer games by automatically keeping track of who is present in real time across any device.

When someone enters or leaves a channel, or updates their member data, a presence event is emitted to all presence subscribers on that channel. Subscribing to presence events makes it incredibly easy to build an app that shows, in real time, any changes to clients connected to Ably and present on a channel.

The optional payload can be a string, JSON object, JSON array, or binary data, same as with message data.

"Using our Presence API":/realtime/presence is easy. Let's get started.

<%= partial 'tutorials/_step-1-setup-free-account' %>

<%= partial 'tutorials/_install_ablyrealtime', vars(use_client_id: true, why_realtime: "be present and subscribe to presence messages") %>

h2. Step 3 - Enter the presence set

With Ably, you can be "attached":/realtime/channels-messages#channels to a channel (that is: be receiving messages published on that channel, or publishing them yourself) without necessarily being present on the channel. If you want to be present, and be seen by other users, you need to explicitly enter the presence set. For example, for a channel called "chatroom":

blang[javascript,nodejs].
  ```[javascript]
    var channel = realtime.channels.get('chatroom');
    channel.attach(function(err) {
      console.log('If no err, we're now attached to the channel');
      channel.presence.enter('hello', function(err) {
        console.log('If no err, we are now successfully present!');
      })
    });
  ```

  "See this step in Github":https://github.com/ably/tutorials/commit/#######################TODO

blang[ruby].
  ```[ruby]
    channel = ably.channels.get('chatroom')
      channel.attach do
        channel.presence.enter(data: 'hello') do
          puts "We are now in the presence set"
        end
      end
    end
  ```

  "See this step in Github":https://github.com/ably/tutorials/commit/######################TODO

We're now in the presence set. The name we'll appear as is the @client ID@ that we included in the Realtime constructor in step 2.

Similarly, we can call @channel.presence.leave@ to leave the presence set.

(Side note: while in this tutorial we had free choice of client id, in most situations you don't want that. Instead you want your server to constrain what @client ID@ people can use -- for example, to their logged-in username -- so that no-one can pretend to be someone else. When using "Token authentication":/general/authentication#token-authentication, your server can issue tokens with a specific @client ID@. When such a token is used by someone, their connection is bound to that @client ID@.)

A single @client ID@ may be present multiple times on the same channel, via different client connections; but each will be seen as a different member of the presence set, as they are differentiated by their unique @connection ID@. For example, if a client with ID ‚ÄúSarah‚Äù is connected to a chat channel on both a desktop and a mobile device simultaneously, ‚ÄúSarah‚Äù will be present twice in the presence member set with the same client ID, each with a different @connection ID@. A member of the presence set is therefore unique by the combination of the @client ID@ and @connection ID@ strings.

h3. Step 3a - Updating your presence data

In the previous step, we set a payload for our entry in the presence set: the string 'hello', which other clients will receive with the notification that we've entered. We can update that whenever we want, and other clients will receive the update:

blang[javascript,nodejs].
  ```[javascript]
    channel.presence.update('howdy!', function(err) {
      console.log('If no err, we have successfully updated our data');
    })
  ```

  "See this step in Github":https://github.com/ably/tutorials/commit/#######################TODO

blang[ruby].
  ```[ruby]
      channel.presence.update(data: 'hello') do
        puts "We have successfully updated our data"
      end
    end
  ```

  "See this step in Github":https://github.com/ably/tutorials/commit/######################TODO

h2. Step 4 - Get present members

The next thing to do is to find out who else is present. (Spoiler: it's currently just you).

blang[javascript,nodejs].
  ```[javascript]
    channel.presence.get(function(err, members) {
      console.log('There are ' + members.length + ' clients present on this channel');
      var first = members[0];
      console.log('The first member is ' + first.clientId);
      console.log('and their data is ' + first.data);
    })
  ```

  "See this step in Github":https://github.com/ably/tutorials/commit/#######################TODO

blang[ruby].
  ```[ruby]
      channel.presence.get do |members|
        puts "There are #{members.length} clients present on this channel"
        first = members[0]
        puts "The first member is #{first.clientId} and their data is #{first.data}"
      end
    end
  ```

  "See this step in Github":https://github.com/ably/tutorials/commit/######################TODO

As soon as you attached to the channel, it started to sync with Ably. When you make this call to get the presence set, it will (by default) wait until it has finished syncing before completing. For small presence sets this will take only a few milliseconds; for larger ones (with hundreds of members) the full sync can take a little longer.

And that's it. To see this in action, try out the live demo below.

h2(#live-demo). Live demo

<div id="qr-code" style="float: right; margin: 0 0 15px 15px; width: 200px; display: none; text-align: center">
  <div style="margin-top: 5px">Scan this on your mobile</div>
</div>

Enter your name and choose an avatar, then click 'Enter' to enter the presence set, and 'Leave' to leave it again. <a href="#" id="new-browser" target="_blank">Open this demo in other browser windows</a> and enter presence in them as well, and see how every window shows an up-to-date presence set.

Once you're entered, try tapping a different avatar to change it, and seeing it change in all the other windows in real time.

<div>
  <div>
    <p>
      Name: <input type="text" id="client-id" value="">
    </p>
    <p class="emoji-radios">
      Avatar:
      <% ['üë¶', 'üëß', 'üë®', 'üë©', 'üò∫'].each do |emoji| %>
        <label><input type="radio" name="avatar" value="<%= emoji %>" /><span class="emoji"><%= emoji %></span></label>
      <% end %>
    </p>

    <button id="enter-presence">Enter</button>
    <button id="leave-presence">Leave</button>
  </div>

  <ul id="presence-set">
  </ul>

  <textarea id="output" rows="10" style="width: 60%; margin-top: 10px; font-family: courier, courier new; background-color: #333; color: orange" disabled></textarea>
</div>

<img src="/images/ably-logo-white-outline.png" id="ably-qr-logo" style="visibility: hidden; width: 1px; height: 1px">

h2. Download tutorial source code

blang[javascript,nodejs].
  The complete source code for each step of "this tutorial is available on Github":https://github.com/ably/tutorials/commits/presence-javascript.

  We recommend that you clone the repo locally:

  bc[sh]. git clone https://github.com/ably/tutorials.git

  Checkout the tutorial branch:

  bc[sh]. git checkout presence-javascript

  And then run the demo locally by adding your "Ably API key":https://support.ably.io/support/solutions/articles/3000030502-setting-up-and-managing-api-keys to @example.html@ and opening the page in your browser.

blang[ruby].
  The complete source code for each step of "this tutorial is available on Github":https://github.com/ably/tutorials/commits/presence-ruby

  We recommend that you clone the repo locally:

  bc[sh]. git clone https://github.com/ably/tutorials.git

  Checkout the tutorial branch:

  bc[sh]. git checkout presence-ruby

  And then run the demo locally by adding your "Ably API key":https://support.ably.io/support/solutions/articles/3000030502-setting-up-and-managing-api-keys to @example.rb@ and running the demo @bundle exec ruby example.rb@

h2. Next steps

1. If you would like to find out more about how channels, publishing and subscribing works, see the "Realtime channels & messages documentation":/realtime/channels-messages
1. If you would like to find out more about how presence works, see the "Realtime presence documentation":/realtime/presence
2. Learn more about "Ably features":https://www.ably.io/features by stepping through our other "Ably tutorials":https://www.ably.io/tutorials
3. Gain a good technical "overview of how the Ably realtime platform works":https://www.ably.io/documentation/how-ably-works
4. "Get in touch if you need help":https://www.ably.io/contact

<script src="//cdn.ably.io/lib/ably.min.js"></script>
<script src="https://apis.google.com/js/api.js"></script>
<script type="text/javascript">
  window.addEventListener("load", function() {
    var ably = new Ably.Realtime({ authUrl: 'https://www.ably.io/ably-auth/token/docs' }),
        channelName = getQueryParam('channel') || getRandomChannelName(),
        channel = ably.channels.get(channelName),
        clientId,
        $output = $('#output');

    $('#client-id').val(getRandomName());

    ably.connection.on('connecting', function() {
      log('[Connecting to Ably...]');
    });

    ably.connection.on('connected', function() {
      log('[Connected to Ably] ...');
    });

    channel.attach(function(err) {
      if(err) {
        log('[Error attaching to channel: ' + err.toString() + ']');
      } else {
        log('[Attached to channel ' + channelName + ']');
        channel.presence.subscribe(function(msg) {
          log('[Received presence ' + msg.action + ' from ' + msg.clientId + ', avatar: ' + msg.data + ']');
          channel.presence.get(function(err, presenceSet) {
            $('#presence-set').html($.map(presenceSet, function(item) {
              return '<li><span class="emoji">' + (item.data || '') +'</span> ' + item.clientId + '</li>';
            }).join());
          });
        });
      }
    });

    $('button#enter-presence').on('click', function() {
      clientId = $.trim($('input#client-id').val());
      var avatar = $('input[name=avatar]:checked').val();

      if(!clientId) {
        log('You need to specify a client ID before you can enter presence');
        return;
      }

      log("[Entering...] ");
      channel.presence.enterClient(clientId, avatar, function(err) {
        if(err) {
          log('[Error entering presence: ' + err.toString() + ']');
        } else {
          log('[Successfully entered the presence set]');
          $('input#client-id').prop("disabled", true);
        }
      });
    });

    $('button#leave-presence').on('click', function() {
      if(!clientId) {
        // not entered
        return;
      };

      log("[Leaving...] ");
      channel.presence.leaveClient(clientId, function(err) {
        if(err) {
          log('[Error leaving presence: ' + err.toString() + ']');
        } else {
          log('[Successfully left the presence set]');
          $('input#client-id').prop("disabled", false);
        }
      });
    });

    $('input[type=radio][name=avatar]').change(function() {
      if(!clientId) {
        // not entered
        return;
      };
      var avatar = $('input[name=avatar]:checked').val();

      log("[Updating avatar...] ");
      channel.presence.updateClient(clientId, avatar, function(err) {
        if(err) {
          log('[Error updating avatar: ' + err.toString() + ']');
        } else {
          log('[Successfully updated avatar]');
        }
      });
    });

    /* Set up the link to open a new window with this random channel name */
    var urlWithChannel = document.location.href.replace(/#.*$/, '');
    if (urlWithChannel.indexOf('channel=') < 0) {
      urlWithChannel += (urlWithChannel.indexOf('?') < 0 ? '?' : '&') + "channel=" + escape(channelName);
    }
    $('a#new-browser').attr('href', urlWithChannel + "#live-demo");

    function setupQrCode() {
      var request = gapi.client.urlshortener.url.insert({
        'longUrl': urlWithChannel + "#live-demo"
      });
      request.then(function(response) {
        console.log(response.result.id);
        var qr = kjua({ text: response.result.id, size: 200, ecLevel: 'H', mode: 'image', image: $('img#ably-qr-logo')[0] });
        $('#qr-code').show().prepend(qr);
      }, function(reason) {
        console.error('Error: ' + reason.result.error.message);
      });
    }

    /* Set up QR code with a short URL from goo.gl */
    function init() {
      gapi.client.setApiKey('AIzaSyDXq2c1JjZTSUrzPZESxf4XP_tRu-N8r3A');
      gapi.client.load('urlshortener', 'v1').then(setupQrCode);
    }

    var started = new Date().getTime();
    function log(msg) {
      var timePassed = Math.round((new Date().getTime() - started) / 100) / 10;
      $output.text(timePassed + "s - " + msg + "\n" + $output.text());
    }

    gapi.load('client', init);
  });
</script>
