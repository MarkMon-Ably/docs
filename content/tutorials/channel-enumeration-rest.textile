---
title: Channel Enumeration using the REST API
section: tutorials
index: 14
---

The Ably Realtime service organizes the message traffic within applications into named "channels":https://www.ably.io/channels. Channels are the “unit” of message distribution; clients attach to any number of channels to subscribe to messages, and every message published to a channel is broadcasted to all subscribers. 

A lot of times, developers find it helpful to be aware of certain metadata related to their channels. This metadata can be accessed in the form of the channel lifecycle events, channel occupancy events or even channel enumeration, i.e. listing all the active channels associated with a particular API key in an app via our Channel Lifecycle API. In this tutorial, we'll see how to implement channel enumeration.

Channel enumeration is currently available only in our "REST API":/rest-api, however, you can still use our "REST client library":/rest to send requests to the REST API as you'll see further down this tutorial.

<%= partial 'tutorials/_step-1-setup-free-account' %>

h2(#permissions). Step 2 - Setting the right permissions on your API key

In order to be able to use the enumeration feature, you'll need to ensure that the @list-channels@ permission is enabled on your API key. "Permissions":/core-features/authentication/#capabilities-explained (or Privileges and capabilities, used interchangeably) restrict your API key from being used to perform certain actions such as publish, subscribe, etc. These privileges can be set on your API key via your account dashboard. Navigate to the API Keys tab of your dashaboard as seen in the image above and click on the settings button against the API key that you'd like to use.

<a href="/images/tutorials/channel-metadata-permissions.png" target="_blank">
    <img src="/images/tutorials/channel-metadata-permissions.png" style="width: 100%" alt="Channel meta data permissions">
    <!--TODO REPLACE IMAGE TO SHOW 'LIST-CHANNELS' PRIVELEGE -->
</a>

From the list of priveleges, enable the `list-channels` privilege and you are good to go.

h2(#performing-the-rest-request). Using Ably's REST library to perform a REST API request

As mentioned before, channel enumeration can currently be implemented only via our REST API. However, our REST library offers a "request() method":https://www.ably.io/documentation/rest/usage#request to perform REST requests directly from the raw REST API.

For the simplicity of this tutorial, we'll use "Basic authentication":/core-features/authentication#basic-authentication to perform the request. However, it is highly recommended to use "Token auth":/core-features/authentication#token-authentication on client side applications for better security and protection of your API key.

Ably REST API's endpoint for enumerating active channels is @/channels@. We'll perform a @GET@ request using the REST library. The result of this request will be an "HTTPPaginatedResponse":https://www.ably.io/documentation/rest/usage#http-paginated-response object. This allows the results to be returned back in a paginated fashion, that it returns a page of results and allows you to automatically request for more result pages until all of the available results are returned.

Let's begin with instantiating the Ably REST library using the API key.

```[javascript]
var ably = new Ably.Rest('<YOUR-API-KEY>')
```

Next, let's go ahead and perform the actual REST request using the @request()@ method:

```[javascript]
var URL = '/channels'
function enumerateChannels() {
    ably.request('get', URL, { limit: 100, direction: 'forwards' }, null, null, (err, results) => {
        if (err) {
            console.log('An error occurred; err = ' + err.toString());
        } else {
            console.log('Success! status code was ' + results.statusCode);
            console.log(results.items.length + ' items returned');
            console.log('Here' + results.items[0].data)
            results.first((err, resultPage) => {
                console.log(resultPage.items)
            })
            if (results.hasNext()) {
                results.next(function (err, nextPage) {
                    console.log(nextPage.items.length + ' more items returned');
                });
            }
        }
    })
}
```