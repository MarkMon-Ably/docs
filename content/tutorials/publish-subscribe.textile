---
title: Publish & Subscribe Tutorial
section: tutorials
index: 10
---

The Ably Realtime service organizes the message traffic within applications into named channels. Channels are the “unit” of message distribution; clients attach to any number of channels to subscribe to messages, and every message published to a channel is broadcasted to all subscribers. This scalable and resilient messaging pattern is commonly called pub/sub.

As you can publish a message to any channel, channels provide a means for you to filter data by topic or enforce access control for your subscribers. Only subscribers for those channesl will receive those messages.

Messages published can contain string, JSON object, JSON array or binary data payloads.

"Publishing and subscribing for messages on channels with our channel API":/realtime/channels-messages is trivial. Let's get started.

<%= partial 'tutorials/_step-1-setup-free-account' %>

<%= partial 'tutorials/_install_ablyrealtime', vars(why_realtime: "subscribe to messages") %>

h2. Step 3 - Subscribe to messages

Now that the library is installed, you can subscribe to messages published on channels. Every app can have an arbitrary number of channels that should be used to filter the messages received by subscribing clients. For example, if building a news feed, you may want one channel for politics named "politics", and another for sport named "sport". A user interested in "sport" can subscribe to the "sport" channel to receive updates. If that user is not subscribed to the "politics" channel, then "politics" updates will not be delivered to that user.

blang[java].
  ```[java]
    Channel channel = realtime.channels.get("sport");
    channel.subscribe(new Channel.MessageListener() {
        @Override
        public void onMessage(Message messages) {
            System.out.println("Message received: " + messages.data);
        }
    });
  ```

  "See this step in Github":https://github.com/ably/tutorials/commit/519d498

blang[android].
  ```[java]
    Channel channel = realtime.channels.get("sport");
    channel.subscribe(new Channel.MessageListener() {
        @Override
        public void onMessage(Message messages) {
            Toast.makeText(getBaseContext(), "Message received: "
                  + messages.data, Toast.LENGTH_SHORT).show();
        }
    });
  ```

  "See this step in Github":https://github.com/ably/tutorials/commit/0819d8a

blang[javascript].
  ```[javascript]
    var channel = realtime.channels.get("sport");
    channel.subscribe(function(msg) {
      alert("Received: " + JSON.stringify(msg.data));
    });
  ```

  "See this step in Github":https://github.com/ably/tutorials/commit/de53537

blang[nodejs].
  ```[nodejs]
    var channel = realtime.channels.get("sport");
    channel.subscribe(function(msg) {
      console.log("Received: " + JSON.stringify(msg.data));
    });
  ```

  "See this step in Github":https://github.com/ably/tutorials/commit/334016a

blang[ruby].
  ```[ruby]
    channel = ably.channels.get('sport')
    channel.subscribe do |msg|
      puts "Received: #{msg.data}"
    end
  ```

  "See this step in Github":https://github.com/ably/tutorials/commit/75becbf

blang[php].
  Update @index.php@ and add code below before @</script>@ tag:

  ```[javascript]
    var channel = realtime.channels.get("sport");
    channel.subscribe(function(msg) {
      alert("Received: " + msg.data);
    });
  ```

  "See this step in Github":https://github.com/ably/tutorials/commit/8657a47

blang[python].
  Update @index.html@ and add code below before @</script>@ tag:

  ```[javascript]
    var channel = realtime.channels.get("sport");
    channel.subscribe(function(msg) {
      alert("Received: " + msg.data);
    });
  ```

  "See this step in Github":https://github.com/ably/tutorials/commit/0e0b4d5

blang[swift].
  If you have not previously had experience building a basic user interface in Xcode, please refer to "Apple developer guide":https://developer.apple.com/library/content/referencelibrary/GettingStarted/DevelopiOSAppsSwift/Lesson2.html on how to build a simple UI and also learn more about "adding @IBOutlets@ and @IBActions@":https://developer.apple.com/library/content/referencelibrary/GettingStarted/DevelopiOSAppsSwift/Lesson3.html#//apple_ref/doc/uid/TP40015214-CH22-SW1.
  To be able to subscribe to a channel and send some initial messages, we will add a listener for new messages and add a button that publishes a message. Go to your @ExampleViewController@ and add a @UIButton@ from @Object library@. Name the action "subscribeAction".
  <a href="/images/tutorials/tutorials-swift-binding-UI-publish-subscribe.gif" target="_blank">
    <img src="/images/tutorials/tutorials-swift-binding-UI-publish-subscribe.gif" style="width: 100%" alt="Binding UI objects">
  </a>
  In a similar fashion add two @UILabels@ and connect one of them so that it will show the last message received. Name it "receivedMessageText".
  Your @ExampleViewController@ should look similar to this view:
  <a href="/images/tutorials/tutorials-swift-publish-subscribe-step3.png" target="_blank">
    <img src="/images/tutorials/tutorials-swift-publish-subscribe-step3.png" style="width: 60%" alt="Binding UI objects">
  </a>
  Add this code to previously added @IBAction@:

  ```[swift]
    let channel = client.channels.get("sport")
    self.receivedMessageText.text = ""

    channel.subscribe { message in
        self.receivedMessageText.text = "\(message.timestamp) \(message.data)"
      }
    }
  ```

  "See this step in Github":https://github.com/ably/tutorials/commit/9120f09

h2. Step 4 - Publishing a message

Publishing a message on a channel ensures that any number of subscribers on that channel receive the message in real time. To publish a message on the "sports" channel we simply call the publish method on the channel, specify an optional message event name, and provide the payload as the second argument.

blang[java].
  ```[java]
    Channel channel = realtime.channels.get("sport");
    channel.publish("update", "{ \"team\": \"Man United\" }", new CompletionListener() {
        @Override
        public void onSuccess() {
            System.out.println("Message sent");
        }

        @Override
        public void onError(ErrorInfo reason) {
            System.out.println("Message not sent, error occurred: "
                  + reason.message);
        }
    });
  ```

  "See this step in Github":https://github.com/ably/tutorials/commit/098e674

blang[android].
  ```[java]
    Channel channel = realtime.channels.get("sport");
    channel.publish("update", "{ \"team\": \"Man United\" }", new CompletionListener() {
        @Override
        public void onSuccess() {
            Toast.makeText(getBaseContext(), "Message sent",
            Toast.LENGTH_SHORT).show();
        }

        @Override
        public void onError(ErrorInfo reason) {
            Toast.makeText(getBaseContext(), "Message not sent, error occurred: "
                  + reason.message, Toast.LENGTH_SHORT).make();
        }
    });
  ```

  "See this step in Github":https://github.com/ably/tutorials/commit/110bd69

blang[javascript].
  ```[javascript]
    var channel = realtime.channels.get("sport");
    channel.publish("update", { "team": "Man United" });
  ```

  "See this step in Github":https://github.com/ably/tutorials/commit/140583e

blang[nodejs].
  ```[nodejs]
    var channel = realtime.channels.get("sport");
    channel.publish("update", { "team": "Man United" });
  ```

  "See this step in Github":https://github.com/ably/tutorials/commit/f831895

blang[ruby].
  ```[ruby]
    channel = ably.channels.get('sport')
    channel.publish 'update', 'team' => 'Man United'
  ```

  "See this step in Github":https://github.com/ably/tutorials/commit/212b65b

blang[php].
  Create @publish.php@ file which will be responsible for publishing messages:

  ```[php]
    <?php
    require_once 'ably.php';
    if (isset($_POST['message']) && !empty($_POST['message'])) {
        $channel = $ably->channels->get('sport');
        $channel->publish('update', $_POST['message']);
    }
    ?>
    <html>
      <body>
        <h1>Input message</h1>
        <form method="post">
          <input type="text" name="message">
          <input type="submit" value="Publish!">
        </form>
      </body>
    </html>
  ```

  And to simplify it even further, let's add an @iframe@ so that we can publish messages from the same browser window. Add code below just after the @<h1>Publish & Subscribe sample</h1>@:

  ```[html]
    <iframe src="publish.php"></iframe>
  ```

  If you would like to try running the server now, you can do so with @php -S 0.0.0.0:8000@. Once running, open your browser to "http://localhost:8000/":http://localhost:8000/ and you should see "Publish & Subscribe sample" and box with "input message", try it out.

  "See this step in Github":https://github.com/ably/tutorials/commit/534af85

blang[python].
  Let's create resource for @/publish@, it will serve as message publisher:

  ```[python]
    class publish:
        def GET(self):
            return render.publish()

        def POST(self):
            message = web.input().get('message')
            if message is not None:
                channel = client.channels.get('sport')
                channel.publish('update', message)
            raise web.seeother('/publish')
  ```

  And create @publish.html@ in @templates@ directory with message form:

  ```[html]
    <html>
      <body>
        <h1>Input message</h1>
        <form method="post">
          <input type="text" name="message">
          <input type="submit" value="Publish!">
        </form>
      </body>
    </html>
  ```

  And to simplify it even further, let's add an @iframe@ so that we can publish messages from the same browser window. Add code below to @index.html@, just after the @<h1>Publish & Subscribe sample</h1>@:

  ```[html]
    <iframe src="/publish"></iframe>
  ```

  Let's update urls:

  ```[python]
    urls = (
        '/', index,
        '/publish', publish
    )
  ```

  If you would like to try running the server now, you can do so with @python server.py@. Once running, open your browser to "http://localhost:8080/":http://localhost:8080/ and you should see the text "Publish & Subscribe sample" and box with "input message", try it out.

  "See this step in Github":https://github.com/ably/tutorials/commit/33826f9

blang[swift].
  In this step add another @UIButton@ and bind it to action named "publishAction". Also, add one more @UILabel@ and an @UITextField@ - bind it in your code as "messageText" . Thanks to that users will be able to write their own messages.
  Your view should now look like this:
  <a href="/images/tutorials/tutorials-swift-publish-subscribe-step4.png" target="_blank">
    <img src="/images/tutorials/tutorials-swift-publish-subscribe-step4.png" style="width: 60%" alt="Binding UI objects">
  </a>
  You can also check if an error occurred while sending the message.
  Add this code to previously added @IBAction@:

  ```[swift]
    channel.publish("update", data: messageText.text) { error in
      guard error == nil else {
        return self.showAlert("Error", message:
                              "There was an error while sending the message. \(error)")
      }
    }
  ```

  "See this step in Github":https://github.com/ably/tutorials/commit/d035f1a

We're done, it's that simple. We have now shown you how to subscribe to messages on a channel, and then publish messages on a channel. To see this in action, try out the live demo below.

h2(#live-demo). Live demo

<div id="qr-code" style="float: right; margin: 0 0 15px 15px; width: 200px; display: none; text-align: center">
  <div style="margin-top: 5px">Scan this on your mobile</div>
</div>

<a href="#" id="new-browser" target="_blank">Open this demo in a new browser window</a> to see publish & subscribe in action.  Alternatively, scan the QR code to see the published message delivered in real time.

<div>
  <div>
    Message: <input type="text" id="message-text" value="Wowser, that was fast"> <button id="send-message">Send a message</button>
  </div>
  <textarea id="result" rows="10" style="width: 60%; margin-top: 10px; font-family: courier, courier new; background-color: #333; color: orange" disabled></textarea>
</div>

<img src="/images/ably-logo-white-outline.png" id="ably-qr-logo" style="visibility: hidden; width: 1px; height: 1px">

h2. Download tutorial source code

blang[java].
  The complete source code for each step of "this tutorial is available on Github":https://github.com/ably/tutorials/commits/publish-subscribe-java.

  We recommend that you clone the repo locally:

  bc[sh]. git clone https://github.com/ably/tutorials.git

  Checkout the tutorial branch:

  bc[sh]. git checkout publish-subscribe-java

  Then you can run project inside your console. Be sure to switch into project's directory and then use these commands in your terminal:

  bc[sh]. ./gradlew assemble
  ./gradlew run

  Don't forget to replace your @ExampleActivity#API_KEY@ field with "Ably API key":https://support.ably.io/support/solutions/articles/3000030502-setting-up-and-managing-api-keys.

blang[android].
  The complete source code for each step of "this tutorial is available on Github":https://github.com/ably/tutorials/commits/publish-subscribe-android.

  We recommend that you clone the repo locally:

  bc[sh]. git clone https://github.com/ably/tutorials.git

  Checkout the tutorial branch:

  bc[sh]. git checkout history-android

  And then run the demo on your Android device. Check "Android Developers website":https://developer.android.com/training/basics/firstapp/running-app.html if you are not familiar on how to run an Android Project. Don't forget to replace your @ExampleActivity#API_KEY@ field with "Ably API key":https://support.ably.io/support/solutions/articles/3000030502-setting-up-and-managing-api-keys.

blang[javascript].
  The complete source code for each step of "this tutorial is available on Github":https://github.com/ably/tutorials/commits/publish-subscribe-javascript.

  We recommend that you clone the repo locally:

  bc[sh]. git clone https://github.com/ably/tutorials.git

  Checkout the tutorial branch:

  bc[sh]. git checkout publish-subscribe-javascript

  And then run the demo locally by adding your "Ably API key":https://support.ably.io/support/solutions/articles/3000030502-setting-up-and-managing-api-keys to @example.html@ and opening the page in your browser.

blang[nodejs].
  The complete source code for each step of "this tutorial is available on Github":https://github.com/ably/tutorials/commits/publish-subscribe-nodejs.

  We recommend that you clone the repo locally:

  bc[sh]. git clone https://github.com/ably/tutorials.git

  Checkout the tutorial branch:

  bc[sh]. git checkout publish-subscribe-nodejs

  And then run the demo locally by adding your "Ably API key":https://support.ably.io/support/solutions/articles/3000030502-setting-up-and-managing-api-keys to @example.js@ and running the demo @node example.js@

blang[ruby].
  The complete source code for each step of "this tutorial is available on Github":https://github.com/ably/tutorials/commits/publish-subscribe-ruby

  We recommend that you clone the repo locally:

  bc[sh]. git clone https://github.com/ably/tutorials.git

  Checkout the tutorial branch:

  bc[sh]. git checkout publish-subscribe-ruby

  And then run the demo locally by adding your "Ably API key":https://support.ably.io/support/solutions/articles/3000030502-setting-up-and-managing-api-keys to @example.rb@ and running the demo @bundle exec ruby example.rb@

blang[php].
  The complete source code for each step of "this tutorial is available on Github":https://github.com/ably/tutorials/commits/publish-subscribe-php

  We recommend that you clone the repo locally:

  bc[sh]. git clone https://github.com/ably/tutorials.git

  Checkout the tutorial branch:

  bc[sh]. git checkout publish-subscribe-php

  And then run the demo locally by adding your "Ably API key":https://support.ably.io/support/solutions/articles/3000030502-setting-up-and-managing-api-keys to @ably.php@, install composer dependencies with:

  bc[sh]. composer install

  and run the web server @php -S 0.0.0.0:8000@.

blang[swift].
  The complete source code for each step of "this tutorial is available on Github":https://github.com/ShelinHime/tutorials/commits/publish-subscribe-swift

  We recommend that you clone the repo locally:

  bc[sh]. git clone https://github.com/ably/tutorials.git

  Checkout the tutorial branch:

  bc[sh]. git checkout publish-subscribe-swift

  In the project directory simply run:

  bc[sh]. pod install

  Open @example.xcworkspace@ and build the demo on your preferred iPhone simulator or device. Don't forget to replace your @ExampleViewController#API_KEY@ field by adding your "Ably API key":https://support.ably.io/support/solutions/articles/3000030502-setting-up-and-managing-api-keys to @ExampleViewController.swift@.

blang[python].
  The complete source code for each step of "this tutorial is available on Github":https://github.com/ably/tutorials/commits/publish-subscribe-python

  We recommend that you clone the repo locally:

  bc[sh]. git clone https://github.com/ably/tutorials.git

  Checkout the tutorial branch:

  bc[sh]. git checkout publish-subscribe-python

  And then run the demo locally by adding your "Ably API key":https://support.ably.io/support/solutions/articles/3000030502-setting-up-and-managing-api-keys to @server.py@, install the required libraries:

  bc[sh]. pip install ably web.py

  and run the web server @python server.py@.

h2. Next steps

1. If you would like to find out more about how channels, publishing and subscribing works, see the "Realtime channels & messages documentation":https://www.ably.io/documentation/realtime/channels-messages
2. Learn more about "Ably features":https://www.ably.io/features by stepping through our other "Ably tutorials":https://www.ably.io/tutorials
3. Gain a good technical "overview of how the Ably realtime platform works":https://www.ably.io/documentation/how-ably-works
4. "Get in touch if you need help":https://www.ably.io/contact

<script src="//cdn.ably.io/lib/ably.min.js"></script>
<script src="https://apis.google.com/js/api.js"></script>
<script type="text/javascript">
  window.addEventListener("load", function() {
    var ably = new Ably.Realtime({ authUrl: 'https://www.ably.io/ably-auth/token/docs' }),
        channelName = getQueryParam('channel') || getRandomChannelName(),
        channel = ably.channels.get(channelName),
        $result = $('#result');

    ably.connection.on('connecting', function() {
      log("[Connecting to Ably...]");
    });

    ably.connection.on('connected', function() {
      log("[Connected to Ably] Waiting for messages...");
    });

    channel.subscribe(function(msg) {
      log("[Received] " + msg.data);
    });

    $('button#send-message').on('click', function() {
      var text = $('input#message-text').val();
      log("[Publishing...] " + text);
      channel.publish('msg', text);
    });

    /* Set up the link to open a new window with this random channel name */
    var urlWithChannel = document.location.href.replace(/#.*$/, '');
    if (urlWithChannel.indexOf('channel=') < 0) {
      urlWithChannel += (urlWithChannel.indexOf('?') < 0 ? '?' : '&') + "channel=" + escape(channelName);
    }
    $('a#new-browser').attr('href', urlWithChannel + "#live-demo");

    function setupQrCode() {
      var request = gapi.client.urlshortener.url.insert({
        'longUrl': urlWithChannel + "#live-demo"
      });
      request.then(function(response) {
        console.log(response.result.id);
        var qr = kjua({ text: response.result.id, size: 200, ecLevel: 'H', mode: 'image', image: $('img#ably-qr-logo')[0] });
        $('#qr-code').show().prepend(qr);
      }, function(reason) {
        console.error('Error: ' + reason.result.error.message);
      });
    }

    /* Set up QR code with a short URL from goo.gl */
    function init() {
      gapi.client.setApiKey('AIzaSyDXq2c1JjZTSUrzPZESxf4XP_tRu-N8r3A');
      gapi.client.load('urlshortener', 'v1').then(setupQrCode);
    }

    var started = new Date().getTime();
    function log(msg) {
      var timePassed = Math.round((new Date().getTime() - started) / 100) / 10;
      $result.text(timePassed + "s - " + msg + "\n" + $result.text());
    }

    gapi.load('client', init);
  });
</script>
