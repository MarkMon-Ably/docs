---
title: Android Push Notifications tutorial - Direct device registration [WIP]
section: tutorials
index: 23
---

Ably can deliver native Push Notifications to Android devices using "Firebase Cloud Messaging":https://firebase.google.com/docs/cloud-messaging/. Native Push Notifications, unlike our "channel-based Pub/Sub messaging":/realtime/channels/, do not require the device to maintain a connection to Ably, as the underlying platform or OS is responsible for maintaining its own battery efficient transport to receive Push Notifications. Therefore, native Push Notifications are commonly used to display visual notifications to users or launch a background process for an app in a battery efficient manner.

In this tutorial, we'll see how to set up and send Push Notifications to your Android app using "Ably's Push Notification service":/general/push. 

Ably supports two types of client permissions for access to the Push Notification service:

* "@push-subscribe@":/general/push/activate-subscribe: A client with this permission is a push target device, and it can manage the registration and subscription for itself. However, it won't be able to manage push registrations or channel subscriptions for any other device.
* "@push-admin@":/general/push/admin: A client with this contain permission has full access to the "Push Admin API":https://www.ably.io/documentation/general/push/admin and can manage registrations and subscriptions for all devices.

Read more about permissions (also called capabilities) in our "API documentation":/core-features/authentication#capabilities-explained.

To enable Push Notifications on your device, it must be registered with Ably first. This can be done in two ways; you can either have the device register itself directly with Ably or delegate the registration work to your app server, which would then register the device with Ably on its behalf. In this tutorial we'll implement direct device registration. You can jump to "another tutorial":/tutorials/android-push-server-registration if you'd rather like to have a server register the device with Ably.

<%= partial 'tutorials/_step-1-setup-free-account' %>

h2(#step2). Step 2 - Enabling Push in your Ably app

<%= partial 'shared/tutorials/_android_push_enable_permissions' %>

h2(#step3). Step 3 - Registering your app with FCM

<%= partial 'shared/tutorials/_android_push_fcm_register' %>

h2(#step4). Step 4 - Adding the Ably client library to your Android project

<%= partial 'shared/tutorials/_android_push_library_setup' %>

h2(#step5). Step 5 - Adding the Google Services Gradle plugin

<%= partial 'shared/tutorials/_android_push_google_services' %>

h2(#step6). Step 6 - Setting up a Node.js server for authentication

<%= partial 'shared/tutorials/_setup_node_push_auth' %>

h2(#step7). Step 7 - Directly registering the devices with FCM

TODO

h2(#step8). Step 8 - Testing the app

<%= partial 'shared/tutorials/_testing_push_android' %>