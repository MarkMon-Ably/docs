---
title: DSX subscription tutorial
section: tutorials
index: 12
---

A Data Stream Exchange (DSX) platform allows businesses to publish streams of data that other businesses or applications can subscribe to, in order to receive realtime updates.

In this tutorial, we will establish a DSX subscriber account and connect to a real-world data stream to receive realtime updates. If you're new to Ably, we recommend you to check out our basic "Pub/Sub tutorials":https://www.ably.io/tutorials#tut-client-side to get a good overview. Let's get started.

<%= partial 'tutorials/_step-1-setup-free-account' %>

h2. Step 2 - Confirming your subscription using the DSX dashboard

For this tutorial, we'll be making use of the *London tube schedule updates* data stream containing the data provided by "Transport For London (TFL)":https://tfl.gov.uk/. As the name suggests, TFL is a local government body responsible for the transport system in Greater London, England. All transport related data can be obtained for free from their official website. 

p(did-you-know). Most companies make their commercial and open data streams publicly available through the "Ably Hub":/hub, which is a hosted catalog of data streams. The data stream we'll be using in this tutorial is listed as "London tube schedule updates":https://www.ably.io/hub/products/10 on the "Ably Hub":https://www.ably.io/hub/. These products require the owner to confirm access, and others may charge for usage of their product.

Ideally, a producer of certain data would push or publish their data directly into Ably DSX, for others to subscribe to. However, to demonstrate the functionality of DSX, Ably is pulling TFL's data from various public sources and making it available as a realtime stream that anyone can then subscribe to.

The full documentation for the TFL data stream can be found on the "TFL DSX Source page":https://dsx-sources.herokuapp.com/source/tfl.

After you've been added as a subscriber by the data producer, you will be able see that data stream listed on your DSX consumer dashboard. To reach that page, log into your Ably DSX account and select the consumer dashboard as shown below:

<a href="/images/tutorials/dsx-dashboard.png" target="_blank">
  <img src="/images/tutorials/dsx-dashboard.png" style="width: 100%" alt="DSX Dashboard">
</a>

To confirm the subscription to the said data stream, switch to the 'Subscriptions' tab, and you should see the data stream listed there. You can also see the message quota, license type and other information related to your subscription to the said data stream.

<a href="/images/tutorials/subscriptions-tab-dsx.png" target="_blank">
  <img src="/images/tutorials/subscriptions-tab-dsx.png" style="width: 100%" alt="DSX Dashboard">
</a>

Now that your account has a valid subscription with the product let's go ahead and write some code to start receiving updates.

h2. Step 3 - Buiding the HTML to display results

In this tutorial, we'll be subscribing to arrival updates for London tube lines at certain stations, that you can select from a drop-down menu. Go ahead and paste the following basic HTML in a file and name it @index.html@. Note that each of the options in the drop-down menu corresponds to the respective Naptan Code as illustrated in the "Ably-TFL product documentation":https://dsx-sources.herokuapp.com/source/tfl. The Naptan Code is a combination of @line@ and @Station ID@. Note that we've also added a reference to Ably's JavaScript library, the jQuery library and a @main.js@ file in which we'll include our app logic.

```[html]
<html>
<head>
  <title>DSX subscriber tutorial</title>
  <script src="https://cdn.ably.io/lib/ably.min-1.js" crossorigin="anonymous"></script>
  <script
  src="https://code.jquery.com/jquery-3.3.1.min.js"
  integrity="sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8="
  crossorigin="anonymous"></script>
</head>
<body>
  <div>
    <div>
      Station:
      <select id="naptan-code">
        <option value="northern:940GZZLUEUS">Euston Underground Station</option>
        <option value="northern:940GZZLUKSX">Kings Cross Underground Station</option>
        <option value="jubilee:940GZZLUWSM">Westminster Underground Station</option>
        <option value="northern:940GZZLUWLO">Waterloo Underground Station</option>
      </select>
    </div>
  </div>
  <table id="table-tfl" class="c-flashbox" style="margin-top: 20px;">
    <thead>
      <tr>
        <th>Due</th>
        <th>Destination</th>
        <th>Platform</th>
        <th>Line</th>
      </tr>
    </thead>
    <tbody>
    </tbody>
  </table>
<script src="main.js"></script>
</body>
</html>
```

h2. Step 4 - Determining the channel names

In DSX, the channels available in any product are be determined by the naming convention described below:

[product:<strong>DSX-ID</strong>]:<strong>NAMESPACE</strong>:<strong>OPTIONAL-CATEGORY</strong>

For the current product, we have three categories of channels, each containing a different set of data:

1. Arrivals at a station, with namespace @tube:{{line}}:{{station}}:arrivals@
2. Disruptions on a line, with namespace @tube:{{line}}:disruptions@
3. Disruptions on all lines, with namespace @tube:disruptions@

h2. Step 5 - Attaching and subscribing to a channel

Let's go ahead and attach our client to the arrivals channel, i.e. the first one from the list above. If you are already a user of "Ably's DSN platform":/realtime/channels, you'll observe that the subscription is established in the same way in DSX, as in DSN.

First, let's instance the Ably client as shown below. Make sure to replace the placeholder with your actual API key.

```[javascript]
var apiKey = 'YOUR-API-KEY';
var ably = new Ably.Realtime(key: apiKey);
```

Note that in this tutorial we've used the API key directly to authenticate with Ably. This is generally "not a recommended authentication strategy":/best-practice-guide#using-api-key-client-side as the API key is prone to compromise while traveling on the internet. Ably offers "Token Authentication":/core-features/authentication#token-authentication which is more secure and is generally used in production environments. 

Next, we need to add a subscription to the channel @[product:TFL/Tube]tube:' + name + ':arrivals@ where 'name' will be the name of the station chosen by the user from drop-down menu in our HTML above.

In the new @main.js@ file, after declaring the required variables, let's go ahead and add a generic subscription function that'll check if the client is already attached to a channel related to one of the stations, detach if so and freshly attach to the correct channel corresponding to the currently selected station.

```[javascript]
var tableBodyTfl = document.getElementById('table-tfl').getElementsByTagName('tbody')[0];
var channelTfl;

function subscribeToChannel(name, channel, subscribeFunction) {
  if (channel) {
    channel.detach(function(err) {
      if(err) {
        console.log("Error detaching: " + err);
      } else {
        subscribeFunction(name);
      }
    });
  } else {
      subscribeFunction(name);
    } 
}
```
Next, let's define how we call the function above. The subscription can be set up for the default selected station initially, but we'd like our client to subscribe to a new channel whenever the user selects a new station from the drop-down menu. Add the following to your @main.js@ file below the previously added code snippet.

```[javascript]
$('select#naptan-code').on('change', function() {
    subscribeToChannel($('select#naptan-code').val(), channelTfl, subscribeTfl);
});

subscribeToChannel($('select#naptan-code').val(), channelTfl, subscribeTfl);
```
Now let's define the actual subscription function i.e @subscribeTfl()@ as follows:

```[javascript]
 function subscribeTfl(name) {
    channelTfl = ably.channels.get('[product:TFL/Tube]tube:' + name + ':arrivals');
    channelTfl.subscribe(function(msg) {
      //update the table with the data returned
      //console.log(msg.data);
    });
  }
```

At this point, we've attached our client to the required channel, and it should be successfully receiving updates in realtime. To make sure that everything is working as expected up until now, you can log the results in your console.

Getting all the updates? Yay! Let's now display them in the table that we created. Go ahead and add the following update function and invoke it from the @subscribeTfl@ function that we defined above. The @subscribeTfl()@ function is repeated for convenience:

```[javascript]
 function subscribeTfl(name) {
    channelTfl = ably.channels.get('[product:TFL/Tube]tube:' + name + ':arrivals');
    channelTfl.subscribe(function(msg) {
     updateTfl(msg.data);
    });
  }

 function updateTfl(arrivals) {
    arrivals = arrivals.reverse();
    let newBodyTfl = document.createElement('tbody');
    arrivals.forEach((arrival) => {
      let arrivalTime = new Date(arrival.ExpectedArrival).toLocaleTimeString();
      let tmpTableRow = newBodyTfl.insertRow(0);
      tmpTableRow.insertCell(0).innerHTML = arrivalTime;
      tmpTableRow.insertCell(1).innerHTML = arrival.Towards;
      tmpTableRow.insertCell(2).innerHTML = arrival.PlatformName;
      tmpTableRow.insertCell(3).innerHTML = arrival.LineName;
    });
    tableBodyTfl.parentNode.replaceChild(newBodyTfl, tableBodyTfl);
    tableBodyTfl = newBodyTfl;
  }
```

As you can see, the @updateTfl()@ function updates the table whenever a new update is received on the channel. We are all set. However, do you see the data changing? It's surely hard to observe the change. Let's add a minor style detail that flashes a color over the table when any data is updated, giving us a better visual way to see realtime data in action. 

Go ahead and add the following code in a new CSS file and name it @flashbox.css@

```[css]
.c-flashbox {
    display: inline-block;
    overflow: auto;
}

.c-flashbox__positive-flash {
    -webkit-animation-name: positive-flash;
    -webkit-animation-duration: 3000ms;
    -webkit-animation-iteration-count: 1;
    -webkit-animation-timing-function: ease-in-out;
}

@-webkit-keyframes positive-flash {
    0% {
        background-color: White;
    }
    22% {
        background-color: Green;
    }
    77% {
        background-color: Green;
    }
    100% {
        background-color: White;
    }
}
```

The two final steps would be to reference this CSS from our HTML file and add a bit of logic in the JavaScript to highlight new bits of data with a flash.

```[html]
<link rel="stylesheet" type="text/css" href="flashbox.css">
```

```[javascript]
  function updateTfl(arrivals) {
    arrivals = arrivals.reverse();
    let newBodyTfl = document.createElement('tbody');
    arrivals.forEach((arrival) => {
      let arrivalTime = new Date(arrival.ExpectedArrival).toLocaleTimeString();
      let tmpTableRow = newBodyTfl.insertRow(0);
      tmpTableRow.insertCell(0).innerHTML = arrivalTime;
      tmpTableRow.insertCell(1).innerHTML = arrival.Towards;
      tmpTableRow.insertCell(2).innerHTML = arrival.PlatformName;
      tmpTableRow.insertCell(3).innerHTML = arrival.LineName;
    });

    //new flashbox added here
    for(let i=0; i < arrivals.length; i++) {
        let arrivalTime = new Date(arrivals[arrivals.length - i - 1].ExpectedArrival).toLocaleTimeString();
        if(tableBodyTfl.rows[i] != undefined && newBodyTfl.rows[i] != undefined){
          if(tableBodyTfl.rows[i].cells[0].innerHTML != arrivalTime) {
            newBodyTfl.rows[i].classList.add("c-flashbox__positive-flash");
          }
        }
      }

    tableBodyTfl.parentNode.replaceChild(newBodyTfl, tableBodyTfl);
    tableBodyTfl = newBodyTfl;
  }
```

h2. Next steps

1. Gain a good technical "overview of how the Ably realtime platform works":https://www.ably.io/documentation/how-ably-works
2. Find out more about how channels, publishing and subscribing works, see the Realtime "channels":/realtime/channels & "messages":/realtime/messages documentation or follow a simple "Pub/Sub tutorial":/tutorials#tut-client-side
3. Learn more about "Ably DSX":/dsx
4. Explore the "Ably Hub":/hub to see the available data streams you can use
5. "Get in touch if you need help":https://www.ably.io/contact
