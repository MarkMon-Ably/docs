---
authors:
- author_bio: ''
  author_image: 
  author_name: Steven Applebly
  author_profile_url: 
category:
- integrations
date_published: '2016-07-22T02:38:02+01:00'
excerpt: Learn how to persist messages into AWS S3.
group: sdk
index: 10
languages:
- javascript
last_updated: '2021-11-19T16:35:45+00:00'
level: easy
platform: mixed
reading_time: 5 â€” 10
section: tutorials
tags:
- Integrations
- AWS Lambda
title: AWS Persistence in S3
meta_description: "How to persist data into S3."
meta_keywords: "Ably realtime, AWS Lambda Functions, integrations"
---

Ably "webhooks":/general/events enable users to configure custom rules that react to channel events. For example, triggering an action when a message is sent, or when a user joins the channel. You can use our integration with "AWS Lambda":https://aws.amazon.com/lambda/ to create these rules.

In this tutorial you will learn how to create a channel rule that intercepts messages sent to a channel and persists them to a file in "AWS Simple Storage Service (S3)":https://aws.amazon.com/s3/.

###. TODO: update the GH repo link

The solution code for this tutorial is "available on Github":https://github.com/ably/tutorials/TODO

This repository contains two files:

* @index.html@ - A web page that enables users to subscribe to a channel and publish messages
* @lambda_function.py@ - The AWS Lambda function that persists data to S3

To follow this tutorial you will need an AWS account. If you don't have an AWS account you can "create one for free":https://aws.amazon.com/free.

h2(#set-up-user). Create an AWS user

Once you've logged into AWS you need to set up a user capable of using both Lambda and S3. In this tutorial, you will grant fairly  high-level policies but you may want to employ stricter policies in a production deployment.

From the "AWS dashboard":http://console.aws.amazon.com/:

# In the search bar, type "IAM" and press enter
# Click the *IAM* link in the search results
# Select *Users* from the left hand menu
# Click the *Add users* button
# Enter @ably-persistence@ as the user name
# Check the *Access-key - Programmatic access* checkbox
# Click the *Next: permissions* button at the bottom of the page
# On the *Set permissions* page:
## Select *Attach existing policies directly*
## Type @AWSLambdaRole@ into the search box
## Check the *AWSLambdaRole* checkbox
# Click the *Next: Tags* button at the bottom of the page
# On the optional Add tags page, click the *Next: Review* buttomn at the bottom of the page
# Click @Create user@

The page displays your new user with its associated *Access key ID* and *Secret access key*. Copy these keys and paste them somewhere: you will need them later in this tutorial.

h2(#set-up-s3). Configure storage with S3

In this tutorial you will use S3 to store a simple plain text file. S3 is one of many scalable storage solutions in the AWS ecosystem but you can apply the principles shown in this tutorial to persist data with other services.

The first step is to set up an S3 bucket to host the file.

From the "AWS dashboard":http://console.aws.amazon.com/:

# In the console search bar, type "S3" and press enter
# Click the *S3* link in the search results
# Click *Create bucket*
# Enter @ably-message-data@ as the name of your bucket
# Click *Create bucket*

Create the text file and upload it to your new bucket:

# In your local environment create an empty @test.txt@ file
# Select the @ably-message-data@ bucket in the list of buckets
# Click the *Upload* button
# Click the *Add files* button
# Navigate to and select your @test.txt@ file then click *Open*
# Click the *Upload* button at the bottom of the page

h2(#role). Configure Lambda permissions

Before you write the code for the Lambda function, you need to assign it a role that defines what it has access to. You will grant high-level access in this tutorial but you should use stricter access controls in a production deployment.


From the "AWS dashboard":http://console.aws.amazon.com/:

# In the console search bar, type "IAM" and press enter
# Click the *IAM* link in the search results
# Click *Roles* in the left hand menu
# Click the *Create role* button
# Select the *AWS service* tile
# Select Lambda as the @Common use cases@
# Click the *Next* button
# On the Add permissions page, search for and select the following policies. Click the *Clear filters* button after each search.
## @AWSLambdaBasicExecutionRole@ 
## @AmazonS3FullAccess@
## Click the *Next* button at the bottom of the page
# Enter @ably-persistence@ as the Role name
# Click the *Create role* button at the bottom of the page

h2(#create-lambda). Create the Lambda function

You can now write the code for your Lambda function

From the "AWS dashboard":http://console.aws.amazon.com/:

# In the console search bar, type "Lambda" and press enter
# Click the *Lambda* link in the search results
# Click the *Create function* button
# Select the *Author from scratch* tile
# Enter @ably-persistence@ as the Function name
# Select the latest supported version of Python from the @Runtime@ drop down
# Click *Change default execution role* to expand that section
# Select *Use an existing role* and choose @ably-persistence@ from the drop down
# Click the *Create function* button at the bottom of the page

AWS displays your new Lambda function, with a sample event handler:

<a href="/images/tutorials/persistence/new-lambda.png" target="_blank">
  <img src="/images/tutorials/persistence/new-lambda.png" style="width: 100%" alt="New lambda page">
</a>

Update @lambda_function.py@ with the following code, remembering to replace the bucket name with the one you created:

```[python]
import json, boto3, os, sys, uuid
from urllib.parse import unquote_plus

s3_client = boto3.client('s3')

def lambda_handler(event, context):
    bucket_name = "ably-message-data"             # Target S3 Bucket
    file_name = "test.txt"                         # Target file
    lambda_path = "/tmp/" + file_name              # Download file path
    s3_path = "output/" + file_name                # Upload file path
    
    file_object = open(lambda_path, 'a')           # Open downloaded file to append text to
    file_object.write("\n Message: " + event)      # Write the data to the text file
    file_object.close()                            # Save and close edited file
    
    s3 = boto3.resource("s3")
    s3.meta.client.upload_file(lambda_path, bucket_name, file_name)
```

bq. **Important!** Click the *Deploy* button to deploy your Lambda function code before continuing. Ensure that you re-deploy the function every time you make a change to the code.

When you have configured your webhook, this code will be invoked every time a message is published. It will take the data from the message payload it receives from Ably, append it to the @test.txt@ file and upload it back to S3. 

Now you're finished in AWS you can set up the Ably half of the workflow.

h2(#installation). Create a new Ably app and API Key

You're going to need an API key to use when sending messages to our channel. In your "Ably dashboard":https://ably.com/accounts:

# Click the *Create New App* button
# Enter a new name for your app
# Click the *Create app* button
# Copy the Private API Key somewhere safe

h2(#webhook). Configure your webhook 

Now you have an app you can set up an integration rule with AWS Lambda which triggers when a new message is published within the app. In your "Ably dashboard":https://ably.com/accounts:

# Click the name of your app in the "breadcrumb trail" at the top of the page
# Select the *Integrations* tab
# Click the *New Integration Rule* button
# Select Webhook by clicking the *Choose* button below it, then do the same for AWS Lambda
# In the New Integration Rule dialog:
## Select the region your AWS account is located in
## Enter @ably-persistence@ as the Function Name
## Enter your AWS Credentials. This must be in the format @AccessKeyID:SecretKeyID@. For example, @AKIAUUFPRLMPNUEMFQPK:hGdpSuMaEthcNtxH/KMdyDsrjxYj53sDwWuvjm3p@
## Select *JSON* as the Encoding option
## Uncheck *Enveloped* (to keep the tutorial as simple as possible)
## Click the *Create* button

h2(#create-ably-page). Create a user interface

To start generating messages to supply to your webhook you will set up a basic HTML page. This page will subscribe to a channel and publish messages to that channel when the user clicks a button.

Create a new @index.html@ file on your local machine with the following contents:

```[html]
<!DOCTYPE html>
<html lang="en">
  <body>
    <h1>Ably Webhook Lambda Test</h1>
    <button id="publish" type="button" value="Connecting...">Click to Publish</button>
    <div id="result" style="padding: 10px"></div>
  </body>

  <script
    type="text/javascript"
    src="https://cdn.ably.io/lib/ably.min-1.js"
  ></script>
  <!-- Include the latest Ably Library  -->

  <!-- Instance the Ably library  -->
  <script>
    const ably = new Ably.Realtime("ABLY_API_KEY"); /* ADD YOUR API KEY HERE */
    channel =
      ably.channels.get(
        "persistencetest"
      ); /* Channel name being published and subscribed to */

    const generateRandomString = (length = 8) =>
      Math.random().toString(20).substr(2, length);

    const btn = document.getElementById("publish");
    const results = document.getElementById("result");

    btn.addEventListener("click", () => {
      channel.publish("message", `${generateRandomString()}`);
    });

    ably.connection.on("connected", () => {
      btn.innerText = "Connected to Ably, click to publish a message";
    });

    channel.subscribe((message) => {
      results.innerHTML += `Message from Ably: ${message.data}<br/>`;
    });
  </script>
</html>
```

This file displays a simple interface for testing your webhook. It uses the Ably Realtime SDL to publish messages to and subscribe to messages from the @persistencetest@ channel.

Ensure that you replace @ABLY_API_KEY@ with your own app's API key from the "Ably dashboard":https://ably.com/accounts.

Open @index.html@, and when the button caption states that you are connected to Ably, click it. A new, random message is sent to the channel. You can further inspect the connections made to and messages sent from your app by viewing the "Stats" tab for your app in the "Ably dashboard":https://ably.com/accounts.

If you now navigate to your "S3 Buckets":https://s3.console.aws.amazon.com/s3/buckets and select the @ably-message-data@ bucket. Click the @test.txt@ link and then click the *Open* button. Your browser will download the @test.txt@ file. Open the file in a text editor and verify that it contains the list of messages sent.

h2(#next-steps). Next Steps

# Learn more about "Ably Webhooks":https://ably.com/documentation/general/events.
# Learn about "Ably features":https://ably.com/platform.
# Explore more "Ably tutorials":https://ably.com/tutorials and "Ably Integrations":https://ably.com/integrations.
# Get an "overview of how Ably works":https://ably.com/documentation/how-ably-works.
# "Get in touch if you need help":https://ably.com/contact.