---
title: SDK - REST API
meta_description: "Ably Client Library SDK REST API Reference. This is the API reference guide for the REST interface of the Ably Client Library SDK."
meta_keywords: "Ably, Client Library, SDK, REST API."
section: api-reference
index: 2
languages:
  - javascript
  - nodejs
  - php
  - python
  - ruby
  - java
  - swift
  - objc
  - csharp
  - flutter
  - go
  - android
jump_to:
  Help with:
    - Auth API#auth-api
    - Channel Status API#channel-status-api
    - Channels API#channels-api
    - Encryption API#encryption-api
    - History API#history-api
    - Message API#message-api
    - Presence API#presence-api
    - Push API#push-api
    - Statistics API#statistics-api
    - See also#see-also
---

h2(#auth-api). Auth API Reference

inline-toc.
  Methods:
    - authorize
    - createTokenRequest#create-token-request
    - requestToken#request-token
  Properties:
    - clientId#client-id
  Related types:
    - AuthOptions#auth-options
    - TokenDetails#token-details
    - TokenRequest#token-request
    - TokenParams#token-params

The Auth object is available as the <span lang="java">"@auth@ field":/rest/usage#auth</span><span lang="default">"@auth@ property":/rest/usage#auth</span><span lang="csharp">"@Auth@ property":/rest/usage#auth</span><span lang="ruby">"@auth@ attribute":/rest/usage#auth</span> of an "Ably REST client instance":/rest/usage#constructor.

h3(#properties).
  default: Auth Properties
  php: Ably\Auth Properties
  java: io.ably.lib.rest.Auth Members
  ruby: Ably::Auth Attributes
  python: Auth Attributes
  objc,swift: ARTAuth Properties

The <span lang="objc,swift">@ART@</span>@Auth@ object exposes the following public <span lang="default">properties</span><span lang="ruby,python">attributes</span><span lang="java">members</span>:

h6(#client-id).
  default: clientId
  ruby:    client_id
  python:  client_id
  csharp:  ClientId
  go:      ClientID

The client ID string, if any, configured for this client connection. See "identified clients":#identified-clients for more information on trusted client identifiers.

h3(#methods).
  default: Auth Methods
  java: io.ably.lib.rest.Auth Methods
  ruby: Ably::Auth Methods
  php: Ably\Auth Methods
  objc,swift: ARTAuth Methods

h6(#authorize).
  default: authorize
  csharp,go: Authorize

<a name="authorise"></a>

bq(definition).
  default: authorize("TokenParams":#token-params tokenParams, "AuthOptions":#auth-options authOptions, callback("ErrorInfo":/realtime/types#error-info err, "TokenDetails":#token-details tokenDetails))
  ruby:    "TokenDetails":#token-details authorize("TokenParams":#token-params token_params, "AuthOptions":#auth-options auth_options)
  python:  "TokenDetails":#token-details authorize(token_params="TokenParams":#token-params, auth_options="AuthOptions":#auth-options)
  php:     "TokenDetails":#token-details authorize("TokenParams":#token-params tokenParams, "AuthOptions":#auth-options authOptions)
  java:    "TokenDetails":#token-details authorize("TokenParams":#token-params tokenParams, "AuthOptions":#auth-options authOptions)
  csharp:  Task<TokenDetails> AuthorizeAsync("TokenParams":#token-params tokenParams = null, "AuthOptions":#auth-options options = null);
  go:      "TokenDetails":#token-details Authorize("TokenParams":#token-params tokenParams, "AuthOptions":#auth-options authOptions)
  swift,objc: authorize(tokenParams: "ARTTokenParams":#token-params?, authOptions: "ARTAuthOptions":#auth-options?, callback: ("ARTTokenDetails":#token-details?, NSError?) -> Void)

Instructs the library to get a new token immediately using the specified <span lang="ruby,python">@token_params@ and @auth_options@</span><span lang="default">@tokenParams@ and @authOptions@</span><span lang="go,csharp">@TokenParams@ and @AuthOptions@</span> (or if none specified, the client library defaults). Also stores any <span lang="ruby,python">@token_params@ and @auth_options@</span><span lang="go,csharp">@TokenParams@ and @AuthOptions@</span><span lang="default">@tokenParams@ and @authOptions@</span> passed in as the new defaults, to be used for all subsequent implicit or explicit token requests.

Any <span lang="ruby,python">@token_params@ and @auth_options@</span><span lang="go,csharp">@TokenParams@ and @AuthOptions@</span><span lang="default">@tokenParams@ and @authOptions@</span> objects passed in will entirely replace (as opposed to being merged with) the currently saved <span lang="ruby,python">@token_params@ and @auth_options@</span><span lang="default">@tokenParams@ and @authOptions@</span>.

h5. Parameters

- <span lang="ruby,python">token_params</span><span lang="go">TokenParams</span><span lang="default">tokenParams</span> := <span lang="default">an optional object containing the "Ably Token parameters":#token-params</span><span lang="java,go">an optional "@TokenParams@":#token-params object containing the token parameters</span><span lang="python">an optional Dict containing the "Ably Token parameters":#token-params</span><span lang="ruby">an optional set of key value pairs containing the "Ably Token parameters":#token-params</span><span lang="php">an optional set of key value pairs in an associative array containing the "Ably Token parameters":#token-params</span> for the authorization request<br>__Type: "@TokenParams@":#token-params__

- <span lang="ruby,python">auth_options</span><span lang="go">AuthOptions</span><span lang="default">authOptions</span> := <span lang="default">an optional object containing the "authentication options":#auth-options</span><span lang="java,go">an optional "@AuthOptions@":#auth-options object containing the authentication options</span><span lang="python">an optional Dict containing the "authentication options":#auth-options</span><span lang="ruby">an optional set of key value pairs containing the "authentication options":#auth-options</span><span lang="php">an optional set of key value pairs in an associative array containing the "authentication options":#auth-options</span> for the authorization request<br>__Type: "@AuthOptions@":#auth-options__

- <div lang="jsall">callback</div> := is a function of the form: @function(err, tokenDetails)@
- <div lang="swift,objc">callback</div> := called with a "@ARTTokenDetails@":#token-details object or an error

blang[jsall,objc,swift].
  h5. Callback result

  On success, @tokenDetails@ contains a "@TokenDetails@":#token-details object containing the details of the new or existing "Ably Token":/core-features/authentication#ably-tokens along with the @token@ string.

  On failure to obtain an token, @err@ contains an <span lang="ruby">"@ErrorInfo@":#error-info</span><span lang="objc,swift">@NSError@</span> object with an error response as defined in the "Ably REST API":/rest-api#common documentation.

blang[java,ruby,php,python,go].
  h5. Returns

  On success, a "@TokenDetails@":#token-details object containing the details of the new or existing token along with the @token@ string is returned.

  Failure to obtain an token will raise an "@AblyException@":#ably-exception.

blang[csharp].
  h5. Returns

  The method is asynchronous and returns a @Task@ which needs to be awaited.

  On success, a "@TokenDetails@":#token-details object containing the details of the new or existing token along with the @token@ string is returned.

  Failure to obtain a token will raise an "@AblyException@":#ably-exception.

h5. Example

bc[jsall]. client.auth.authorize({ clientId: 'bob' }, function(err, tokenDetails) {
  if(err) {
    console.log('An error occurred; err = ' + err.message);
  } else {
    console.log('Success; token = ' + tokenDetails.token);
  }
});

bc[java]. try {
  TokenParams tokenParams = new TokenParams();
  tokenParams.clientId = "bob";
  TokenDetails tokenDetails = client.auth.authorize(tokenParams, null);
  System.out.println("Success; token = " + tokenDetails.token);
} catch(AblyException e) {
  System.out.println("An error occurred; err = " + e.getMessage());
}

bc[csharp]. try
{
  TokenParams tokenParams = new TokenParams { ClientId = "bob" };
  TokenDetails tokenDetails = await client.Auth.AuthorizeAsync(tokenParams);
  Console.WriteLine("Success; token = " + tokenDetails.Token);
}
catch (AblyException e)
{
  Console.WriteLine("An error occurred; err = " + e.Message);
}

bc[ruby]. token_details = client.auth.authorize(client_id: 'bob')
puts "Success; token = #{token_details.token}"

bc[python]. token_details = client.auth.authorize(token_params={'client_id': 'bob'})
print("Success; token = " + str(token_details.token))

bc[php]. $tokenDetails = $client->auth->authorize(array('clientId' => 'bob'));
echo("Success; token = " . $tokenDetails->token);

bc[objc]. ARTTokenParams *tokenParams = [[ARTTokenParams alloc] initWithClientId:@"Bob"];
[client.auth authorize:tokenParams options:nil callback:^(ARTTokenDetails *tokenDetails, NSError *error) {
  if (error) {
    NSLog(@"An error occurred; err = %@", error);
  } else {
    NSLog(@"Success; token = %@", tokenDetails.token);
  }
}];

bc[swift]. let tokenParams = ARTTokenParams(clientId: "Bob")
client.auth.authorize(tokenParams, options: nil) { tokenDetails, error in
  guard let tokenDetails = tokenDetails else {
    print("An error occurred; err = \(error!)")
    return
  }
  print("Success; token = \(tokenDetails.token)")
}

bc[go]. tokenParams := &ably.TokenParams{
  ClientID: "Bob",
}
token, err := client.Auth.Authorize(tokenParams, &ably.AuthOptions{})
if err != nil {
  fmt.Println(err)
}
fmt.Println(token)

h6(#create-token-request).
  default: createTokenRequest
  csharp,go:  CreateTokenRequest
  ruby:    create_token_request
  python:  create_token_request

bq(definition).
  default: createTokenRequest("TokenParams":#token-params tokenParams, "AuthOptions":#auth-options authOptions, callback("ErrorInfo":/realtime/types#error-info err, "TokenRequest":#token-request tokenRequest))
  ruby:    "TokenRequest":#token-request create_token_request("TokenParams":#token-params token_params, "AuthOptions":#auth-options auth_options)
  python:  "TokenRequest":#token-request create_token_request(token_params="TokenParams":#token-params, key_name=String, key_secret=String)
  php:     "TokenRequest":#token-request createTokenRequest("TokenParams":#token-params tokenParams, "AuthOptions":#auth-options authOptions)
  java:    "TokenRequest":#token-request createTokenRequest("TokenParams":#token-params tokenParams, "AuthOptions":#auth-options authOptions)
  go:      "TokenRequest":#token-request CreateTokenRequest("TokenParams":#token-params tokenParams, "AuthOptions":#auth-options authOptions)
  csharp:  Task<TokenRequest> CreateTokenRequestAsync(TokenParams tokenParams = null, AuthOptions authOptions = null)
  objc,swift: createTokenRequest(tokenParams: "ARTTokenParams":#token-params?, options: "ARTAuthOptions":#auth-options?, callback: ("ARTTokenRequest":#token-request?, NSError?) -> Void)

Creates and signs an Ably "@TokenRequest@":#request-token based on the specified <span lang="ruby,python">@token_params@ and @auth_options@</span><span lang="go">@TokenParams@ and @AuthOptions@</span><span lang="default">@tokenParams@ and @authOptions@</span>. Note this can only be used when the "API @key@":https://faqs.ably.com/what-is-an-app-api-key value is available locally, due to it being required to sign the Ably "@TokenRequest@":#request-token. Otherwise, Ably "@TokenRequests@":#request-token must be obtained from the key owner. Use this to generate Ably "@TokenRequests@":#request-token in order to implement an "Ably Token":/core-features/authentication#ably-tokens request callback for use by other clients.

Both <span lang="ruby,python">@auth_options@ and @token_params@</span><span lang="go">@AuthOptions@ and @TokenParams@</span><span lang="default">@authOptions@ and @tokenParams@</span> are optional. When omitted or <span lang="default">@null@</span><span lang="java">@Null@</span><span lang="python">@None@</span><span lang="ruby,objc,swift,go">@nil@</span>, the default Ably-compatible token parameters and authentication options for the client library are used, as specified in the @ClientOptions@ when the client library was instantiated, or later updated with an explicit "<span lang="default">@authorize@</span><span lang="csharp,go">@Authorize@</span>":#authorize request. Values passed in will be used instead of (rather than being merged with) the default values.

To understand why an Ably "@TokenRequest@":#request-token may be issued to clients in favor of an "Ably Token":/core-features/authentication#ably-tokens, see "Token Authentication explained":/core-features/authentication/#token-authentication.

h5. Parameters

- <span lang="ruby,python">token_params</span><span lang="go">TokenParams</span><span lang="default">tokenParams</span> := <span lang="default">an optional object containing the "token parameters":#token-params</span><span lang="java">an optional "@TokenParams@":#token-params object containing the token parameters</span><span lang="python">an optional Dict containing the "token parameters":#token-params</span><span lang="ruby">an optional set of key value pairs containing the "token parameters":#token-params</span><span lang="php">an optional set of key value pairs in an associative array containing the "token parameters":#token-params</span> for the Ably "@TokenRequest@":#request-token<br>__Type: "@TokenParams@":#token-params__

- <span lang="ruby">auth_options</span><span lang="python">[auth options]</span><span lang="go">AuthOptions</span><span lang="default">authOptions</span> := <span lang="default">an optional object containing the "authentication options":#auth-options</span><span lang="java">an optional "@TokenParams@":#auth-options object containing the authentication options</span><span lang="python">various keyword arguments with the "authentication options":#auth-options</span><span lang="ruby">an optional set of key value pairs containing the "authentication options":#auth-options</span><span lang="php">an optional set of key value pairs in an associative array containing the "authentication options":#auth-options</span><span lang="objc,swift">an optional "@ARTTokenParams@":#token-params containing the "authentication options":#auth-options</span> for the "Ably Token":/core-features/authentication#ably-tokens Request<br>__Type: "@AuthOptions@":#auth-options__

- <div lang="jsall">callback</div> := is a function of the form: @function(err, tokenRequest)@
- <div lang="swift,objc">callback</div> := called with a "@ARTTokenRequest@":#token-request object or an error

blang[jsall,objc,swift].
  h5. Callback result

  On success, @tokenRequest@ contains a "@TokenRequest@":#token-request JSON object.

  On failure to issue a "@TokenRequest@":#token-request, @err@ contains an "@ErrorInfo@":#error-info object with an error response as defined in the "Ably REST API":/rest-api#common documentation.

blang[java,ruby,php,python,go].
  h5. Returns

  On success, a "@TokenRequest@":#token-request object is returned.

  Failure to issue a "@TokenRequest@":#token-request will raise an "@AblyException@":#ably-exception.

blang[csharp].
  h5. Returns

  The method is asynchronous and returns a @Task@ which needs to be awaited.

  On success, a "@TokenRequest@":#token-request object is returned.

  Failure to issue a "@TokenRequest@":#token-request will raise an "@AblyException@":#ably-exception.

h5. Example

bc[jsall]. client.auth.createTokenRequest({ clientId: 'bob' }, function(err, tokenRequest) {
  if(err) {
    console.log('An error occurred; err = ' + err.message);
  } else {
    console.log('Success; token request = ' + tokenRequest);
  }
});

bc[java]. try {
  TokenParams tokenParams = new TokenParams();
  tokenParams.clientId = "bob";
  TokenRequest tokenRequest = client.auth.createTokenRequest(tokenParams, null);
  System.out.println("Success; token request issued");
} catch(AblyException e) {
  System.out.println("An error occurred; err = " + e.getMessage());
}

bc[csharp]. try
{
  TokenParams tokenParams = new TokenParams { ClientId = "bob" };
  var tokenRequest = await client.Auth.CreateTokenRequestAsync(tokenParams);
  Console.WriteLine("Success; token request issued");
}
catch (AblyException e)
{
  Console.WriteLine("An error occurred; err = " + e.Message);
}

bc[ruby]. token_request = client.auth.create_token_request(client_id: 'bob')
puts "Success; token request = #{token_request}"

bc[python]. token_request = client.auth.create_token_request(token_params={'client_id': 'bob'})
print("Success; token request = ' + str(token_request)

bc[php]. $tokenRequest = $client->auth->createTokenRequest(array('clientId' => 'bob'))
echo("Success; token request = " . $tokenRequest);

bc[objc]. ARTTokenParams *tokenParams = [[ARTTokenParams alloc] initWithClientId:@"Bob"];
[client.auth createTokenRequest:tokenParams options:nil callback:^(ARTTokenRequest *tokenRequest, NSError *error) {
    if (error) {
        NSLog(@"An error occurred; err = %@", error);
    } else {
        NSLog(@"Success; token request = %@", tokenRequest);
    }
}];

bc[swift]. let tokenParams = ARTTokenParams(clientId: "Bob")
client.auth.createTokenRequest(tokenParams, options: nil) { tokenRequest, error in
    guard let tokenRequest = tokenRequest else {
        print("An error occurred; err = \(error!)")
        return
    }
    print("Success; token request = \(tokenRequest)")
}

bc[go]. tokenParams := &ably.TokenParams{
  ClientID: "Bob",
}
tokenRequest, err := client.Auth.CreateTokenRequest(tokenParams, &ably.AuthOptions{})
if err != nil {
  fmt.Println(err)
}
fmt.Println(tokenRequest)

h6(#request-token).
  default:  requestToken
  ruby:     request_token
  python:   request_token
  csharp:   RequestToken
  go:       RequestToken

bq(definition).
  default: requestToken("TokenParams":#token-params tokenParams, "AuthOptions":#auth-options authOptions, callback("ErrorInfo":/realtime/types#error-info err, "TokenDetails":#token-details tokenDetails))
  ruby:    "TokenDetails":#token-details request_token("TokenParams":#token-params token_params, "AuthOptions":#auth-options auth_options)
  python:  "TokenDetails":#token-details request_token(token_params="TokenParams":#token-params, key_name=String, key_secret=None, auth_callback=Lambda, auth_url=String, auth_method=String, auth_headers=Dict, auth_params=Dict, query_time=Boolean)
  php:     "TokenDetails":#token-details requestToken("TokenParams":#token-params tokenParams, "AuthOptions":#auth-options authOptions)
  csharp:  Task<TokenDetails> RequestTokenAsync(TokenParams tokenParams = null, AuthOptions options = null)
  java:    "TokenDetails":#token-details requestToken("TokenParams":#token-params tokenParams, "AuthOptions":#auth-options authOptions)
  objc,swift: requestToken(tokenParams: "ARTTokenParams":#token-params?, withOptions: "ARTAuthOptions":#auth-options?, callback: ("ARTTokenDetails":#token-details?, NSError?) -> Void)
  go: "TokenDetails":#token-details RequestToken("TokenParams":#token-params tokenParams, "AuthOptions":#auth-options authOptions)

Calls the "<span lang="default">@requestToken@</span><span lang="csharp,go">@RequestToken@</span> REST API endpoint":/rest-api#request-token to obtain an "Ably Token":/core-features/authentication#ably-tokens according to the specified <span lang="ruby,python">@token_params@ and @auth_options@</span><span lang="default">@tokenParams@ and @authOptions@</span>.

Both <span lang="ruby,python">@auth_options@ and @token_params@</span><span lang="default">@authOptions@ and @tokenParams@</span> are optional. When omitted or <span lang="default">@null@</span><span lang="java">@Null@</span><span lang="python">@None@</span><span lang="ruby,objc,swift,go">@nil@</span>, the default token parameters and authentication options for the client library are used, as specified in the @ClientOptions@ when the client library was instantiated, or later updated with an explicit "<span lang="default">@authorize@</span><span lang="csharp,go">@Authorize@</span>":#authorize request. Values passed in will be used instead of (rather than being merged with) the default values.

To understand why an Ably "@TokenRequest@":#request-token may be issued to clients in favor of an "Ably Token":/core-features/authentication#ably-tokens, see "Token Authentication explained":/core-features/authentication/#token-authentication.

h5. Parameters

- <span lang="ruby,python">token_params</span><span lang="default">tokenParams</span> := <span lang="default">an optional object containing the "token parameters":#token-params</span><span lang="python">an optional Dict containing the "token parameters":#token-params</span><span lang="java">an optional "@TokenParams@":#token-params object containing the token parameters</span><span lang="ruby">an optional set of key value pairs containing the "token parameters":#token-params</span><span lang="php">an optional set of key value pairs in an associative array containing the "token parameters":#token-params</span> for the requested "Ably Token":/core-features/authentication#ably-tokens<br>__Type: "@TokenParams@":#token-params__

- <span lang="python">[auth options]</span><span lang="ruby">auth_options</span><span lang="default">authOptions</span> := <span lang="default">an optional object containing the "authentication options":#auth-options</span><span lang="python">various keyword arguments with the "authentication options":#auth-options</span><span lang="java">an optional "@TokenParams@":#auth-options object containing the authentication options</span><span lang="ruby">an optional set of key value pairs containing the "authentication options":#auth-options</span><span lang="php">an optional set of key value pairs in an associative array containing the "authentication options":#auth-options</span> for the requested "Ably Token":/core-features/authentication#ably-tokens<br>__Type: "@AuthOptions@":#auth-options__

- <div lang="jsall">callback</div> := is a function of the form: @function(err, tokenDetails)@
- <div lang="swift,objc">callback</div> := called with a "@ARTTokenDetails@":#token-details object or an error

blang[jsall,objc,swift].
  h5. Callback result

  On success, @tokenDetails@ contains a "@TokenDetails@":#token-details object containing the details of the new "Ably Token":/core-features/authentication#ably-tokens along with the @token@ string.

  On failure to obtain an "Ably Token":/core-features/authentication#ably-tokens, @err@ contains an <span lang="ruby">"@ErrorInfo@":#error-info</span><span lang="objc,swift">@NSError@</span> object with an error response as defined in the "Ably REST API":/rest-api#common documentation.

blang[java,ruby,php,python,go].
  h5. Returns

  On success, a "@TokenDetails@":#token-details object containing the details of the new "Ably Token":/core-features/authentication#ably-tokens along with the @token@ string is returned.

  Failure to obtain an "Ably Token":/core-features/authentication#ably-tokens will raise an "@AblyException@":#ably-exception.

blang[csharp].
  h5. Returns

  The method is asynchronous and returns a @Task@ which needs to be awaited.

  On success, a "@TokenDetails@":#token-details object containing the details of the new "Ably Token":/core-features/authentication#ably-tokens along with the @token@ string is returned.

  Failure to obtain an "Ably Token":/core-features/authentication#ably-tokens will raise an "@AblyException@":#ably-exception.

h5. Example

bc[jsall]. client.auth.requestToken({ clientId: 'bob'}, function(err, tokenDetails){
  if(err) {
    console.log('An error occurred; err = ' + err.message);
  } else {
    console.log('Success; token = ' + tokenDetails.token);
  }
});

bc[ruby]. token_details = client.auth.request_token(client_id: 'bob')
puts "Success; token = #{token_details.token}"

bc[python]. token_details = client.auth.request_token(token_params={'client_id': 'bob'})
print("Success; token = " + str(token_details.token))

bc[php]. $tokenDetails = $client->auth->requestToken(array('clientId' => 'bob'))
echo("Success; token = " . $tokenDetails->token);

bc[java]. try {
  TokenParams tokenParams = new TokenParams();
  tokenParams.clientId = "bob";
  TokenDetails tokenDetails = client.auth.requestToken(tokenParams, null);
  System.out.println("Success; token = " + tokenDetails.token);
} catch(AblyException e) {
  System.out.println("An error occurred; err = " + e.getMessage());
}

bc[csharp]. try {
  TokenParams tokenParams = new TokenParams { ClientId = "bob" };
  var tokenDetails = await client.Auth.RequestTokenAsync(tokenParams);
  Console.WriteLine("Success; token = " + tokenDetails.Token);
}
catch (AblyException e)
{
  Console.WriteLine("An error occurred; err = " + e.Message);
}

bc[objc]. ARTTokenParams *tokenParams = [[ARTTokenParams alloc] initWithClientId:@"Bob"];
[client.auth requestToken:tokenParams withOptions:nil callback:^(ARTTokenDetails *tokenDetails, NSError *error) {
    if (error) {
        NSLog(@"An error occurred; err = %@", error);
    } else {
        NSLog(@"Success; token = %@", tokenDetails.token);
    }
}];

bc[swift]. let tokenParams = ARTTokenParams(clientId: "Bob")
client.auth.requestToken(tokenParams, withOptions: nil) { tokenDetails, error in
    guard let tokenDetails = tokenDetails else {
        print("An error occurred; err = \(error!)")
        return
    }
    print("Success; token = \(tokenDetails.token)")
}

bc[go]. tokenParams := &ably.TokenParams{
  ClientID: "Bob",
}
token, err := client.Auth.RequestToken(tokenParams, &ably.AuthOptions{})
if err != nil {
  fmt.Println(err)
}
fmt.Println(token)

h3(#related-types). Related types

h4(#auth-options).
  default:   AuthOptions Object
  ruby:      AuthOptions Hash
  java:      io.ably.lib.rest.Auth.AuthOptions

<%= partial partial_version('types/_auth_options') %>

h4(#token-details).
  default: TokenDetails
  objc,swift: ARTTokenDetails
  java:    io.ably.lib.types.TokenDetails
  ruby:    Ably::Models::TokenDetails

<%= partial partial_version('types/_token_details') %>

h4(#token-params).
  default:   TokenParams Object
  objc,swift:   ARTTokenParams
  ruby:      TokenParams Hash
  java:      io.ably.lib.rest.Auth.TokenParams

<%= partial partial_version('types/_token_params') %>

h4(#token-request).
  default:   TokenRequest Object
  objc,swift:   ARTTokenRequest
  ruby:      Ably::Models::TokenRequest
  java:      io.ably.lib.rest.Auth.TokenRequest

<%= partial partial_version('types/_token_request') %>

h2(#channel-status-api). Channel Status API Reference

inline-toc.
  Types:
    - ChannelDetails#channel-details
    - ChannelStatus#channel-status
    - Occupancy#occupancy

h3(#types). Types

The payload of metadata events for channels is the "@ChannelDetails@":#channel-details type which contains the @channelId@ (AKA the "channel's name":/realtime/channels#name) and other static information about the channel, plus a @status@ containing a "@ChannelStatus@":#channel-status instance which contains information about the current state of the channel.

<%= partial partial_version('types/_channel_details') %>

h2(#channels-api). Channels API Reference

inline-toc.
  Channels Methods:
    - get#get
    - release#release
  Channel Properties:
    - name#name
    - presence#presence
    - push#push
  Channel Methods:
    - publish()#publish
    - history(options)#history
  Related types:
    - Message#message
    - ChannelOptions#channel-options
    - PaginatedResult#paginated-result
    - Param

h3(#channels-object).
  default: Channels

The @Channels@ object, accessed from the "rest library client constructor":/rest/usage#channels, is used to create and destroy @Channel@ objects. It exposes the following public methods:

h4(#channels-methods). Channels Methods

h6(#get).
  default: get
  csharp: Get

bq(definition).
  default:  "Channel":#properties get(String channelName, "ChannelOptions":#channel-options channelOptions)
  csharp:   "Channel":#properties Get(String channelName, "ChannelOptions":#channel-options channelOptions)
  objc,swift: "ARTRealtimeChannel":#properties get(String channelName, "ARTChannelOptions":#channel-options channelOptions);

Creates a new "Channel":#properties object if none for the channel exists, or returns the existing channel object.

h6(#release).
  default: release
  csharp: Release

bq(definition).
  default:  release(String channelName)
  java,objc,swift,flutter:  void release(String channelName)
  csharp:   bool Release(string channelName)

Releases a "Channel":#properties object, deleting it and enabling it to be garbage collected.

h3(#channel-object). Channel

The Channel object, created via the "Channels":#channels-object object, is used to interact with a specific channel.

h4(#properties).
  default: Channel Properties
  python: Channel Attributes
  php: Ably\Channel Properties
  objc,swift: ARTRestChannel Properties
  ruby: Ably::Rest::Channel Attributes
  java: io.ably.lib.rest.Channel Members
  csharp: IO.Ably.Rest.RestChannel Members

The @Channel@ object exposes the following public <span lang="default">properties</span><span lang="ruby,python">attributes</span><span lang="java">members</span>:

h6(#name).
  default: name
  csharp,go: Name

The name @String@ unique to this channel.

h6(#presence).
  default: presence
  csharp,go: Presence

Provides access to the "REST Presence":/rest/presence object for this channel which can be used to get members present on the channel, or retrieve presence event history.

h6(#push).
  default: push

Provides access to the "PushChannel":/general/push/activate-subscribe#push-channel object for this channel which can be used to access members present on the channel, or participate in presence.

h4. Channel Methods

h6(#publish).
  default: publish
  csharp,go: Publish

There are two overloaded versions of this method:

bq(definition#publish-data).
  default:  publish(String name, Object data, callback("ErrorInfo":/realtime/types#error-info err))
  ruby,php: publish(String name, Object data)
  python:   publish(name=Unicode, data=Object)
  java:     void publish(String name, Object data)
  csharp:   Task PublishAsync(string name, object data, string clientId = null)
  objc,swift: publish(name: String?, data: AnyObject?, callback: (("ARTErrorInfo":/realtime/types#error-info?) -> Void)?)
  go:       (c <notextile>*</notextile>RestChannel) Publish(name string, data interface{}) (error "ErrorInfo":#error-info)
  flutter:  Future<void> publish({String name, Object data})

Publish a single message on this channel based on a given event name and payload. <span lang="jsall,java,objc,swift">A <span lang="default">callback</span><span lang="java">listener</span> may optionally be passed in to this call to be notified of success <span lang="default">or failure</span><span lang="ruby"></span> of the operation.</span>

It is also possible to publish a message to multiple channels at once using our "batch publish feature":/rest/batch.

bq(definition#publish-msg-array).
  default:  publish(Object[] messages, callback("ErrorInfo":/realtime/types#error-info err))
  ruby,php: publish("Message":#message[] messages)
  python:   publish(messages=List<"Message":#message>)
  java:     void publish("Message":#message[] messages)
  csharp:   Task PublishAsync(IEnumerable<"Message":#message> messages)
  objc,swift: publish(messages: [ "ARTMessage":#message ], callback: (("ARTErrorInfo":/realtime/types#error-info?) -> Void)?)
  go:       (c <notextile>*</notextile>RestChannel) PublishAll(messages []<notextile>*</notextile>proto.Message) (error "ErrorInfo":#error-info)
  flutter:  Future<void> publish({List<"Message":#message> messages})

Publish several messages on this channel. <span lang="jsall,java,objc,swift">A <span lang="default">callback</span><span lang="java">listener</span> may optionally be passed in to this call to be notified of success <span lang="default">or failure</span><span lang="ruby"></span> of the operation.</span> It is worth noting that "there are additional considerations and constraints if you want to publish multiple messages idempotently in one publish operation with client-supplied IDs.":https://faqs.ably.com/client-specified-message-id-restrictions-for-multiple-messages-published-atomically

h5. Parameters

- name := event name for the published message<br><span lang="default">__Type: @String@__</span><span lang="python">__Type: @Unicode@ for Python 2, @String@ for Python 3__</span>
- <div lang="jsall">data</div> := data payload for the message. The supported payload types are Strings, objects or arrays capable of JSON representation, buffers containing arbitrary binary data, and null. (Note that if sending a binary, that binary should be the entire payload; an object with a binary field within it may not be correctly encoded)<br>__Type: @Object@__
- <div lang="java">data</div> := data payload for the message. The supported payload types are Strings, JsonObject, binary data as byte arrays, and null.<br>__Type: @Object@__
- <div lang="csharp">data</div> := data payload for the message. The supported payload types are strings, plain .NET objects, binary data as byte arrays, and null.<br>__Type: @Object@__
- <div lang="ruby">data</div> := data payload for the message. The supported payload types are Strings, Hash or Array objects that can be serialized to JSON using @to_json@, binary data as @ASCII-8BIT@ byte arrays, and null. (Note that if sending a byte array, it should be the entire payload; a hash or array with a bytearray field within it may not be correctly encoded)<br>__Type: @Object@__
- <div lang="python">data</div> := data payload for the message. The supported payload types are unicode Strings, Dict, or List objects that can be serialized to JSON using @json.dumps@, binary data as @bytearray@ (in Python 3, @bytes@ also works), and None.<br>__Type: @Object@__
- <div lang="objc,swift">data</div> := data payload for the message. The supported payload types are <span lang="objc">@NS@</span>@String@, <span lang="objc">@NS@</span>@Dictionary@ or <span lang="objc">@NS@</span>@Array@ objects that can be serialized to JSON, binary data as @NSData@, and @nil@.<br>__Type: @Object@__
- <div lang="php">data</div> := data payload for the message. The supported payload types are Strings, Associative Array or Array objects that can be serialized to JSON, binary data as byte arrays, and null.<br>__Type: @Object@__
- <div lang="go">data</div> := data payload for the message. The supported payload type are strings, objects that can be serialized to JSON, binary data as byte arrays, and nil.<br>__Type: @interface@
- <div lang="flutter">data</div> := data payload for the message. The supported payload types are String, Map, List, and null.<br>__Type: @Object@__

- <div lang="flutter">message</div> := payload for the message as a @Message@:#message object.<br>__Type: @Message@:#message__
- messages := An array of message objects to publish<br>__Type: "@Message []@":#message__

- <div lang="jsall">callback</div> := is a function of the form @function(err)@ which is called upon completion
- <div lang="objc,swift">callback</div> := called upon publishing the message, or with an error

blang[jsall,swift,objc].
  h5. Callback result

  On successful publish of the message, @err@ is null. On failure to publish the message, @err@ contains an "@ErrorInfo@":#error-info object describing the failure reason.

blang[java,ruby,php].
  h5. Failure

  On failure to publish the message, an "@AblyException@":/rest/types#ably-exception will be raised.

blang[csharp].
  h5. Returns

  The method is asynchronous and returns a Task that can be awaited.

  On failure to publish the message, an "@AblyException@":/rest/types#ably-exception will be raised.

blang[go].
  h5. Returns

  The function returns "@ErrorInfo@":#error-info if an error has occurred, otherwise it returns @nil@.

blang[flutter].
  h5. Returns

  The function throws "@ably.AblyException@" if an error has occurred.

h6(#history).
  default: history
  csharp,go: History

bq(definition).
  default: history(Object options, callback("ErrorInfo":/realtime/types#error-info err, "PaginatedResult":#paginated-result<"Message":#message> resultPage))
  ruby:    "PaginatedResult":#paginated-result<"Message":#message> history(Hash options)
  python:  "PaginatedResult":#paginated-result<"Message":#message> history(kwargs_options)
  php:     "PaginatedResult":#paginated-result<"Message":#message> history(Array options)
  java:    "PaginatedResult":#paginated-result<"Message":#message> history("Param":#param[] options)
  csharp:  Task<"PaginatedResult":#paginated-result<"Message":#message>> HistoryAsync("PaginatedRequestParams":#paginated-request-params dataQuery)
  objc,swift: history(query: ARTRealtimeHistoryQuery?, callback: ("ARTPaginatedResult":#paginated-result<"ARTMessage":#message>?, ARTErrorInfo?) -> Void) throws
  go:      (c <notextile>*</notextile>RestChannel) History(options <notextile>*</notextile>PaginateParams) (<notextile>*</notextile>"PaginatedResult":#paginated-result, "error":#error-info)

Gets a "paginated":#paginated-result set of historical messages for this channel. If the "channel is configured to persist messages to disk":https://faqs.ably.com/how-long-are-messages-stored-for, then message history will "typically be available for 24 - 72 hours":https://faqs.ably.com/how-long-are-messages-stored-for. If not, messages are only retained in memory by the Ably service for two minutes.

h5. Parameters

- <span lang="default">options</span><span lang="objc,swift,csharp">query</span><span lang="java">"Param":#param[] options</span> := <span lang="default">an optional object containing the query parameters</span><span lang="python">optional keyword arguments containing the query parameters</span><span lang="ruby">an optional set of key value pairs containing the query parameters</span><span lang="php">an optional Associative Array containing the query parameters</span>, as specified in the "message history API documentation":/rest/history#channel-history.

- <div lang="jsall">callback</div> := is a function of the form: @function(err, resultPage)@
- <div lang="swift,objc">callback</div> := called with a "ARTPaginatedResult":#paginated-result<"ARTMessage":#message> object or an error

blang[jsall,objc,swift].
  h5. Callback result

  On success, @resultPage@ contains a "@PaginatedResult@":#paginated-result encapsulating an array of "@Message@":#message objects corresponding to the current page of results. "@PaginatedResult@":#paginated-result supports pagination using "@next()@":#paginated-result and "@first()@":#paginated-result methods.

  On failure to retrieve message history, @err@ contains an "@ErrorInfo@":#error-info object with the failure reason.

blang[java,ruby,php,python].
  h5. Returns

  On success, the returned "@PaginatedResult@":#paginated-result encapsulates an array of "@Message@":#message objects corresponding to the current page of results. "@PaginatedResult@":#paginated-result supports pagination using "@next@":#paginated-result and "@first@":#paginated-result methods.

  Failure to retrieve the message history will raise an "@AblyException@":/realtime/types/#ably-exception

blang[csharp].
  h5. Returns

  The method is asynchronous and return a Task that has to be awaited to get the result.

  On success, the returned "@PaginatedResult@":#paginated-result encapsulates an array of "@Message@":#message objects corresponding to the current page of results. "@PaginatedResult@":#paginated-result supports pagination using "@NextAsync@":#paginated-result and "@FirstAsync@":#paginated-result methods.

  Failure to retrieve the message history will raise an "@AblyException@":/realtime/types/#ably-exception

blang[go].
  h5. Returns

  On success, the returned "@PaginatedResult@":#paginated-result encapsulates an array of "@Message@":#message objects corresponding to the current page of results. "@PaginatedResult@":#paginated-result supports pagination using "@next@":#paginated-result and "@first@":#paginated-result methods. @error@ will be nil.

  On failure to retrieve message history, the @error@ contains an "@ErrorInfo@":#error-info object with the failure reason.

h3(#related-types). Related types

h4(#message).
  default: Message
  objc,swift: ARTMessage
  ruby:    Ably::Models::Message
  php:     Ably\Models\Message
  java:    io.ably.lib.types.Message
  csharp:  IO.Ably.Message

<%= partial partial_version('types/_message') %>

h4(#channel-options).
  default: ChannelOptions Object
  objc,swift: ARTChannelOptions
  ruby:    ChannelOptions Hash
  python:  ChannelOptions keyword arguments
  php:     ChannelOptions Array
  java:    io.ably.lib.types.ChannelOptions
  csharp:  IO.Ably.ChannelOptions

<%= partial partial_version('types/_channel_options') %>

h4(#paginated-request-params).
  csharp: PaginatedRequestParams

blang[csharp].
  <%= partial partial_version('types/_history_request_params'), indent: 2, skip_first_indent: true %>

h4(#paginated-result).
  default: PaginatedResult
  objc,swift: ARTPaginatedResult
  ruby:    Ably::Models::PaginatedResult
  php:    Ably\Models\PaginatedResult
  java:    io.ably.lib.types.PaginatedResult
  csharp:  IO.Ably.PaginatedResult

<%= partial partial_version('types/_paginated_result') %>

h4(#param).
  java:    io.ably.lib.types.Param

blang[java].
  <%= partial partial_version('types/_param'), indent: 2, skip_first_indent: true %>

h2(#encryption-api). Encryption API Reference

inline-toc.
  Methods:
    - getDefaultParams#get-default-params
    - generateRandomKey#generate-random-key
  Related types:
    - Channel Options
    - CipherParams#cipher-params

The <span lang="default">@Ably.Rest.Crypto@</span><span lang="ruby">@Ably::Util::Crypto@</span><span lang="php">@Ably\Utils\Crypto@</span><span lang="python">@ably.util.crypto@</span><span lang="java">@io.ably.lib.util.crypto@</span><span lang="swift,objc">@ARTCrypto@</span><span lang="csharp"> @IO.Ably.Encryption.Crypto@</span> object exposes the following public methods:

h3(#methods). Methods

h6(#get-default-params).
  default:  getDefaultParams
  ruby:     get_default_params
  python:   get_default_params
  csharp:   GetDefaultParams
  go:       DefaultCipherParams

bq(definition).
  jsall:   "CipherParams":#cipher-params Crypto.getDefaultParams(Object params)
  ruby:    "CipherParams":#cipher-params Crypto.get_default_params(Hash params)
  python:  "CipherParams":#cipher-params Crypto.get_default_params(Dict params)
  php:     "CipherParams":#cipher-params Crypto.getDefaultParams(Array params)
  java:    "CipherParams":#cipher-params Crypto.getDefaultParams(Param[] params)
  csharp:  "CipherParams":#cipher-params GetDefaultParams(byte[] key = null, byte[] iv = null, CipherMode? mode = null)
  swift,objc: getDefaultParams(values: [NSObject : AnyObject]) -> "ARTCipherParams":#cipher-params
  go:      DefaultCipherParams() (<notextile>*</notextile>"CipherParams":#cipher-params, error)

<span lang="default">This call obtains a "@CipherParams@":#cipher-params object using the values passed in (which must be a subset of @CipherParams@ fields that at a minimum includes a @key@), filling in any unspecified fields with default values, and checks that the result is a valid and self-consistent.</span><span lang="csharp">This call takes a key, an initialization vector (iv) and a Cipher mode. There is also on override which accepts the @key@ and @iv@ as base64 encoded strings. It will validate the passed values and generate @CipherParams@</span><span lang="go">returns a "@CipherParams@":#cipher-params object with fields set to default values. This generates random secret key and initialization vector (iv) values.

You will rarely need to call this yourself, since the client library will handle it for you if you specify @cipher@ params when initializing a channel (as in the example "at the top":#getting-started)<span lang="jsall"> or when setting channel options with @channel#setOptions@</span>.

<div lang="default">
h5. Parameters

- <span lang="default">params</span><span lang="csharp">arguments</span> := The cipher <span lang="default">params</span><span lang="csharp">arguments</span> that you want to specify. It must at a minimum include a @key@, which should be either a binary (<span lang="java,csharp">@byte[]@</span><span lang="javascript">@ArrayBuffer@ or @WordArray@</span><span lang="nodejs">@Buffer@</span><span lang="ruby">byte array</span><span lang="objc,swift">@NSData@</span>) or a base64-encoded <span lang="objc">@NS@</span>@String@.
</div>
<div lang="go"></div>

h5. Returns

On success, the method returns a complete "@CipherParams@":#cipher-params object. Failure will raise an <span lang="php,ruby,java,python">"@AblyException@":/rest/types/#ably-exception </span><span lang="default">exception</span>.

h5. Example

```[jsall](code-editor:realtime/channel-encrypted)
  var cipherParams = Ably.Rest.Crypto.getDefaultParams({key: <key>});
  var channelOpts = { cipher: cipherParams };
  var channel = rest.channels.get('{{RANDOM_CHANNEL_NAME}}', channelOpts);
```

```[ruby]
  cipher_params = Ably::Util::Crypto.get_default_params({key: <key>})
  channel_opts = { cipher: cipher_params }
  channel = rest.channels.get('{{RANDOM_CHANNEL_NAME}}', channel_opts)
```

```[python]
  cipher_params = ably.util.crypto.get_default_params({'key': <key>})
  channel = rest.channels.get('{{RANDOM_CHANNEL_NAME}}', cipher=cipher_params)
```

```[php]
  $cipherParams = Ably\Utils\Crypto->getDefaultParams(array('key' => <key>));
  $channelOpts = array('cipher' => $cipherParams);
  $channel = $rest->channels->get('{{RANDOM_CHANNEL_NAME}}', $channelOpts);
```

```[java]
  CipherParams params = Crypto.getDefaultParams(new Param[]{ new Param("key", <key>) });
  ChannelOptions options = new ChannelOptions();
  options.encrypted = true;
  options.cipherParams = params;
  Channel channel = rest.channels.get("{{RANDOM_CHANNEL_NAME}}", options);
```

```[csharp]
  CipherParams cipherParams = Crypto.GetDefaultParams(<key>);
  var channel = rest.Channels.Get("{{RANDOM_CHANNEL_NAME}}", new ChannelOptions(cipherParams));
```

```[objc]
ARTCipherParams *params = [ARTCrypto getDefaultParams:@{@"key": <key>}];
ARTChannelOptions *options = [[ARTChannelOptions alloc] initWithCipher:params];
ARTRealtimeChannel *channel = [rest.channels get:@"{{RANDOM_CHANNEL_NAME}}" options:options];
```

```[swift]
let params = ARTCrypto.getDefaultParams(["key": <key>])
let options = ARTChannelOptions(cipher: params)
let channel = rest.channels.get("{{RANDOM_CHANNEL_NAME}}", options: options)
```

```[go]
params, err := Crypto.DefaultCipherParams()
```

h6(#generate-random-key).
  default:    generateRandomKey
  ruby:       generate_random_key
  python:     generate_random_key
  csharp,go:  GenerateRandomKey

bq(definition).
  default:    Crypto.generateRandomKey(Int keyLength?, callback("ErrorInfo":/rest/types#error-info err, @Buffer@ key))
  ruby:       byte array Crypto.generate_random_key(Int key_length?)
  python:     byte array Crypto.generate_random_key(Int key_length?)
  php:        string Crypto.generateRandomKey(Int keyLength?)
  java:       @byte[]@ Crypto.generateRandomKey(Int keyLength?)
  csharp:     byte[] GenerateRandomKey(int? keyLength = null, CipherMode? mode = null)
  objc,swift: generateRandomKey(length?: UInt) -> NSData
  go:         GenerateRandomKey(keyLength ...int) ([]byte, error)

This call obtains a randomly-generated binary key of the specified key length<span lang="csharp"> and optional CipherMode</span>.

h5. Parameters

- <span lang="default">keyLength</span><span lang="ruby,python">key_length</span> := Optional @Int@ with the length of key to generate. For AES, this should be either 128 or 256. If unspecified, defaults to 256.

- <div lang="csharp">mode</div> := Optional AES @CipherMode@ which is used when the key is generated
- <div lang="jsall">callback</div> := is a function of the form @function(err, key)@ which is called upon completion

blang[jsall].
  h5. Callback result

  On successfully generating a key, the callback is called with that key as a <span lang=javascript>@WordArray@</span><span lang=nodejs>@Buffer@</span>, and @err@ is @null@. On failure to create a key, @err@ contains an "@ErrorInfo@":#error-info object describing the failure reason.

blang[java,ruby,objc,swift,php,python,csharp,go].
  h5. Returns

  On success, the method returns the generated key as a <span lang="java">@byte[]@ array</span><span lang="python">@bytes@</span><span lang="ruby">byte array</span><span lang="php">binary string</span><span lang="objc,swift">@NSData@</span><span lang="go">@[]byte@ array</span>. <span lang="default">Failure will raise an "@AblyException@":/rest/types/#ably-exception</span><span lang="go">Failure will cause error to contain an "@ErrorInfo@":#error-info object describing the failure reason.

h5. Example

```[jsall]
  Ably.Rest.Crypto.generateRandomKey(256, function(err, key) {
    if(err) {
      console.log("Key generation failed: " + err.toString());
    } else {
      var channel = rest.channels.get('{{RANDOM_CHANNEL_NAME}}', {cipher: {key: key}});
    }
  });
```

```[ruby]
  key = Ably::Util::Crypto.generate_random_key(256)
  channel = rest.channels.get('{{RANDOM_CHANNEL_NAME}}', { cipher: {key: key}})
```

```[python]
  cipher_params = ably.util.crypto.generate_random_key(256)
  channel = rest.channels.get('{{RANDOM_CHANNEL_NAME}}', cipher={'key': key})
```

```[php]
  $key = Ably\Utils\Crypto->generateRandomKey(256);
  $channel = $rest->channels->get('{{RANDOM_CHANNEL_NAME}}', array('cipher' => array('key' => $key)));
```

```[java]
  byte[] key = Crypto.generateRandomKey(256);
  ChannelOptions options = ChannelOptions.withCipher(key);
  Channel channel = rest.channels.get("{{RANDOM_CHANNEL_NAME}}", options);
```

```[csharp]
  byte[] key = Crypto.GenerateRandomKey(256);
  ChannelOptions options = new ChannelOptions(key);
  var channel = rest.Channels.Get("{{RANDOM_CHANNEL_NAME}}", options);
```

```[objc]
  NSData *key = [ARTCrypto generateRandomKey:256];
  ARTChannelOptions *options = [[ARTChannelOptions alloc] initWithCipherKey:key];
  ARTRealtimeChannel *channel = [rest.channels get:@"{{RANDOM_CHANNEL_NAME}}" options:options];
```

```[swift]
let key = ARTCrypto.generateRandomKey(256)
let options = ARTChannelOptions(cipherWithKey: key)
let channel = rest.channels.get("{{RANDOM_CHANNEL_NAME}}", options: options)
```

```[go]
key, err := Crypto.GenerateRandonKey(256)
```

h3(#related-types). Related types

h4(#channel-options).
  default:     ChannelOptions Object
  objc,swift:  ARTChannelOptions
  ruby:        ChannelOptions Hash
  python:      ChannelOptions Dict
  php:         ChannelOptions Array
  csharp:      IO.Ably.ChannelOptions
  java:        io.ably.lib.types.ChannelOptions

<%= partial partial_version('types/_channel_options') %>

h4(#cipher-params).
  default:    CipherParams
  objc,swift: ARTCipherParams
  ruby:       CipherParams Hash
  python:     CipherParams Dict
  php:        CipherParams Array
  csharp:     IO.Ably.CipherParams
  java:       io.ably.lib.util.Crypto.CipherParams

<%= partial partial_version('types/_cipher_params') %>

h2(#history-api). History API Reference

inline-toc.
  Channel:
    - history(options)#channel-history
  Presence:
    - history(options)#presence-history
  Related types:
    - Message
    - PresenceMessage#presence-message
    - Presence action
    - PaginatedResult#paginated-result
    - Param

h3. Channel object

The "Rest @Channel@ object":/rest/channels exposes the following public method to obtain "@Message@":#message history.

h4. Methods

h6(#channel-history).
  default: history
  csharp,go: History

bq(definition).
  default:    history(Object option, callback("ErrorInfo":/rest/types#error-info err, "PaginatedResult":#paginated-result<"Message":#message> resultPage))
  ruby:       "PaginatedResult":#paginated-result<"Message":#message> history(Hash option)
  python:     "PaginatedResult":#paginated-result<"Message":#message> history(kwargs_options)
  php:        "PaginatedResult":#paginated-result<"Message":#message> history(Array option)
  java:       "PaginatedResult":#paginated-result<"Message":#message> history("Param":#param[] option)
  csharp:     Task<"PaginatedResult":#paginated-result<"Message":#message>> HistoryAsync("PaginatedRequestParams":#data-request query);
  objc,swift: history(query: ARTDataQuery?, callback: ("ARTPaginatedResult":#paginated-result<"ARTMessage":#message>?, ARTErrorInfo?) -> Void) throws
  go:         (c <notextile>*</notextile>RestChannel) History(option <notextile>*</notextile>PaginateParams) (<notextile>*</notextile>"PaginatedResult":#paginated-result, error)

Gets a "paginated":#paginated-result set of historical messages for this channel.

h5. Parameters

- <span lang="default">option</span><span lang="objc,swift,csharp">query</span><span lang="java">"Param":#param[] option</span> := <span lang="default">an optional object containing the query parameters</span><span lang="python">optional keyword arguments containing the query parameters</span><span lang="ruby">an optional set of key value pairs containing the query parameters</span><span lang="php">an Associate Array containing the query parameters</span>, as specified below.

- <div lang="jsall">callback</div> := is a function of the form: @function(err, resultPage)@
- <div lang="swift,objc">callback</div> := called with a "ARTPaginatedResult":#paginated-result<"ARTMessage":#message> object or an error

h5. <span lang="default">@options@ parameters</span><span lang="objc,swift">@ARTDataQuery@ properties</span><span lang="csharp">"@PaginatedRequestParams@":#paginated-request-params properties</span>

- <span lang="default">start</span><span lang="ruby">:start</span><span lang="csharp,go">Start</span> := _beginning of time_ earliest <span lang="csharp">@DateTimeOffset@ or </span><span lang="ruby">@Time@ or </span>time in milliseconds since the epoch for any messages retrieved<br>__Type: <span lang="default">@Long@</span><span lang="ruby">@Int or @Time@</span><span lang="csharp">@DateTimeOffset@</span>__
- <span lang="default">end</span><span lang="ruby">:end</span><span lang="csharp,go">End</span> := _current time_ latest <span lang="csharp">@DateTimeOffset@ or </span><span lang="ruby">@Time@ or </span>time in milliseconds since the epoch for any messages retrieved<br>__Type: <span lang="default">@Long@</span><span lang="ruby">@Int or @Time@</span><span lang="csharp">@DateTimeOffset@</span>__
- <span lang="default">direction</span><span lang="ruby">:direction</span><span lang="csharp,go">Direction</span> := _backwards_ <span lang="ruby">@:@</span>@forwards@ or <span lang="ruby">@:@</span>@backwards@<br>__Type: <span lang="default">@String@</span><span lang="ruby">@Symbol@</span><span lang="csharp">@Direction@ enum</span>__
- <span lang="default">limit</span><span lang="ruby">:limit</span><span lang="csharp,go">Limit</span> := _100_ maximum number of messages to retrieve up to 1,000<br>__Type: @Integer@__

blang[jsall,objc,swift].
  h5. Callback result

  On success, @resultPage@ contains a "@PaginatedResult@":#paginated-result encapsulating an array of "@Message@":#message objects corresponding to the current page of results. "@PaginatedResult@":#paginated-result supports pagination using "@next()@":#paginated-result and "@first()@":#paginated-result methods.

  On failure to retrieve message history, @err@ contains an "@ErrorInfo@":#error-info object with the failure reason.

blang[java,ruby,php,python].
  h5. Returns

  On success, the returned "@PaginatedResult@":#paginated-result encapsulates an array of "@Message@":#message objects corresponding to the current page of results. "@PaginatedResult@":#paginated-result supports pagination using "@next@":#paginated-result and "@first@":#paginated-result methods.

  Failure to retrieve the message history will raise an "@AblyException@":/rest/types/#ably-exception

blang[go].
  h5. Returns

  On success, the returned "@PaginatedResult@":#paginated-result encapsulates an array of "@Message@":#message objects corresponding to the current page of results. "@PaginatedResult@":#paginated-result supports pagination using "@next@":#paginated-result and "@first@":#paginated-result methods.

  Failure to retrieve the message history will mean @error@ contains an "@ErrorInfo@":#error-info object with the failure reason.

blang[csharp].
  h5. Returns

  This method returns a @Task@ and needs to be awaited.

  On success, the returned "@PaginatedResult@":#paginated-result encapsulates an array of "@Message@":#message objects corresponding to the current page of results. "@PaginatedResult@":#paginated-result supports pagination using "@NextAsync@":#paginated-result and "@FirstAsync@":#paginated-result methods.

  Failure to retrieve the message history will raise an "@AblyException@":/rest/types/#ably-exception

h3. Presence object

"Rest @Presence@ object":/rest/presence exposes the following public method to obtain presence event history such as enter, update and leave events. These events are represented as "@PresenceMessage@":#presence-message objects.

h4. Methods

h6(#presence-history).
  default: history
  csharp,go: History

bq(definition).
  default:    history(Object option, callback("ErrorInfo":/rest/types#error-info err, "PaginatedResult":#paginated-result<"PresenceMessage":#presence-message> resultPage))
  ruby:       "PaginatedResult":#paginated-result<"PresenceMessage":#presence-message> history(Hash option)
  python:     "PaginatedResult":#paginated-result<"PresenceMessage":#presence-message> history(kwargs_options)
  php:        "PaginatedResult":#paginated-result<"PresenceMessage":#presence-message> history(Array option)
  java:       "PaginatedResult":#paginated-result<"PresenceMessage":#presence-message> history("Param":#param[] option)
  csharp:     Task<"PaginatedResult":#paginated-result<"PresenceMessage":#presence-message>> HistoryAsync("PaginatedRequestParams":#data-request query);
  objc,swift: history(query: ARTDataQuery?, callback: ("ARTPaginatedResult":#paginated-result<"ARTPresenceMessage":#presence-message>?, ARTErrorInfo?) -> Void) throws
  go:         (p <notextile>*</notextile>RestPresence) History(option <notextile>*</notextile>PaginateParams) (<notextile>*</notextile>PaginatedResult, error)

Gets a "paginated":#paginated-result set of historical presence events for this channel.

h5. Parameters

- <span lang="default">option</span><span lang="java">"Param":#param[] option</span><span lang="csharp">"PaginatedRequestParams":#paginated-request-params query</span> := <span lang="default">an optional object containing the query parameters</span><span lang="python">optional keyword arguments containing the query parameters</span><span lang="ruby">an optional set of key value pairs containing the query parameters</span><span lang="php">an Associate Array containing the query parameters</span>, as specified below.

- <div lang="jsall">callback</div> := is a function of the form: @function(err, resultPage)@
- <div lang="swift,objc">callback</div> := called with a "ARTPaginatedResult":#paginated-result<"ARTPresenceMessage":#presence-message> object or an error

h5. <span lang="default">@options@ parameters</span><span lang="objc,swift">@ARTDataQuery@ properties</span><span lang="csharp">"@PaginatedRequestParams@":#paginated-request-params properties</span>

- <span lang="default">start</span><span lang="ruby">:start</span><span lang="csharp,go">Start</span> := _beginning of time_ earliest <span lang="csharp">@DateTimeOffset@ or </span><span lang="ruby">@Time@ or </span>time in milliseconds since the epoch for any presence events retrieved<br>__Type: <span lang="default">@Long@</span><span lang="ruby">@Int or @Time@</span><span lang="csharp">@DateTimeOffset@</span>__
- <span lang="default">end</span><span lang="ruby">:end</span><span lang="csharp,go">End</span> := _current time_ latest <span lang="csharp">@DateTimeOffset@ or </span><span lang="ruby">@Time@ or </span>time in milliseconds since the epoch for any presence events retrieved<br>__Type: <span lang="default">@Long@</span><span lang="ruby">@Int or @Time@</span><span lang="csharp">@DateTimeOffset@</span>__
- <span lang="default">direction</span><span lang="ruby">:direction</span><span lang="csharp,go">Direction</span> := _backwards_ <span lang="ruby">@:@</span>@forwards@ or <span lang="ruby">@:@</span>@backwards@<br>__Type: <span lang="default">@String@</span><span lang="ruby">@Symbol@</span><span lang="csharp">@Direction@ enum</span>__
- <span lang="default">limit</span><span lang="ruby">:limit</span><span lang="csharp,go">Limit</span> := _100_ maximum number of presence events to retrieve up to 1,000<br>__Type: @Integer@__

blang[jsall,objc,swift].
  h5. Callback result

  On success, @resultPage@ contains a "@PaginatedResult@":#paginated-result encapsulating an array of "@PresenceMessage@":#presence-message objects corresponding to the current page of results. "@PaginatedResult@":#paginated-result supports pagination using "@next()@":#paginated-result and "@first()@":#paginated-result methods.

  On failure to retrieve presence event history, @err@ contains an "@ErrorInfo@":#error-info object with the failure reason.

blang[java,ruby,php,python].
  h5. Returns

  On success, the returned "@PaginatedResult@":#paginated-result encapsulates an array of "@PresenceMessage@":#presence-message objects corresponding to the current page of results. "@PaginatedResult@":#paginated-result supports pagination using "@next@":#paginated-result and "@first@":#paginated-result methods.

  Failure to retrieve the presence event history will raise an "@AblyException@":/rest/types/#ably-exception

blang[go].
  h5. Returns

  On success, the returned "@PaginatedResult@":#paginated-result encapsulates an array of "@PresenceMessage@":#presence-message objects corresponding to the current page of results. "@PaginatedResult@":#paginated-result supports pagination using "@next@":#paginated-result and "@first@":#paginated-result methods.

  Failure to retrieve the message history will mean @error@ contains an "@ErrorInfo@":#error-info object with the failure reason.

blang[csharp].
  h5. Returns

  This method returns a @Task@ and needs to be awaited.

  On success, the returned "@PaginatedResult@":#paginated-result encapsulates an array of "@PresenceMessage@":#presence-message objects corresponding to the current page of results. "@PaginatedResult@":#paginated-result supports pagination using "@NextAsync@":#paginated-result and "@FirstAsync@":#paginated-result methods.

  Failure to retrieve the presence event history will raise an "@AblyException@":/rest/types/#ably-exception

h3(#related-types). Related types

h4(#message).
  default: Message
  swift,objc: ARTMessage
  ruby:    Ably::Models::Message Enum
  java:    io.ably.lib.types.Message
  csharp:  IO.Ably.Message

<%= partial partial_version('types/_message') %>

h4(#presence-message).
  default: PresenceMessage
  swift,objc: ARTPresenceMessage
  ruby:    Ably::Models::PresenceMessage Enum
  java:    io.ably.lib.types.PresenceMessage
  csharp:  IO.Ably.PresenceMessage

<%= partial partial_version('types/_presence_message') %>

h4(#presence-action).
  default: Presence action
  python:  PresenceAction
  swift,objc: ARTPresenceAction
  java:    io.ably.lib.types.PresenceMessage.Action
  ruby:    Ably::Models::PresenceMessage::ACTION
  csharp:  IO.Ably.PresenceAction

<%= partial partial_version('types/_presence_action') %>

h4(#paginated-request-params).
  csharp: IO.Ably.PaginatedRequestParams

blang[csharp].
  <%= partial partial_version('types/_history_request_params'), indent: 2, skip_first_indent: true %>

h4(#paginated-result).
  default: PaginatedResult
  swift,objc: ARTPaginatedResult
  ruby:    Ably::Models::PaginatedResult
  java:    io.ably.lib.types.PaginatedResult
  csharp:  IO.Ably.PaginatedResult

<%= partial partial_version('types/_paginated_result') %>

h4(#param).
  java:    io.ably.lib.types.Param

blang[java].
  <%= partial partial_version('types/_param'), indent: 2, skip_first_indent: true %>

h2(#message-api). Message API Reference

inline-toc.
  Properties:
    - name#name
    - data#data
    - id#id
    - clientId#client-id
    - connectionId#connection-id
    - timestamp#timestamp
    - encoding#encoding
  Methods:
    - fromEncoded#message-from-encoded
    - fromEncodedArray#message-from-encoded-array

h3(#properties).
  default: Properties
  java:    Members
  ruby:    Attributes
  python:  Attributes

A @Message@ represents an individual message that is sent to or received from Ably.

h6(#name).
  default: name
  csharp,go: Name

The event name, if provided. <br>__Type: @String@__

h6(#data).
  default: data
  csharp,go: Data

The message payload, if provided.<br>__Type: <span lang="default">@String@, @StringBuffer@, @JSON Object@</span><span lang="java">@String@, @ByteArray@, @JSONObject@, @JSONArray@</span><span lang="csharp">@String@, @byte[]@, @plain C# object that can be serialized to Json@</span><span lang="ruby">@String@, @Binary@ (ASCII-8BIT String), @Hash@, @Array@</span><span lang="python">@String@, @Bytearray@, @Dict@, @List@</span><span lang="php">@String@, @Binary String@, @Associative Array@, @Array@</span><span lang="objc">@NSString *@, @NSData *@, @NSDictionary *@, @NSArray *@</span><span lang="swift">@String@, @NSData@, @Dictionary@, @Array@</span><span lang="flutter">@String@, @Map@, @List@</span>__

h6(#extras).
  default: extras
  csharp: Extras

Metadata and/or ancillary payloads, if provided. The only currently valid payload for extras is the "@push@":/general/push/publish#channel-broadcast-example object.<br>__Type: <span lang="java">@JSONObject@, @JSONArray@</span><span lang="csharp">plain C# object that can be converted to Json</span><span lang="jsall">@JSON Object@</span><span lang="ruby">@Hash@, @Array@</span><span lang="python">@Dict@, @List@</span><span lang="swift">@Dictionary@, @Array@</span><span lang="objc">@NSDictionary *@, @NSArray *@</span><span lang="php">@Associative Array@, @Array@</span>__

h6(#id).
  default: id
  csharp,go: Id

A Unique ID assigned by Ably to this message. Can optionally be assigned by the client as part of "idempotent publishing":#idempotent.<br>__Type: @String@__

h6(#client-id).
  default: clientId
  csharp,go: ClientId
  ruby: client_id
  python: client_id

The client ID of the publisher of this message.<br>__Type: @String@__

h6(#connection-id).
  default: connectionId
  csharp,go: ConnectionId
  ruby: connection_id
  python: connection_id

The connection ID of the publisher of this message.<br>__Type: @String@__

h6(#timestamp).
  default: timestamp
  csharp,go: Timestamp

Timestamp when the message was received by the Ably, as <span lang="default">milliseconds since the epoch</span><span lang="ruby">a @Time@ object</span><br>.__Type: <span lang="default">@Integer@</span><span lang="java">@Long Integer@</span><span lang="csharp">@DateTimeOffset@</span><span lang="ruby">@Time@</span><span lang="objc,swift">@NSDate@</span>__

h6(#encoding).
  default: encoding
  csharp,go: Encoding

This will typically be empty as all messages received from Ably are automatically decoded client-side using this value. However, if the message encoding cannot be processed, this attribute will contain the remaining transformations not applied to the @data@ payload.<br>__Type: @String@__

h3(methods).
  default: Message methods

h6(#message-from-encoded).
  default: Message.fromEncoded

bq(definition).
  default: Message.fromEncoded(Object encodedMsg, ChannelOptions channelOptions?) -> Message

A static factory method to create a "@Message@":/rest/types#message from a deserialized @Message@-like object encoded using Ably's wire protocol.

h5. Parameters

- encodedMsg := a @Message@-like deserialized object.<br>__Type: @Object@__
- channelOptions := an optional "@ChannelOptions@":/rest/types#channel-options. If you have an encrypted channel, use this to allow the library can decrypt the data.<br>__Type: @Object@__

h5. Returns

A "@Message@":/rest/types#message object

h6(#message-from-encoded-array).
  default: Message.fromEncodedArray

bq(definition).
  default: Message.fromEncodedArray(Object[] encodedMsgs, ChannelOptions channelOptions?) -> Message[]

A static factory method to create an array of "@Messages@":/rest/types#message from an array of deserialized @Message@-like object encoded using Ably's wire protocol.

h5. Parameters

- encodedMsgs := an array of @Message@-like deserialized objects.<br>__Type: @Array@__
- channelOptions := an optional "@ChannelOptions@":/rest/types#channel-options. If you have an encrypted channel, use this to allow the library can decrypt the data.<br>__Type: @Object@__

h5. Returns

An @Array@ of "@Message@":/rest/types#message objects

h2(#presence-api). Presence API Reference

inline-toc.
  Methods:
    - get(options)#get
    - history(options)#history
  Related types:
    - PresenceMessage#presence-message
    - Presence action
    - PaginatedResult#paginated-result
    - Param

h3. Methods

h6(#get).
  default: get
  csharp,go: Get

Get the current presence member set for this channel.  In the REST client library this method directly queries "Ably's REST presence API":/rest-api#presence

bq(definition).
  default:    get(Object options, callback("ErrorInfo":/realtime/types#error-info err, "PaginatedResult":#paginated-result<"PresenceMessage":#presence-message> resultPage))
  ruby:       "PaginatedResult":#paginated-result<"PresenceMessage":#presence-message> get(Hash options)
  python:     "PaginatedResult":#paginated-result<"PresenceMessage":#presence-message> get(kwargs_options)
  php:        "PaginatedResult":#paginated-result<"PresenceMessage":#presence-message> get(Array options)
  java:       "PaginatedResult":#paginated-result<"PresenceMessage":#presence-message> get("Param":#param[] options)
  csharp:     Task<"PaginatedResult":#paginated-result<"PresenceMessage":#presence-message>> GetAsync(int? limit = null, string clientId = null, string connectionId = null);
  swift,objc: get(query: ARTPresenceQuery, callback: (["ARTPresenceMessage":#presence-message], ARTErrorInfo?) -> Void)
  go:         (p <notextile>*</notextile>RestPresence) Get(options <notextile>*</notextile>PaginateParams) (<notextile>*</notextile>"PaginatedResult":#paginated-result, error)

Gets an array of members present on the channel as "PresenceMessage":#presence-message objects.

blang[jsall,ruby,python,php,java,swift,objc,go].
  h5. Parameters

  - <span lang="default">options</span><span lang="objc,swift,csharp">query</span><span lang="java">"Param":#param[] options</span> := <span lang="default">an optional object containing query parameters</span><span lang="python">optional keyword arguments containing the query parameters</span><span lang="ruby">an optional set of symbol key and value pairs containing the query parameters</span><span lang="php">an optional Associate Array containing the query parameters</span> as specified below.

  - <div lang="jsall">callback</div> := is a function of the form: @function(err, "PaginatedResult":#paginated-result<"PresenceMessage":#presence-message> resultPage)@
  - <div lang="objc,swift">callback</div> := called with a "@PaginatedResult@":#paginated-result@<@"@PresenceMessage@":#presence-message@>@, or with an error

h5. <span lang="default">@options@ parameters</span><span lang="objc,swift">@ARTPresenceQuery@ properties</span><span lang="csharp">Arguments</span>

- <span lang="default">clientId</span><span lang="python">client_id</span><span lang="ruby">:client_id</span> := when provided, will filter array of members returned that match the provided <span lang="default">"@clientId@":/rest/usage#client-id</span><span lang="ruby,python">"@client_id@":/rest/usage#client-id</span><span lang="csharp">"@ClientId@":/rest/usage#client-id</span> string
- <span lang="default">connectionId</span><span lang="python">connection_id</span><span lang="ruby">:connection_id</span> := when provided, will filter array of members returned that match the provided <span lang="default">@connectionId@</span><span lang="csharp">@ConnectionId@</span><span lang="ruby">@connection_id@</span>":/realtime/connection/#id string

blang[jsall].
  h5. Callback result

  On success, @resultPage@ contains a "@PaginatedResult@":#paginated-result encapsulating an array of "@PresenceMessage@":#presence-message objects corresponding to the current page of members currently present on the channel. "@PaginatedResult@":#paginated-result supports pagination using "@next()@":#paginated-result and "@first()@":#paginated-result methods.

  On failure to retrieve the current presence member set, @err@ contains an "@ErrorInfo@":#error-info object with the failure reason.

blang[java,ruby,php,python,csharp].
  h5. Returns

  <span lang="csharp">This method is asynchronous and needs to be awaited.</span>

  On success, the returned "@PaginatedResult@":#paginated-result encapsulates an array of "@PresenceMessage@":#presence-message objects corresponding to the current page of members currently present on the channel. "@PaginatedResult@":#paginated-result supports pagination using "<span lang="default">@next@</span><span lang="csharp">@NextAsync@</span>":#paginated-result and "<span lang="default">@first@</span><span lang="csharp">@FirstAsync@</span>":#paginated-result methods.

  Failure to retrieve the current presence member set will raise an "@AblyException@":/realtime/types/#ably-exception

blang[java,ruby,php,python,csharp].
  h5. Returns

  <span lang="go">This method is asynchronous and needs to be awaited.</span>

  On success, @resultPage@ contains a "@PaginatedResult@":#paginated-result encapsulating an array of "@PresenceMessage@":#presence-message objects corresponding to the current page of members currently present on the channel. "@PaginatedResult@":#paginated-result supports pagination using "@next()@":#paginated-result and "@first()@":#paginated-result methods.

  Failure to retrieve the current presence member, the @error@ contains an "@ErrorInfo@":#error-info object with the failure reason.

h6(#history). History

bq(definition).
  default:    history(Object options, callback("ErrorInfo":/rest/types#error-info err, "PaginatedResult":#paginated-result<"PresenceMessage":#presence-message> resultPage))
  ruby:       "PaginatedResult":#paginated-result<"PresenceMessage":#presence-message> history(Hash options)
  python:     "PaginatedResult":#paginated-result<"PresenceMessage":#presence-message> history(kwargs_options)
  php:        "PaginatedResult":#paginated-result<"PresenceMessage":#presence-message> history(Array options)
  java:       "PaginatedResult":#paginated-result<"PresenceMessage":#presence-message> history("Param":#param[] options)
  csharp:     Task<"PaginatedResult":#paginated-result<"PresenceMessage":#presence-message>> HistoryAsync("PaginatedRequestParams":#paginated-request-params query);
  objc,swift: history(query: ARTDataQuery?, callback: ("ARTPaginatedResult":#paginated-result<"ARTPresenceMessage":#presence-message>?, ARTErrorInfo?) -> Void) throws
  go:         (p <notextile>*</notextile>RestPresence) History(params <notextile>*</notextile>PaginateParams) (<notextile>*</notextile>PaginatedResult, error)

Gets a "paginated":#paginated-result set of historical presence message events for this channel. If the "channel is configured to persist messages to disk":https://faqs.ably.com/how-long-are-messages-stored-for, then the presence message event history will "typically be available for 24 - 72 hours":https://faqs.ably.com/how-long-are-messages-stored-for. If not, presence message events are only retained in memory by the Ably service for two minutes.

h5. Parameters

- <span lang="default">options</span><span lang="java">"Param":#param[] options</span><span lang="objc,swift">query</span><span lang="csharp">"PaginatedRequestParams":#paginated-request-params query</span> := <span lang="default">an optional object containing query parameters</span><span lang="python">optional keyword arguments containing the query parameters</span><span lang="ruby">an optional set of key value pairs containing query parameters</span><span lang="php">an optional Associate Array containing the query parameters</span>, as specified in the "presence history API documentation":/rest/history#presence-history.

- <div lang="jsall">callback</div> := is a function of the form: @function(err, resultPage)@
- <div lang="swift,objc">callback</div> := called with a "ARTPaginatedResult":#paginated-result<"ARTPresenceMessage":#presence-message> object or an error

blang[jsall,swift,objc].
  h5. Callback result

  On success, @resultPage@ contains a "@PaginatedResult@":#paginated-result encapsulating an array of "@PresenceMessage@":#presence-message objects corresponding to the current page of results. "@PaginatedResult@":#paginated-result supports pagination using "@next()@":#paginated-result and "@first()@":#paginated-result methods.

  On failure to retrieve message history, @err@ contains an "@ErrorInfo@":#error-info object with the failure reason.

blang[java,ruby,php,python,csharp].
  h5. Returns

  <span lang="csharp">This method is asynchronous and needs to be awaited.</span>

  On success, the returned "@PaginatedResult@":#paginated-result encapsulates an array of "@PresenceMessage@":#presence-message objects corresponding to the current page of results. "@PaginatedResult@":#paginated-result supports pagination using "<span lang="default">@next@</span><span lang="csharp">@NextAsync@</span>":#paginated-result and "<span lang="default">@first@</span><span lang="csharp">@FirstAsync@</span>":#paginated-result methods.

  Failure to retrieve the message history will raise an "@AblyException@":/realtime/types/#ably-exception

blang[go].
  h5. Returns

  On success, @resultPage@ contains a "@PaginatedResult@":#paginated-result encapsulating an array of "@PresenceMessage@":#presence-message objects corresponding to the current page of results. "@PaginatedResult@":#paginated-result supports pagination using "@next()@":#paginated-result and "@first()@":#paginated-result methods.

  Upon failure to retrieve the message history, the @error@ contains an "@ErrorInfo@":#error-info object with the failure reason.

h3(#related-types). Related types

h4(#presence-message).
  default: PresenceMessage
  swift,objc: ARTPresenceMessage
  ruby:    Ably::Models::PresenceMessage
  java:    io.ably.lib.types.PresenceMessage
  csharp:  IO.Ably.PresenceMessage

<%= partial partial_version('types/_presence_message') %>

h4(#presence-action).
  default: Presence action
  python:  PresenceAction
  swift,objc: ARTPresenceAction
  java:    io.ably.lib.types.PresenceMessage.Action
  ruby:    Ably::Models::PresenceMessage::ACTION
  csharp:  IO.Ably.PresenceAction

<%= partial partial_version('types/_presence_action') %>

h4(#paginated-request-params).
  csharp: PaginatedRequestParams

blang[csharp].
  <%= partial partial_version('types/_history_request_params'), indent: 2, skip_first_indent: true %>

h4(#paginated-result).
  default: PaginatedResult
  swift,objc: ARTPaginatedResult
  ruby:    Ably::Models::PaginatedResult
  java:    io.ably.lib.types.PaginatedResult
  csharp:  IO.Ably.PaginatedResult

<%= partial partial_version('types/_paginated_result') %>

h4(#param).
  java:    io.ably.lib.types.Param

blang[java].
  <%= partial partial_version('types/_param'), indent: 2, skip_first_indent: true %>

h2(#push-api). Push API Reference

inline-toc.
  Push Admin:
    - Methods:
      - publish#publish
    - Properties:
      - deviceRegistrations#device-registrations
      - channelSubscriptions#channel-subscriptions
    - DeviceRegistrations:
      - get#device-get-id
      - list(params)#device-list
      - save(DeviceDetails)#device-save
      - remove#device-remove-id
      - removeWhere(params)#device-remove-where
    - PushChannelSubscriptions:
      - list(params)#push-channel-sub-list
      - listChannels(params)#push-channel-sub-list-channels
      - save(PushChannelSubscription)#push-channel-sub-save
      - remove(PushChannelSubscription)#push-channel-sub-remove
      - removeWhere(params)#push-channel-sub-remove-where
  Related types:
    - DeviceDetails#device-details
    - PushChannelSubscription#push-channel-subscription
    - PushChannel#push-channel
    - PaginatedResult#paginated-result

<%= partial partial_version('types/_push_admin') %>

h3(#related-types). Related types

h4(#device-details).
  default:      DeviceDetails
  ruby:         Ably::Models::DeviceDetails
  swift,objc:   ARTDeviceDetails

<%= partial partial_version('types/_device_details') %>

h4(#push-channel-subscription).
  default:      PushChannelSubscription
  ruby:         Ably::Models::PushChannelSubscription
  java,android: ChannelSubscription
  swift,objc:   ArtPushChannelSubscription

<%= partial partial_version('types/_push_channel_subscription') %>

h4(#push-channel).
    default: PushChannel
    ruby:    Ably::Models::PushChannel

<%= partial partial_version('types/_push_channel') %>

h4(#paginated-result).
  default: PaginatedResult
  swift,objc: ARTPaginatedResult
  ruby:    Ably::Models::PaginatedResult
  java,android:    io.ably.lib.types.PaginatedResult
  csharp:  IO.Ably.PaginatedResult

<%= partial partial_version('types/_paginated_result') %>

h2(#statistics-api). Statistics API Reference

h6(#stats).
  default: stats
  csharp,go: Stats

bq(definition).
  jsall:      stats(Object options, callback("ErrorInfo":/rest/types#error-info err, "PaginatedResult":/rest/types#paginated-result<"Stats":/rest/types#stats> results))
  ruby:       "PaginatedResult":/rest/types#paginated-result<"Stats":/rest/types#stats> stats(Hash options)
  python:     "PaginatedResult":/rest/types#paginated-result<"Stats":/rest/types#stats> stats(kwargs_options)
  php:        "PaginatedResult":/rest/types#paginated-result<"Stats":/rest/types#stats> stats(Array options)
  java:       "PaginatedResult":/rest/types#paginated-result<"Stats":/rest/types#stats-type> stats("Param":#param[] options)
  csharp:     Task<"PaginatedResult":/rest/types#paginated-result<"Stats":/rest/types#stats-type>> StatsAsync(@StatsRequestParams@ query)
  swift,objc: stats(query: ARTStatsQuery?, callback: ("ARTPaginatedResult":#/realtime/types#paginated-result<"ARTStats":/realtime/types#stats>?, ARTErrorInfo?) -> Void) throws
  go:         (c <notextile>*</notextile>RestClient) Stats(params <notextile>*</notextile>PaginateParams) (<notextile>*</notextile>PaginatedResult, error)

This call queries the "Ably REST @/stats@ API endpoint":/rest-api#stats-type and retrieves your application's usage statistics. A "PaginatedResult":/rest/types#paginated-result is returned, containing an array of "Stats":/rest/types#stats-type for the first page of results. "PaginatedResult":/rest/types#paginated-result objects are iterable providing a means to page through historical statistics. "See an example set of raw stats returned via the REST API":/general/statistics.

<%= partial partial_version('rest/_stats') %>

h3(#related-types). Related types

h4(#stats-type).
  default: Stats object
  objc,swift: ARTStats
  java:    io.ably.lib.types.Stats
  ruby:    Ably::Models::Stats
  php:     Ably\Models\Stats
  csharp:  IO.Ably.Stats

<%= partial partial_version('types/_stats') %>

h4(#stats-request-params).
  csharp: IO.Ably.StatsRequestParams

blang[csharp].
  <%= partial partial_version('types/_stats_request_params'), indent: 2, skip_first_indent: true %>

h4(#stats-granularity).
  objc,swift: ARTStatsGranularity
  csharp:     IO.Ably.StatsGranularity

<%= partial partial_version('types/_stats_granularity') %>

h4(#param).
  java:    io.ably.lib.types.Param

blang[java].
  <%= partial partial_version('types/_param'), indent: 2, skip_first_indent: true %>

h2(#see-also). See also

* "Client Library SDK - Realtime interface overview":/realtime
* "Client Library SDK - REST interface overview":/rest
