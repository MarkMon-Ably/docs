blang[nodejs,javascript].
  @ClientOptions@ is a plain Javascript object and is used in the @Ably.Realtime@ constructor's @options@ argument.  The following attributes can be defined on the object:

blang[ruby].
  @ClientOptions@ is a Hash object and is used in the @Ably::Realtime@ constructor's @options@ argument.  The following key symbol values can be added to the Hash:

blang[java].
  @ClientOptions@ is used in the @AblyRealtime@ constructor's @options@ argument.

h4.
  default: Properties
  java:    Members
  ruby:    Attributes

- <span lang="default">@key@</span><span lang="ruby">@:key@</span> := The full key string, as obtained from the "application dashboard":http://support.ably.io/solution/articles/3000030053-how-do-i-access-my-app-dashboard. Use this option if you wish to use Basic authentication, or wish to be able to issue tokens without needing to defer to a separate entity to sign token requests. Read more about "Basic authentication":/general/authentication#basic-authentication<br>__Type: String__

- <span lang="default">@token@</span><span lang="ruby">@:token@</span> := An authenticated token string that is most commonly obtained from the @token@ property of a "@TokenDetails@":/realtime/types#token-details component of a token request response. Use this option if you wish to use Token authentication. Read more about "Token authentication":/general/authentication#token-authentication<br>__Type: String__

- <span lang="default">@tokenDetails@</span><span lang="ruby">@:token_details@</span> := An authenticated "@TokenDetails@":/realtime/types/#token-details object that is most commonly obtained from of a token request response. Use this option if you wish to use Token authentication. Read more about "Token authentication":/general/authentication#token-authentication<br>__Type: String__

- <span lang="default">@tls@</span><span lang="ruby">@:tls@</span> := _true_ A boolean value, indicating whether or not a TLS ("SSL") secure connection should be used. An insecure connection cannot be used with Basic authentication ensuring private keys are compromised in transit. "Find out more about TLS":https://support.ably.io/solution/articles/3000045208-are-messages-sent-to-and-received-from-ably-sent-security-using-tls<br>__Type: Boolean__

- <span lang="default">@clientId@</span><span lang="ruby">@:client_id@</span> := A client ID, used for identifying this client when publishing messages or for presence purposes. The <span lang="default">@clientId@</span><span lang="ruby">@client_id@</span> can be any non-empty string. This option is primarily intended to be used in situations where the library is instanced with a key; note that a <span lang="default">@clientId@</span><span lang="ruby">@client_id@</span> may also be implicit in a token used to instance the library; an error will be raised if a <span lang="default">@clientId@</span><span lang="ruby">@client_id@</span> specified here conflicts with the <span lang="default">@clientId@</span><span lang="ruby">@client_id@</span> implicit in the token. "Find out more about client identities":/how-ably-works#client-identity<br>__Type: String__

- <span lang="default">@authCallback@</span><span lang="ruby">@:auth_callback@</span> := A <span lang="default">function</span><span lang="java">@TokenCallback@ instance</span><span lang="ruby">proc / lambda</span> to call when a new token is required. The role of the callback is to either generate a signed "@TokenRequest@":/realtime/types#token-request which may then be submitted automatically by the library to the "@requestToken@ REST API":/rest-api#requesttoken; or to provide a valid token in as a "@TokenDetails@":/realtime/types#token-details object. See "authentication":/rest/authentication for details of the token request format and associated API calls.<br>__Type: <span lang="default">Function</span><span lang="java">@TokenCallback@</span><span lang="ruby">Proc / Lamda</span>__

- <span lang="default">@authUrl@</span><span lang="ruby">@:auth_url@</span> := A URL that the library may use to obtain a token string (in plain text format), or a signed "@TokenRequest@":/realtime/types#token-request or "@TokenDetails@":/realtime/types#token-details (in JSON format). For example, this can be used by a client to obtain signed token requests from an application server.<br>__Type: String__

- <span lang="default">@authMethod@</span><span lang="ruby">@:auth_method@</span> := _<span lang="default">@GET@</span><span lang="ruby">@:get@</span>_ The HTTP verb to use for the request, either <span lang="default">@GET@</span><span lang="ruby">@:get@</span> or <span lang="default">@POST@</span><span lang="ruby">@:post@</span><br>__Type: <span lang="default">String</span><span lang="ruby">Symbol</span>__

- <span lang="default">@authHeaders@</span><span lang="ruby">@:auth_headers@</span> := A set of key value pair headers to be added to any request made to the @authUrl@. Useful when an application requires these to be added to validate the request or implement the response.<br>__Type: <span lang="default">Object</span><span lang="ruby">Hash</span><span lang="java">Param[]</span>__

- <span lang="default">@authParams@</span><span lang="ruby">@:auth_params@</span> := A set of key value pair params to be added to any request made to the @authUrl@. When the @authMethod@ is @GET@, query params are added to the URL, whereas when @authMethod@ is @POST@, the params are sent as URL encoded form data. Useful when an application require these to be added to validate the request or implement the response.<br>__Type: <span lang="default">Object</span><span lang="ruby">Hash</span><span lang="java">Param[]</span>__

- <span lang="default">@useTokenAuth@</span><span lang="ruby">@:use_token_auth@</span> := When true, forces "Token authentication":/general/authentication#token-authentication to be used by the libary.<br>__Type: Boolean__

blang[javascript,nodejs].
  - @log@ := Parameters to control the log output of the library. The supplied value must be an object that may contain one or both of the following entries:
  <ul>
    <li>@level@: a number controlling the verbosity of the output from 1 (minimum, errors only) to 5 (most verbose);</li>
    <li>@handler@: a function to handle each line of log output. If @handler@ is not specified, @console.log@ is used.</li>
  </ul>
  Note that the log level and log handler have global scope in the library and will thus not act independently between library instances when multiple library instances exist concurrently.<br>__Type: Object__

  - @transports@ := An optional array of transports to use, in descending order of preference. <span lang="javascript">In the browser environment the available transports are: @web_socket@, @xhr@, @jsonp@.</span><span lang="nodejs">The transports available in the Node.js client library are: @web_socket@, @xhr@, @comet@.</span><br>__Type: String Array__

blang[java].
  - @logLevel@ := _5_ A number controlling the verbosity of the output from 2 (maximum, verbose) to 6 (errors only). A special value of 99 will silence all logging. Note that the @logLevel@ is a static variable in the library and will thus not act independently between library instances when multiple library instances exist concurrently.<br>__Type: Integer__

  - @logHandler@ := _@System.out PrintStream@_ A @LogHandler@ interface can be specified to handle each line of log output. If @logHandler@ is not specified, @System.out@ is used. Note that the @logHandler@ is a static variable in the library and will thus not act independently between library instances when multiple library instances exist concurrently.<br>__Type: PrintStream__

blang[ruby].
  - @:log_level@ :=_@:error@_ Log level for the standard Logger that outputs to @STDOUT@. Can be set to @:fatal@, @:error@, @:warn@, @:info@, @:debug@ or @:none@. Alternatively a "@Logger@ severity constant":http://ruby-doc.org/stdlib-2.2.0/libdoc/logger/rdoc/Logger.html#class-Logger-label-Description can be specified.<br>__Type: Symbol, "Logger::SEVERITY":http://ruby-doc.org/stdlib-2.2.0/libdoc/logger/rdoc/Logger.html#class-Logger-label-Description__

  - @:logger@ := _@STDOUT Logger@_ A "Ruby @Logger@":http://ruby-doc.org/stdlib-1.9.3/libdoc/logger/rdoc/Logger.html compatible object to handle each line of log output. If @loggger@ is not specified, @STDOUT@ is used.<br>__Type: Ruby Logger__


- <span lang="default">@useBinaryProtocol@</span><span lang="ruby">@:use_binary_protocol@</span> := _true_ If set to false, will forcibly disable the binary protocol. The binary protocol is used by default unless it is not supported. Find out more about the "benefits of binary encoding":https://support.ably.io/solution/articles/3000047365-do-you-binary-encode-your-messages-for-greater-efficiency<br>__Type: Boolean__

- <span lang="default">@queueMessages@</span><span lang="ruby">@:queue_messages@</span> := _true_ If false, this disables the default behaviour whereby the library queues messages on a connection in the disconnected or connecting states. The default behaviour allows applications to submit messages immediately upon instancing the library without having to wait for the connection to be established. Applications may use this option to disable queuing if they wish to have application-level control over the queueing under those conditions.<br>__Type: Boolean__

- <span lang="default">@echoMessages@</span><span lang="ruby">@:echo_messages@</span> := _true_ If false, prevents messages originating from this connection being echoed back on the same connection.

- <span lang="default">@autoConnect@</span><span lang="ruby">@:auto_connect@</span> := _true_ By default as soon as the client library is instanced it will connect to Ably. You can optionally set this to false and explicitly connect to Ably when require using the "@connect@":/realtime/usage/#connect method.<br>__Type: Boolean__

- <span lang="default">@recover@</span><span lang="ruby">@:recover@</span> := This option allows a connection to inherit the state of a previous connection that may have existed under a different instance of the Realtime library. This might typically be used by clients of the browser library to ensure connection state can be preserved when the user refreshes the page. See "connection state recovery":/realtime/connection/#connection-state-recovery for further information on this option.<br>__Type: String__

- <span lang="default">@queryTime@</span><span lang="ruby">@:query_time@</span> := _false_ If true, the library will query the Ably servers for the current time instead of relying on a locally-available time of day<br>__Type: Boolean__

- <span lang="default">@defaultTokenParams@</span><span lang="ruby">@:default_token_params@</span> := When a "TokenParams":/realtime/types#token-params object is provided, it will override the client library defaults when issuing new tokens or token requests<br>__Type: "TokenParams":/realtime/types#token-params_

- <span lang="default">@disconnectedRetryTimeout@</span><span lang="ruby">@:disconnected_retry_timeout@</span> := _<span lang="default">15,000ms</span><span lang="ruby">15s</span>_ When the connection enters the @DISCONNECTED@ state, after this delay in <span lang="default">milliseconds</span><span lang="ruby">seconds</span>, if the state is still @DISCONNECTED@, the client library will attempt to reconnect automatically<br>__Type: Integer__

- <span lang="default">@suspendedRetryTimeout@</span><span lang="ruby">@:suspended_retry_timeout@</span> := _<span lang="default">30,000ms</span><span lang="ruby">30s</span>_ When the connection enters the @SUSPENDED@ state, after this delay in <span lang="default">milliseconds</span><span lang="ruby">seconds</span>, if the state is still @SUSPENDED@, the client library will attempt to reconnect automatically<br>__Type: Integer__
