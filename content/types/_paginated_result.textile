A @PaginatedResult@ is a type that represents a page of results for all message and presence history, stats and REST presence requests. The response from a "paginated REST API query":/rest-api/#pagination is accompanied by metadata that indicates the relative queries available to the @PaginatedResult@ object.

h4.
  default: Properties
  java:    Members
  ruby:    Attributes

- @items@ := contains a page of results (for example an Array of "@Message@":#message or "@PresenceMessage@":#presence-message objects for a channel history request)<br>__Type: Array <Message, Presence, Stats>__
- <div lang="default">@isFirst@</div> := @true@ if this page is the first page<br>__Type: Boolean__
- <div lang="ruby">@first?@</div> := @true@ if this page is the first page<br>__Type: Boolean__

- <div lang="default">@isLast@</div> := @true@ if this page is the last page<br>__Type: Boolean__
- <div lang="ruby">@last?@</div> := @true@ if this page is the last page<br>__Type: Boolean__

- <div lang="default">@hasNext@</div> := @true@ if there are further pages<br>__Type: Boolean__
- <div lang="ruby">@has_next?@</div> := @true@ if there are further pages<br>__Type: Boolean__

h4. Methods

bq(definition).
  default:  first()
  ruby:     first
  java:     public PaginatedResult first()

Returns a new @PaginatedResult@ for the first page of results

bq(definition).
  default:  items()
  ruby:     items
  java:     public Array items()

Returns the current page of results as an Array

bq(definition).
  default:  next()
  ruby:     next
  java:     public PaginatedResult next()

Returns a new @PaginatedResult@ loaded with the next page of results. If there are no further pages, then <span lang="default">@null@</span><span lang="java">@Null@</span><span lang="ruby">@nil@</span> is returned

h4. Example

```[javascript,nodejs]
channel.history(function(err, paginatedResult) {
  console.log("Page 0 item 0:" + paginatedResult.items[0].data);
  paginatedResult.next(function(err, nextPage) {
    console.log("Page 1 item 1:" + nextPage.items[1].data);
  });
});
```
```[java]
PaginatedResult firstPage = channel.history();
System.out.println("Page 0 item 0:" + firstPage.items[0].data);
if (firstPage.hasNext) {
  PaginatedResult nextPage = firstPage.next();
  System.out.println("Page 1 item 1:" + nextPage.items[1].data);
});
```
```[ruby]
# When using the REST sync library
first_page = channel.history
puts "Page 0 item 0: #{first_page.items[0].data}"
if first_page.has_next?
  next_page = first_page.next
  puts "Page 1 item 1: #{next_page.items[1].data}"
end

# When using the Realtime EventMachine library
channel.history do |first_page|
  puts "Page 0 item 0: #{first_page.items[0].data}"
  if first_page.has_next?
    first_page.next do |next_page|
      puts "Page 1 item 1: #{next_page.items[1].data}"
    end
  end
end
```
