blang[jsall].
  @ConnectionState@ is a String with a value matching any of the "@Realtime Connection@ states":/realtime/connection#connection-states.

  ```[javascript]
    var allConnectionStates = [
      'initialized',
      'connecting',
      'connected',
      'disconnected',
      'suspended',
      'closing',
      'closed',
      'failed'
    ]
  ```

blang[java].
  @io.ably.lib.realtime.ConnectionState@ is an enum representing all the "@Realtime Connection@ states":/realtime/connection#connection-states.

  ```[java]
    public enum ConnectionState {
      initialized,   // 0
      connecting,    // 1
      connected,     // 2
      disconnected,  // 3
      suspended,     // 4
      closing,       // 5
      closed,        // 6
      failed         // 7
    }
  ```

blang[ruby].
  @Ably::Realtime::Connection::STATE@ is an enum-like value representing all the "@Realtime Connection@ states":/realtime/connection#connection-states. @STATE@ can be represented interchangeably as either symbols or constants.

  h4. Symbol states

  ```[ruby]
    :initialized # =>  0
    :connecting # =>   1
    :connected # =>    2
    :disconnected # => 3
    :suspended # =>    4
    :closing # =>      5
    :closed # =>       6
    :failed # =>       7
  ```

  h4. Constant states

  ```[ruby]
    Connection::STATE.Initialized # =>  0
    Connection::STATE.Connecting # =>   1
    Connection::STATE.Connected # =>    2
    Connection::STATE.Disconnected # => 3
    Connection::STATE.Suspended # =>    4
    Connection::STATE.Closing # =>      5
    Connection::STATE.Closed # =>       6
    Connection::STATE.Failed # =>       7
  ```

  h4. Example usage

  ```[ruby]
    # Example with symbols
    client.connection.on(:connected) { ... }

    # Example with constants
    client.connection.on(Ably::Realtime::Connection::STATE.Connected) { ... }

    # Interchangeable
    Ably::Realtime::Connection::STATE.Connected == :connected # => true
  ```
