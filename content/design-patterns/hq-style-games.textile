---
title: Live multiplayer quiz
section: design-patterns
index: 31
languages:
  - none
---

Multiplayer quizzes are a great way to engage your audience, be it as part of an event or in an e-learning environment. The year 2020 has seen a huge rise in the number of multiplayer quiz applications, allowing people to remotely participate in a live quiz with a host serving them questions and revealing scores as they go.

Be it a standalone quiz like Kahoot, or one that is integrated into your slide deck, like Mentimeter, the semantics of realtime messaging and general architecture for such apps are similar. You can see a few popular products which offer multiplayer quizzes in the image below:

<a href="/images/design-patterns/multiplayer-quiz-apps.png" target="_blank">
  <img src="/images/design-patterns/multiplayer-quiz-apps.png" style="width: 100%" alt="Multiplayer quiz apps">
</a>

In this article, we'll look at the high-level architecture required to build such multiplayer quiz apps and specifically explore the realtime message flow and implementation with Ably.

h3(#ably-in-a-nutshell). Ably in a nutshell

Ably provides APIs to implement pub/sub messaging for the realtime features in your apps. You also get a scalable infrastructure out-of-the-box, along with a suite of services like "presence":/realtime/presence - which shows the online/offline status of various participants, "automatic reconnection and resumption of messages":https://knowledge.ably.com/connection-state-recovery in case of intermittent network issues, "message ordering and guaranteed delivery":https://ably.com/four-pillars-of-dependability#integrity and easy ways to "integrate with third-party APIs":https://ably.com/integrations, etc. "Learn more about the platform":https://www.ably.com/pub-sub-messaging.

h2(#basic-features). Basic features in a multiplayer quiz app

While each product puts a unique spin on their multiplayer quiz offering, we can assume some common features:

h5. 1. The concept of host and participants

The host is generally the curator of the quiz questions and runs the live quiz for participants to engage with. The participants log into the specific quiz using an invite link. Once in, they see the questions appear on their devices with options to register their answers.

h5. 2. Live scores and leaderboards

As participants answer the questions, they get scored based on accuracy and any other factors like time-to-answer, etc. Based on when and what the answer is, the host and the other participants can see the leaderboard updating with live scores.

h5. 3. Synchronized timer

Each question has a limited amount of time within which the participants are required to choose an answer. This timer needs to run in-sync for all the participants to ensure fair play.

h5. 4. Being aware of peers

As these are mostly invite-only quizzes, participants like to know how many people are playing alongside them, and who they are.

h2(#architecture). Architecture

In this section, we'll see an architechtural pattern to build a live multiplayer quiz app.

A broad-view of the system that runs a multiplayer quiz for three participants would like so:

<a href="/images/design-patterns/high-level-architecture.png" target="_blank">
  <img src="/images/design-patterns/high-level-architecture.png" style="width: 100%" alt="High level architecture">
</a>

You would have your server publishing the questions, receiving the answers, checking them and computing the scores, etc. Among the front-end clients, you would have a host controlling the flow of the quiz and participants engaging accordingly.

The most important aspect in this system is how various messages flow between these components. As shown by the two-sided arrows, we need a way for these components to communicate bi-directionally, in a stateful manner, possibly at high frequency.

Enter, Ably...

<a href="/images/design-patterns/architecture-with-ably.png" target="_blank">
  <img src="/images/design-patterns/architecture-with-ably.png" style="width: 100%" alt="Architecture with Ably">
</a>

Ably enables pub/sub messaging, primarily over WebSockets. The concept of "channels":/realtime/channels allows you to categorize the data and decide which components have access to which channel. You can also specify "capabilities":/core-features/authentication#capabilities-explained for various participants on these channels like publish-only, subscribe-only, message history, or both, etc. 

An example of using the Ably Realtime API to publish and subscribe messages over channels is shown below:

```[javascript](code-editor:realtime/channel-publish)
  const realtime = new Ably.Realtime('{{API_KEY}}');
  const channel = realtime.channels.get('{{RANDOM_CHANNEL_NAME}}');
  channel.subscribe(function(message) {
    alert(`Received: ${message.data}`);
  });
  channel.publish('example', 'message data');
```

For a multiplayer quiz app, the specific channels could be the following:

<a href="/images/design-patterns/quiz-channels-architecture.png" target="_blank">
  <img src="/images/design-patterns/quiz-channels-architecture.png" style="width: 100%" alt="Channels in Ably">
</a>


Let's understand the above diagram in a bit more depth based on the categories of messages we'd like to stream between various compoenents.

h3(#channels). Channels usage


1. The @host-admin-ch@ channel

This channel is specifically meant for the host to trigger various events on the server like starting the quiz, showing the next question, etc. As you can see, none of the participants are part of this channel. We would want only the host to have admin rights to trigger such events.

2. The @quiz-ch@ channel

This channel is the main quiz channel transporting most of the quiz related data including new questions, correct answers, timer tick events, etc.

3. The @player-bob-ch@ channel

A dedicated channel for Player Bob to publish their answers for the questions in the quiz.

4. The @player-lisa-ch@ channel

A dedicated channel for Player Lisa to publish their answers for the questions in the quiz.

5. The @player-kai-ch@ channel

A dedicated channel for Player Lisa to publish their answers for the questions in the quiz.


Please note that this is only an example architecture. It is of course possible to have lesser or more number of channels as per your use-case. 

You can also use a single channel for all the players to publish their answers and use "event names":/realtime/messages#name to let the server know which data belongs to which player, etc. 

You can also take a look at a "breakdown of various limits":https://knowledge.ably.com/do-you-have-any-connection-message-rate-or-other-limits-on-accounts we've put in place to allow the Ably Realtime service to be used efficiently. 

You can start with this and update the architecture to whatever suits your app the best.


h3(#presence). Understanding who is online

The "presence":/core-features/presence feature allows participants to register their 'online/offline' status with Ably. We can use the @quiz-ch@ channel to manage the presence set as well. All we need to do is have our host and participants enter the presence set as soon as they connect. They'll automatically disappear from the presence set if they get disconnected for a long period due to internet issues or quit the app. 

Here's a quick snippet showing how presence works:

```[javascript](code-editor:realtime/presence-simple)
  const realtime = new Ably.Realtime({
    key: '{{API_KEY}}',
    clientId: 'bob' }
  );
  const channel = realtime.channels.get('{{RANDOM_CHANNEL_NAME}}');
  channel.presence.subscribe('enter', function(member) {
    alert('Member ' + member.clientId + ' entered');
  });
  channel.presence.enter();
```

You'll see in the demo application that only the quiz server has subscribed to presence entries and leaves to accordingly manage the participants, live stats, scores and leaderboard, etc. It is possible to have all the components subscribe to presence events as well but "that will lead to an n-squared complexity, making it difficult to scale":https://knowledge.ably.com/why-do-you-have-a-limit-on-the-number-of-members-present-on-a-channel.

h2(#starter-kit-demo). Starter kit and demo

We have built a starter kit in NodeJS and VueJS by following the architecture explained in this article. You can use it as a starting point and customize it as per your needs or take a look at the open-source project and build your own from scratch.

<a href="/images/design-patterns/host-and-players.png" target="_blank">
  <img src="/images/design-patterns/host-and-players.png" style="width: 100%" alt="Host and Players">
</a>

The demo additionally implements the "worker threads feature in NodeJS":https://nodejs.org/api/worker_threads.html to enable multiple quiz rooms, allowing various hosts to simultaneously host their quizzes to groups of participants. Check out the "GitHub repo":https://github.com/ably-labs/realtime-quiz-framework to learn more.

You can also "try out the live demo":https://quiz.ably.dev yourself.

h2(#extensions). Extensions and integrations

You saw a very basic architecture enough to build a multiplayer quiz app easily. However, in the real world you may need to add some more components in your system design. 

In terms of the realtime messaging architecture, Ably owns, manages and maintains a powerful distributed systems architecture that can scale flexibly as needed by various clients. The implementation remains the same irrespective of the scale.

In terms of your product specific custom architecture, you may want to add other components such as a database, maybe trigger a cloud function to perform some computation, or even stream messages to a third-party service. Ably provides "easy ways to integrate with external APIs and services":https://ably.com/integrations via WebHooks, Message Queues or Firehose. You just need to set up an end-point on your dashboard, specify the channel names along with a few other details, Ably will automatically publish messages in realtime to these external components.

You can also make use of incoming WebHooks to trigger a message on an Ably channel from an external service. (Think allowing participants to answer your quiz via SMS messages!)

---

We are very excited to see your multiplayer quiz app built with Ably! Tweet your products at us "@ablyrealtime":https://twitter.com/ablyrealtime.

Got questions or concerns? "Talk to us":https://ably.com/contact, we are happy to help.