---
title: HQ style games
section: design-patterns
index: 31
languages:
  - none
---

HQ style apps have suddenly become popular. Here's how you can build your own HQ style applications.

h2(#what). What are HQ style apps?

<TODO>

h2(#how). Implementation based on message volumes <TODO-change-title>

<TODO-Add-two lines description>

<a href="/images/diagrams/dp-hq-style.png" target="_blank">
  <img src="/images/diagrams/dp-hq-style.png" style="width: 100%" alt="HQ style apps design pattern using Ably">
</a>

h3(#lowvolumes). For regular volumes

The implementation details are essentially captured in the figure above. It is explained below:

* People join the "clustered" broadcast, presence and publish channel with names such as 
** "cluster­-x-­broadcast"
** "cluster­-x-presence"
** "cluster­-x-publish"
something you can control from your end when a client connects.  

* If the cluster sizes turn out to be slightly larger or slightly smaller that's not really an issue, so long as you loosely keep the clusters at the target size.

* Everyone will have presence permissions on the presence channel, but not subscribe permission.  This means you have the ability to query the presence on a channel, or subscribe to presence events from your servers, but everyone else won't be able to inspect / subscribe to this channel. This avoids another classic n­-squared problem i.e. 10k people entering and subscribing to 10k ‘presence-enter’ events would result in 100m messages.  However, 10k people entering, generating 10k presence events only for your servers results in just 20k messages. 

h3(#highvolumes). For high volumes

* You can subscribe to this data via the Reactor. 

* All the people subscribe to the broadcast channels, but they only have subscribe permission, no publish permission.  Any data to be sent to all the users from your servers will be done on this channel. 

* Everyone has publish rights to the publish channel, but no subscribe rights.  This publish channel can be set up to use the Reactor so you get a buffer / shock absorber to cope with a high volume of incoming messages. 

h2(#order). Latencies are sorted but what about the order of messages?

* Ably offers message ordering and reliability guarantees to process messages using a Message Queue

* Every event from a user, such as entering, publishing a chat message, playing the game in some way, does not necessarily result in a message to all.  You would in your server perform aggregation, filtering, and rate limiting.

* This ensures that your server has full control over data rate (for instance <5hz) as well as volume of messages and you can elect to filter as you see fit.

h2(#pros). Pros

* You have a reliable way to consume data from clients with a shock absorber (the queue), as well as being able to simplify how you process data using workers. 

* You can ensure you have a constant amount of data published and received regardless of cluster size or activity. Clients won't become "overloaded" with too much data, potentially that you don't have control over.

h2(#cons). Cons