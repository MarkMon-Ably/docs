---
title: Reactor Queues
section: general
index: 23
---

Message queues provide a reliable, straightforward mechanism for customers to process, store, augment or reroute realtime data efficiently and asynchronously by server workers. Message queues are offered as part of our "Ably Reactor service":https://www.ably.io/reactor, a service available to all customers of the Ably platform.

Find out why we believe our message queue service solves many of the challenges associated with consuming pub/sub data server-side in our article: "Message queues — the right way to process and work with realtime data on your servers":https://blog.ably.io/message-queues-the-right-way-to-process-and-work-with-realtime-data-on-your-servers-2d15985301f8.

Using configurable rules, you can ensure that your messages, presence and channel lifecycle events are enqueued on an Ably message queue. Unlike our "channels":/realtime/channels-messages#channels which follow a "pub/sub pattern":https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern where each message is delivered to any number of subscribers, our "message queues":https://en.wikipedia.org/wiki/Message_queue operate on the basis that each messages is delivered to only one subscriber. Consuming from Ably queues is done using the popular "AMQP":https://www.amqp.org/ or "STOMP":https://stomp.github.io/ protocols.

Queues are commonly used by one or more server workers to process realtime data published by Ably asynchronously, each message being consumed by only one of the workers. For example, using workers consuming from a queue, you could persist each message of a live chat to your own database, start publishing updates once a channel becomes active, or trigger an event if a device has submitted a location that indicates that it has reached its destination. Our queues allow 'at-least-once' delivery semantics, where a message is removed from the queue permanently only once a consumer has acknowledged that it has processed it.

h2. Payload types

Ably currently supports three types of queue message that can be delivered to queues:

* **Messages** - messages are enqueued as soon as they are published on a channel
* **Presence events** - when clients enter, update their data, or leave channels, the presence event is enqueued
* **Channel lifecycle events** - when a channel is created (following the first client attaching to this channel) or discarded (when there are no more clients attached to the channel), the lifecycle event is enqueued

h2. Scale and High Availability

Ably's Message Queue service is offered in two flavours, multi-tenanted and dedicated.

Our multi-tenanted queue service is provided free as part of the core platform to all customers, and is configured as a high availability service (your data is stored in at least two datacenters). Our multi-tenanted queue service is designed for low to medium volumes of messages and has a guideline limit of no more than 100 messages per second per account.

For customers with more demanding requirements (up to millions of messages per second), Ably provides dedicated queue clusters as part of our "Enterprise offering":https://www.ably.io/pricing/enterprise. "Get in touch":https://www.ably.io/contact if you would like to discuss our dedicated queue service.

Alternatively, for Enterprise customers, we also offer our "Ably Reactor Firehose":/general/firehose, where instead of consuming data from our queues, we will stream your realtime data directly into a third party streaming or queueing service.

h2. Getting started with queues

We have written "a simple end-to-end realtime publisher and message queue consumer demo":https://github.com/ably/queue-demo. As message queueing is currently in private beta, please "get in touch with us":https://www.ably.io/contact if you would like queues to be enabled on your account.

Reactor Message Queues are planned for general availability in Q4 2016.
