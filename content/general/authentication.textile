---
title: Authentication
section: general
index: 10
jump_to:
  Help with:
    - Overview#title
    - Getting started
    - Selecting auth#selecting-auth
    - Basic authentication
    - Token authentication
    - Token request spec#token-request-spec
---

Both the REST API and the Realtime API use common authentication mechanisms.

Each is based on having a series of API keys set up for each application. Each key is "configured via the dashboard":https://support.ably.io/support/solutions/articles/3000030502-setting-up-and-managing-api-keys and exposed as a single string such as @{{API_KEY}}@ which contains information that identifies the key as well as containing the "secret" key value.

If you are using an Ably client library then the key can be considered to be an opaque string supplied when the library is instanced. If you are using the "Ably REST API endpoint":/rest-api/ directly, then the API key string can be used in the "basic authorization header":/rest-api/#basic-authentication

A key is associated with a set of capabilities - i.e. an explicit indication of which operations (such as publish, subscribe or presence) are allowable using that key. Additionally, the capabilities can be restricted to a set of a resources (which is either a channel namespace or a specific channel). View "all supported capabilities":#capabilities.

h2(#getting-started). Getting started

The simplest method for authentication with Ably is to use an API key string when instancing the client library. This method is simple and authenticates with Ably using basic authentication. However, this method suffers from a number of problems that might make it unsuitable for certain use cases:

* the secret is passed directly by the client to Ably, so it is not permitted for connections that are not over TLS (HTTPS or non-encrypted realtime connections) to prevent the key secret being intercepted
* the secret may be required to be embedded in a script on a public site
* all of the configured capabilities of the key are implicitly possible in any request, and clients that legitimately obtain this key may then abuse the rights for that key
* clients are permitted to use any @client ID@ in all operations with Ably. As such, a @client ID@ in messages and presence cannot be trusted as any client using Basic Authentication can masquerade with any @client ID@

These issues are addressed with the "token-based authentication method":#token-authentication. Tokens are authentication credentials that only have a short lifetime, and therefore they may more readily be distributed to clients where there is a risk of compromise. Tokens may also be issued with a particular scope - such as a limited set of access rights, or being limited to use by a specific @client ID@ - and therefore token-based authentication provides the flexibility to implement access control policies in the application. Tokens may be obtained using the "client library authentication API":/rest/authentication or directly via the Ably "REST API tokenRequest endpoint":/rest-api/#requestToken.

h2(#selecting-auth). Selecting an authentication mechanism

The following guidance aims to help you choose which system to use in any given situation. When deciding, it is recommended to bear in mind the "principle of least privilege":http://en.wikipedia.org/wiki/Principle_of_least_privilege: a client should ideally only possess the credentials and rights that it needs to accomplish what it wants; this way, if the credentials are compromised, the rights that can be abused by an attacker are minimised.

Basic authentication is appropriate where:

* the script, program or system holding the key is not exposed; for example, typically on one of your own servers. A key should not be embedded in a script in a public-facing web page
* a secure, unmediated connection exists between the client and the Ably service. Keys should only really be sent over a TLS conection (that's either an HTTPS connection, or an encrypted realtime connection). A key should not be used over a proxied connection unless the proxy is trusted
* access needs to be granted selectively to groups of clients to specific channels or channel namespaces, but only a small number of such access control groups need to be established
* clients are trusted to assume any @clientID@ in the operations they are permitted to perform

Token authentication is appropriate when:

* there is a risk of exposure of the client's credentials, either directly or over an insecure, or insecurely proxied, connection
* a client is only intended to have use of the service for a limited period of time
* a client needs to have the ability to identify itself (authenticate its specific identity), but cannot be trusted sufficiently not to masquerade as a different client identity
* fine-grained access needs to be given on a per-client basis to specific channels and/or capabilities
* there may be a requirement to be able to revoke the rights of a client individually

Note that many applications will most naturally use a mixed strategy: one or more application servers will use basic authentication to access the service, and to issue tokens, but browser or device clients will use individually-issued tokens.

h3(#basic-authentication). Basic Authentication explained

Basic authentication is the default authentication scheme when a client library is instanced with an API key.  It as simple as:

bc[javascript](code-editor:authentication/basic-auth). var ably = new Ably.Realtime({ key: '{{API_KEY}}' });

h4. Process used by client libraries connecting with basic auth:

<a href="/images/diagrams/basic-auth-process.png" target="_blank">
  <img src="/images/diagrams/basic-auth-process.png" style="width: 100%" alt="Basic authentication process diagram">
</a>

h3(#token-authentication). Token Authentication explained

Token authentication is the default authentication scheme when a client library is instances with any of the following options:

* a @token@ or @tokenDetails@ is provided;
* an @authUrl@ or @authCallback@ is provided that returns a token or token request;
* a @clientId@ is provided;
* @useTokenAuth@ is true

Token authentication is typically done in one of two ways:

h4. Signed token request is created by your servers and passed to clients

Using our client libraries, a signed token request is generated and handed to client libraries that will in turn authenticate with Ably. This is the recommended approach for authentication for our customers as: a signed token request can be generated securely by your servers without communicating with Ably; your secret API key is never shared with Ably or your clients; signed token requests cannot be tampered with, must be used soon after creation and can only be used once. This process is described simply in the following diagram:

<a href="/images/diagrams/signed-token-request-auth-process.png" target="_blank">
  <img src="/images/diagrams/signed-token-request-auth-process.png" style="width: 100%" alt="Signed token request auth process diagram">
</a>

An example of creating a token request can be seen below:

bc[javascript](code-editor:authentication/create-token-request). var ably = new Ably.Rest({ key: '{{API_KEY}}' });
ably.createTokenRequest({ clientId: 'client@example.com' }, null, function(err, tokenRequest) {
  /* tokenRequest => {
       "capability": "{\"*\":[\"*\"]}",
       "clientId": "client@example.com",
       "keyName": "{{API_KEY_NAME}}",
       "nonce": "5576521221082658",
       "timestamp": {{MS_SINCE_EPOCH}},
       "mac": "GZRgXssZDCegRV....EXAMPLE"
     } */
});

h4. Token is issued by your servers and passed to clients

Using our client libraries, a token is requested from Ably on your servers and then handed to client libraries that will in turn authenticate with Ably. This is an alternative approach for authentication that allows you to issue tokens as opposed to signed token requests from your servers thus saving one round trip request for clients as they do not need to request a token. This process is described simply in the following diagram:

<a href="/images/diagrams/token-auth-process.png" target="_blank">
  <img src="/images/diagrams/token-auth-process.png" style="width: 100%" alt="Token auth process diagram">
</a>

An example of issuing a token can be seen below:

bc[javascript](code-editor:authentication/request-token). var ably = new Ably.Rest({ key: '{{API_KEY}}' });
ably.requestToken({ clientId: 'client@example.com' }, function(err, token) {
  /* token => {
       "token": "xVLyHw.Dtxd9tuz....EXAMPLE",
       "capability": "{\"*\":[\"*\"]}"
       "clientId": "client@example.com",
       "expires": 1449745287315,
       "keyName": "{{API_KEY_NAME}}",
       "issued": 1449741687315,
     } */
});

h2(#token-request-spec). Token request spec

The "Ably REST and Realtime client libraries":https://www.ably.io/download/ aim to make things as simple as possible so it is not necessary to understand all of the details of token requests to interact with the service and issue tokens for clients. If you wish to issue tokens or token requests, we recommend you read the "client library authentication documentation":/rest/authentication.

However, if you are using the "REST token endpoint directly":/rest-api/#requesttoken, or if you are creating token requests without the use of our client libraries, then the following specification will give you an in-depth understanding of how token requests work.

h3. API key format

API keys are issued and managed from "within your account dashboard":https://support.ably.io/support/solutions/articles/3000030502-setting-up-and-managing-api-keys. The API key string available in your dashboard is structured as a triple @<app id>:<key id>:<key value>@, where:

- app id := (public) identifier for the application
- key id := (public) identifier for the key in question: this uniquely identifies the key and is a system-assigned, URL-safe, identifier
- key value := (private) key "secret" string, system-generated, uniquely associated with this key

h3. Token request format

A token request is made against the "@requestToken@":/rest-api#requesttoken endpoint, with a JSON token request in the request body. The token request comprises:

* the @keyName@ comprising of the app id and key id such as @{{API_KEY_NAME}}@
* a capability (i.e. a set of channel names/namespaces and, for each, a set of "operations":#capabilities) which should be a subset of the set of capability associated with the key specified in key id
* optionally, a @clientId@ thus identifying clients using this token and preventing them from identifying themselves with any other @clientId@
* optionally, an expiry time or TTL, will default to 1 hour if not specified
* a timestamp to ensure token request is still valid
* a unique nonce string, randomly-generated by the client, to ensure the token request cannot be reused

A signed token request also contains:

* a signature, generated as an HMAC of each of the above components, using the key secret value.

Signed token requests can be used to request a token from Ably without an authenticated connection. The signature generated with the key secret confirms the authenticity of the token and can thus be "trusted" by Ably. As signed token requests can be issued without a request to Ably, a server with a valid API key can issue token requests directly to clients, and clients can in turn generate a token by sending the token request to Ably.

The receiving Ably server verifies the signature if present, the timestamp (which must be within 2 minutes of the current time), verifies that the nonce/timestamp combination has not been used previously, verifies that the requested validity period is permitted, and verifies that the requested capabilities are permitted for that token based on the key capabilities.

The server may choose to subset the capabilities based on the capabilities of the key.

The server replies with an access token, which is essentially a signed version of the resolved set of capabilities, plus other metadata associated with the token (such as expiry time).

This access token can then be used for subsequent REST requests or Realtime connections. If a @clientId@ was included in the request, then the token is associated with that @clientId@, and may be used to identify that client in operations that require identification (e.g. joining a channel that requires identification, or publishing a message with a verified @clientId@).

h3. Parameter canonicalisation

The parameters of the token request are normalised/canonicalised as follows:

- @keyName@ := no action required
- @ttl@ := the decimal integer representation, without leading zeros, of the requested life of the token in seconds, if none is specified a default of 1 hour is used
- @capability@ := this is a canonicalised representation of the resource paths and associated operations in the capability. It is the JSON stringified value of an object of the form:
<pre class="code-editor" lang="json"><code class="code-editor">{
  resource1: [operation1a, operation1b, operation1c, ...],
  resource2: [operation2a, operation2b, operation2c, ...].
  ...
}</code></pre>
with the following constraints:
<notextile>
<ul>
<li>all whitespace is removed;</li>
<li>resources are listed in forward lexicographic order</li>
<li>operations are listed in forward lexicographic order</li>
<li>there is no trailing comma on any list of array or object elements</li>
<li>all strings are quoted and escaped as per the JSON standard.</li>
<li>the wildcard @*@ can be used for resource or operation fields</li>
</ul>
</notextile>
- @clientId@ := the canonical form is the unquoted and unescaped string. In the case that no clientId is included in the request, the empty string is used.
- @timestamp@ := the decimal integer representation, without leading zeros, of the time of the of the request in seconds since the epoch.
- @nonce@ := an unquoted, unescaped random string of at least 16 characters.

h3(#capabilities). Capability operations

The following capability operations are available for API keys and issued tokens.

- subscribe := can subscribe to messages and presence state change messages on channels
- publish := can publish messages to channels
- presence := can register presence on a channel
- history := can retrieve message and presence state history on channels
- stats := can retrieve current and historical usage statistics for an app

h3. HMAC calculation

First the canonicalised request text, constructed as follows:

* start with the empty string
* for each of the following fields in order: key id, ttl, capabilities, clientId, timestamp, nonce, even when empty
** append the canonicalised string value for that field
** append a newline (0xa) character.
Note that a newline character is added for each field, including any empty client id string, and the last (nonce) field.

The resulting string must then the UTF8-encoded and then HMAC value is computed with "hmac-sha-256":http://tools.ietf.org/html/rfc4868 using the key secret value.

The HMAC value is then "base-64 encoded":https://tools.ietf.org/html/rfc4648.

h3. Request body format

In the case of a signed token request, the request body is the JSON stringified representation of the object with the form:

bc[json]. {
  keyName: "<app id>:<key id>",
  ttl: <expiry in milliseconds>,
  capability: "<capability string>",
  clientId: "<client id optional>",
  timestamp: <timestamp as ms since epoch>,
  nonce: "<random unique nonce>",
  mac: "<base 64-encoded HMAC value>"
}

An unsigned token request is identical except that the mac property is omitted. Note that "Basic authentication":#basic-authentication must be used in order to request a token with an unsigned request.

h3. Response body format

If successful, the authorisation request returns the JSON stringified representation of an object containing the token:

bc[json]. {
  token: "<token value>",
  issued: <timestamp as ms since epoch>,
  expires: <timestamp as ms since epoch>,
  capability: "<canonical capability text>",
  clientId: "<client id optional>"
}

h3. Example token requests

h4. Unsigned token request example

bc[sh]. curl -X POST "https://rest.ably.io/keys/{{API_KEY_NAME}}/requestToken" \
 --user "{{API_KEY}}" \
 --header "Content-Type: application/json" \
 --data '{
   "keyName": "{{API_KEY_NAME}}",
   "ttl": "3600000",
   "capability":
     "{\"private\":[\"subscribe\",\"publish\",\"presence\"],\"*\":[\"subscribe\"]}",
   "clientId": "unique_identifier",
   "timestamp": {{MS_SINCE_EPOCH}},
   "nonce": "95e543b88299f6bae83df9b12fbd1ecd"
}'

Responds with JSON token:

bc[json]. {
  "token": "{{APP_ID}}.HHZNjgqmC-ACW....truncated",
  "keyName": "{{API_KEY_NAME}}",
  "issued": 1449745478956,
  "expires": 1449749078956,
  "capability":
    "{\"*\":[\"subscribe\"],\"private\":[\"presence\",\"publish\",\"subscribe\"]}",
  "clientId": "unique_identifier"
}

h4. Signed token request example

bc[sh]. curl -X POST "https://rest.ably.io/keys/{{API_KEY_NAME}}/requestToken" \
 -H "Content-Type: application/json" \
 --data '{{SIGNED_TOKEN_REQUEST_EXAMPLE}}'

Responds with JSON token:

bc[json]. {
  "token": "{{APP_ID}}.DTSukCRj1lis1sJltr...rhLRBcZgmXLf1FP8wKGrPYkkIs",
  "keyName": "{{API_KEY_NAME}}",
  "issued": 1449745797497,
  "expires": 1449749397497,
  "capability": "{\"*\":[\"*\"]}"
}
