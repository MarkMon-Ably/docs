---
title: Asset Tracking SDK
section: asset-tracking
index: 0
meta_description: "Ably Asset Tracking SDKs provide an easy way to track multiple assets with realtime location updates powered by the Ably realtime network and Mapbox Navigation SDK with location enhancement."
meta_keywords: "Ably, Asset Tracking SDK, Mapbox, Mapbox Navigation SDK, Ably realtime"
languages:
  - javascript
  - android
  - objc
  - java
  - swift
jump_to:
  Help with:
    - Initializing the SDK#initializing-sdk
    - Supported platforms#supported-platforms
    - Requirements#requirements
    - Installing the SDK#installing-sdk
    - Quickstart#quickstart
---

The Ably Asset Tracking SDKs provide an easy way to track multiple assets with realtime location updates powered by the Ably realtime network and Mapbox Navigation SDK with location enhancement.

The asset tracking solution provides two SDKs for each platform:

* Publisher SDK - for embedding in apps running on the courier's device.
* Subscriber SDK - for embedding in apps running on the customer's observing device.

As Ably is used as the underlying transport, you have direct access to your data and can use Ably integrations for a wide range of applications, in addition to direct realtime subscriptions. Examples include: 

* Passing data to a third-party service.
* Persistence of data to a database for later retrieval.

Key participants:

- asset := item that the customer wants to track such as driver, vehicle, container, and so on.
- asset driver := person driving the asset physically or entity controlling the asset programatically.
- customer := entity that uses Asset Tracking SDKs to build their product to solve the asset tracking problem for their users.
- end user := person that uses the product built by the customer and uses the asset tracking capabilities.

The Asset Tracking SDK allows for various battery optimization and update rate change scenarios, for example: 

* Updates should be sent to user more often when driver is closer to destination.
* Updates don't need to happen as often when user is not looking at the location of the asset, for example, the user is not checking the app for driver’s location.
* When the driver’s battery is running low, location updates can happen with lower frequency.
* Still location information should be sampled and later sent to external storage at a frequency set by configuration.
* Customer wants to control how often the location information should be sampled
* Customer wants to control max and min rate of updates (with max being the one with full battery and when driver is close to destination, and min being when user is not checking the location)
* Customer wants to control what battery level is considered low (so that frequency of updates is lowered)
* Customer wants to control what is “close to destination“ to increase the frequency of updates accordingly 

Each asset being tracked must have a @trackableId@, this should be globally unique within an Ably asset tracking account.

h2(#initializing-sdk). Initializing the SDK

During initialization the SDK accepts:

Required:

- connection :=  Ably connection information. API keys, any other configuration parameters as needed. 
- map := Mapbox configuration, such as API keys, any other configuration parameters as needed. 
- resolutionPolicy := sets the policy factory to be used to define the target resolution for publishers created from this builder.

Optional:

- locationSource := OPTIONAL Sets the location source to be used instead of the GPS. The location source will be providing location updates for the Publisher. 
- log := logging configuration.
- debug := debug configuration.
- profile := set the means of transport being used for the initial state of publishers created from this builder. If not set then the default value is @RoutingProfile.DRIVING@.
- locationHistory := the shared flow emitting trip location history when it becomes available.
- locationUpdatedListener := local handler for location updates.
- context := Android context (on Android only).

The following example demonstrates this:

```[android] 
fun startPublisher(
        defaultResolution: Resolution = DEFAULT_RESOLUTION,
        locationSource: LocationSource? = null
    ) {
        publisher = Publisher.publishers()
            .connection(ConnectionConfiguration(ABLY_API_KEY, CLIENT_ID))
            .map(MapConfiguration(MAPBOX_ACCESS_TOKEN))
            .locationSource(locationSource)
            .resolutionPolicy(DefaultResolutionPolicyFactory(defaultResolution, this))
            .androidContext(this)
            .profile(RoutingProfile.DRIVING)
            .start().apply {
                locationHistory
                    .onEach { uploadLocationHistoryData(it) }
                    .launchIn(scope)
            }
    }
```

h2(#resolution-policy). Resolution policy

Resolution - Governs how often to sample locations, at what level of positional accuracy, and how often to send them to subscribers.
ResolutionPolicy - Defines the strategy by which the various ResolutionRequests and preferences are translated by Publisher instances into a target Resolution.

Resolution Policy relates to the frequency of positional updates, based on:

* Battery
* Distance to target (proximity)
* Availability of subscribers

Resolution Policy is passed to the SDK when an asset is added and contains the following: 

- Accuracy := presents a unified representation of location accuracy (Apple) and quality priority (Android). Analogous to Android's "@LocationRequest.priority@":https://developers.google.com/android/reference/com/google/android/gms/location/LocationRequest#setPriority(int) this captures the requirement for positional accuracy, which is related to cost, and determines the sensors used to obtain the location. The accuracy of a geographical coordinate.
- desiredInterval := desired time between updates, in milliseconds. Lowering this value increases the temporal resolution. Location updates whose timestamp differs from the last captured update timestamp by less that this value are to be filtered out. Used to govern the frequency of updates requested from the underlying location provider, as well as the frequency of messages broadcast to subscribers.
- minimumDisplacement := minimum positional granularity required, in metres. Lowering this value increases the spatial resolution. Location updates whose position differs from the last known position by a distance smaller than this value are to be filtered out. Used to configure the underlying location provider, as well as to filter the broadcast of updates to subscribers.
- DefaultProximity := this is a distance to destination at which resolution of updates is increased to improve user experience.
- batteryLevelThreshold := this is a level of battery on the device that runs Publishing SDK that is considered low. When the battery level falls below this, the resolution of updates is reduced. Default value: 10%. In the range 0.0f (no battery) to 100.0f (full battery).
- lowBatteryMultiplier := the multipler to be applied to the interval when the battery level is below batteryLevelThreshold.

Example code:

```[android]
private fun addTrackableToThePublisher(trackableId: String) {
        publisherService?.publisher?.apply {
            scope.launch {
                try {
                    track(
                        Trackable(
                            trackableId,
                            constraints = DefaultResolutionConstraints(
                                DefaultResolutionSet(
                                    Resolution(
                                        Accuracy.BALANCED,
                                        desiredInterval = 1000L,
                                        minimumDisplacement = 1.0
                                    )
                                ),
                                DefaultProximity(spatial = 1.0),
                                batteryLevelThreshold = 10.0f,
                                lowBatteryMultiplier = 2.0f
                            )
                        )
                    )
                    startActivity(
                        Intent(this@AddTrackableActivity, TrackableDetailsActivity::class.java).apply {
                            putExtra(TRACKABLE_ID_EXTRA, trackableId)
                        }
                    )
                    finish()
                } catch (exception: Exception) {
                    showToast("Error when adding the trackable")
                    hideLoading()
                }
            }
        }
    }
```

Generally these parameters are applied in the following way:

* Frequency of positional updates should be lower when no Asset Tracking SDK is subscribed to updates.
* Frequency of positional updates should be lower when device is low on battery.
* Frequency of positional updates should typically increase when close to destination, and can be lower when far away from destination.

The publisher obtains location updates from the local platform, and publishes those to the Track, based on a current targetResolution. The targetResolution governs the accuracy of location updates (for example by determining the sensors used) and the frequency of location updates being published. The publisher specifies the targetResolution; it can be specified on construction of the Track, and can vary it during the active lifetime of a Track.

The aim in most practical situations is for targetResolution to vary dynamically based on circumstances; this might be based on parameters known by the publisher (such as proximity to destination, or the current power state of the device) but may also be based on the existence, or preferences, of the subscribers to the track. 

The tracking SDKs therefore incorporate the following additional concepts:

Subscriber requestedResolution: this captures the preference of a subscriber for update resolution. A subscriber’s preference might be a consequence of the subscriber simply existing, but might also depend on the subscriber’s circumstances (eg the zoom level of the map that the subscriber is using the display updates).

If the resolution policy specifies when you're below 25% charge then the target energy per delivery goes down by 50%, that is sending updates 50% as often, and only switching to high resolution location when at half the distance to the destination. For example, if by default you send high resolution when 5 minutes away, whereas you change that to 2.5 minutes away due to the low battery level.


h2(#supported-platforms). Supported platforms

There are two Asset Tracking SDKs, one for publishing and one for subscribing. The following platforms are supported:

* Android (Java and Kotlin)
* iOS (Objective-C and Swift)
* Web (JavaScript)


h2(#requirements). Requirements

For Android - Android Studio

You need to have the following API keys:

* @ABLY_API_KEY@ - Your Ably API key
* @MAPBOX_DOWNLOADS_TOKEN@ -
* @MAPBOX_ACCESS_TOKEN@ - 
* @GOOGLE_MAPS_API_KEY@ - 

h2(#installing-sdk). Installing the SDK

Instructions for iOS
Instructions for Android
Instructions for JavaScript


h2(#example-apps). Running the example apps

To run the example apps follow the following steps:

Android

1. Install Android Studio, if not already available.
2. Make sure Android SDK build tools are installed. You'll need to accept licenses.

<a href="/images/screenshots/asset-tracking/android/sdk-build-tools.png" target="_blank">
  <img src="/images/screenshots/asset-tracking/android/sdk-build-tools.png" style="width: 100%" alt="Select app to run and target">
</a>


3. Clone Ably Asset Tracking SDK Android "GitHub repo":https://github.com/ably/ably-asset-tracking-android.
4. Open the cloned directory into Android Studio.
5. From the drop down menu in Android Studio, select the app to run: @publishing-example-app@ and a device to run it on, then click Run.

<a href="/images/screenshots/asset-tracking/android/select-app.png" target="_blank">
  <img src="/images/screenshots/asset-tracking/android/select-app.png" style="width: 100%" alt="Select app to run and target">
</a>

6. App builds and runs and the emulator is displayed. It takes a while to boot up.

7. In the emulator, use the Extended Tools to create a route.
8. Start the route.
9. In the publishing app click '+' to add a trackable.
10. Enter a tracking ID and click Add

<a href="/images/screenshots/asset-tracking/android/publishing-app.png" target="_blank">
  <img src="/images/screenshots/asset-tracking/android/publishing-app.png" style="width: 100%" alt="Select app to run and target">
</a>


11. Run the subscribing app on an additional device. 
12. Enter the tracking ID.
13. The asset will be displayed on the map.

h2(#quick-start). Quickstart

TBD


h2(#main-tasks). Main tasks

- Main classes and methods
- Start/stop tracking
- SDK should allow user to start tracking an asset and accept tracking UID, destination destination address (optional), and additional JSON metadata

```[javascript]
function hello () {
  console.log('hello')
}

hello()
```