---
title: Asset Tracking
section: asset-tracking
index: 0
meta_description: "The Ably asset tracking solution provides a way to track multiple assets in realtime."
meta_keywords: "Ably, Asset Tracking SDK, Mapbox, Mapbox Navigation SDK, Mapbox location enhancement, Ably realtime"
languages:
  - javascript
  - android
  - objc
  - java
  - swift
jump_to:
  Help with:
    - Supported platforms#supported-platforms
    - Key participants#key-participants
    - Resolution policy#resolution-policy
    - Prerequisites#prerequisites
    - Installing the SDK#installing-sdk
    - Initializing the SDK#initializing-sdk
    - See also#see-also
---

The Ably asset tracking solution provides a way to track multiple assets in realtime. An asset is any object that moves geographically, and whose position needs to be monitored. The asset tracking solution is powered by the Ably realtime network, the Ably Asset Tracking SDKs, and the Mapbox Navigation SDK with location enhancement.

The Ably asset tracking solution provides two SDKs:

* Publisher SDK - for embedding in apps on the asset to be tracked.
* Subscriber SDK - for embedding in apps that want to observe the asset being tracked.

As Ably is used as the underlying transport, you have direct access to your data and can use Ably integrations for a wide range of applications, in addition to direct realtime subscriptions. Examples include: 

* Passing data to a third-party service.
* Persistence of data to a database for later retrieval.

As the asset being tracked moves, it publishes its position through the app to an Ably channel. Any subscribers to the channel can then receive positional information, which can be dislpayed on a detailed map.

The following diagram provides an overview of an asset tracking use case:

<a href="/images/screenshots/asset-tracking/overview.png" target="_blank">
  <img src="/images/screenshots/asset-tracking/overview.png" style="width: 100%" alt="Overview">
</a>

In an asset tracking the key participants are:

- asset := item that the customer wants to track such as driver, vehicle, container, and so on. This also known as a trackable.
- asset driver := person driving the asset physically, or entity controlling the asset programatically.
- customer := entity that uses Asset Tracking SDKs to build their product to solve the asset tracking problem for their users.
- end user := person that uses the product built by the customer and uses the asset tracking capabilities.

Each asset being tracked must have a @trackableId@, this should be globally unique within an Ably asset tracking account.

The Asset Tracking SDK allows for various battery optimization and update rate change scenarios, for example: 

* Updates should be sent to user more often when driver is closer to destination.
* Updates don't need to happen as often when user is not looking at the location of the asset, for example, the user is not checking the app for driver's location.
* When the driver's battery is running low, location updates can happen with lower frequency.
* Still location information should be sampled and later sent to external storage at a frequency set by configuration.
* Customer wants to control how often the location information should be sampled.
* Customer wants to control maximum and minimum rate of updates, with maximum being the one with full battery and when driver is close to destination, and minimum being when user is not checking the location.
* Customer wants to control what battery level is considered low, so that frequency of updates is lowered.
* Customer wants to control what is "close to destination" to increase the frequency of updates accordingly. 

h2(#supported-platforms). Supported platforms

There are two Asset Tracking SDKs, one for publishing and one for subscribing. The following platforms are supported:

* Android (Java and Kotlin) - publisher and subscriber SDK
* iOS (Objective-C and Swift) - publisher and subscriber SDK
* Web (JavaScript) - subscriber SDK

h2(#battery-optimization). Battery optimization scenarios

One of the biggest challenges in asset tracking is combining high resolution (both temporal and spatial) of updates with low battery consumption on the asset tracking device. For example, in a delivery tracking use case you may want your users to have a smooth and realtime visualization of where their delivery is on the map, but at the same time sending realtime locations from the driver's device all the time will rapidly drain its battery.

There are two key factors that impact asset tracking device battery usage:

1. GPS sensor - obtaining location of the asset
2. Networking - sending location updates over network

It is hard to reduce the battery consumption of the GPS sensor in some situations, such as when the device is being used for navigation at the same time as tracking an asset. However, it is possible to adjust the networking aspect of resolution.

The following scenarios are examples of how update resolution can be changed depending on the state of the asset and subscribers:

* Updates can be sent to the subscriber more often when asset is closer to destination.
* Updates don't need to happen as often when the user of the subscribing SDK is not observing the location of the asset, for example, the user of delivery app is not checking the app for the driver's location.
* Different subscribers may have different preferences regarding the resolution of location updates.
* When the driver's battery is running low, location updates can happen with lower frequency.

Using the approaches similar to these, an optimal resolution of updates can be identified, which provides a good user experience when it is needed, such as when the driver is close to the destination, and the user is observing the location of the driver in the app. This approach also reduces battery usage when possible, for example when the driver is far from the destination and the user is not observing location updates.

As different use cases have different requirements for this logic, Ably Asset Tracking SDKs provide a flexible @ResolutionPolicy@ interface, that allows SDK users to provide their own implementation of resolution optimization logic.

Ably Asset Tracking also comes with a @DefaultResolutionPolicy@ implementation provided out of the box, which is suitable for common use cases.

h2(#resolution-policy). Resolution policy

@Resolution@ and @ResolutionPolicy@ are important aspects of the Ably Asset Tracking SDKs: 

- Resolution := governs how often to sample locations, at what level of positional accuracy, and how often to send them to subscribers.
- ResolutionPolicy := defines the strategy by which the various @ResolutionRequests@ and preferences are translated by @Publisher@ instances into a target @Resolution@.

Resolution policy relates to the frequency of positional updates, based on:

* Battery
* Distance to target (proximity)
* Availability of subscribers

h3(#resolution-policy-parameters). Resolution policy parameters

@ResolutionPolicy@ is passed to the SDK when an asset is added and contains the following: 

- @Accuracy@ := presents a unified representation of location accuracy (Apple) and quality priority (Android). Analogous to Android's "@LocationRequest.priority@":https://developers.google.com/android/reference/com/google/android/gms/location/LocationRequest#setPriority(int) this captures the requirement for positional accuracy, which is related to cost, and determines the sensors used to obtain the location. The accuracy of a geographical coordinate.
- @desiredInterval@ := desired time between updates, in milliseconds. Lowering this value increases the temporal resolution. Location updates whose timestamp differs from the last captured update timestamp by less that this value are to be filtered out. Used to govern the frequency of updates requested from the underlying location provider, as well as the frequency of messages broadcast to subscribers.
- @minimumDisplacement@ := minimum positional granularity required, in metres. Lowering this value increases the spatial resolution. Location updates whose position differs from the last known position by a distance smaller than this value are to be filtered out. Used to configure the underlying location provider, as well as to filter the broadcast of updates to subscribers.
- @DefaultProximity@ := this is a distance to destination at which resolution of updates is increased to improve user experience.
- @batteryLevelThreshold@ := this is a level of battery on the device that runs Publishing SDK that is considered low. When the battery level falls below this, the resolution of updates is reduced. Default value: 10%. In the range 0.0f (no battery) to 100.0f (full battery).
- @lowBatteryMultiplier@ := the multipler to be applied to the interval when the battery level is below @batteryLevelThreshold@.

Example code:

```[android]
private fun addTrackableToThePublisher(trackableId: String) {
        publisherService?.publisher?.apply {
            scope.launch {
                try {
                    track(
                        Trackable(
                            trackableId,
                            constraints = DefaultResolutionConstraints(
                                DefaultResolutionSet(
                                    Resolution(
                                        Accuracy.BALANCED,
                                        desiredInterval = 1000L,
                                        minimumDisplacement = 1.0
                                    )
                                ),
                                DefaultProximity(spatial = 1.0),
                                batteryLevelThreshold = 10.0f,
                                lowBatteryMultiplier = 2.0f
                            )
                        )
                    )
                    startActivity(
                        Intent(this@AddTrackableActivity, TrackableDetailsActivity::class.java).apply {
                            putExtra(TRACKABLE_ID_EXTRA, trackableId)
                        }
                    )
                    finish()
                } catch (exception: Exception) {
                    showToast("Error when adding the trackable")
                    hideLoading()
                }
            }
        }
    }
```

h3(#resolution-policy-parameters). How resolution policy parameters are applied

Generally the @ResolutionPolicy@ parameters are applied in the following way:

* Frequency of positional updates should be lower when no Asset Tracking SDK is subscribed to updates.
* Frequency of positional updates should be lower when device is low on battery.
* Frequency of positional updates should typically increase when close to destination, and can be lower when far away from destination.

The publisher obtains location updates from the local platform, and publishes those to the channel, based on a current @targetResolution@. The @targetResolution@ governs the accuracy of location updates (for example by determining the sensors used) and the frequency of location updates being published. The publisher specifies the @targetResolution@; it can be specified on construction of the channel, and can vary it during the active lifetime of a channel.

The aim in most practical situations is for @targetResolution@ to vary dynamically based on circumstances; this might be based on parameters known by the publisher (such as proximity to destination, or the current power state of the device) but may also be based on the existence, or preferences, of the subscribers to the channel. 

The asset tracking SDKs also have @requestedResolution@ - this captures the preference of a subscriber for update resolution. A subscriber's preference might be a consequence of the subscriber simply existing, but might also depend on the subscriber's circumstances, for example, the zoom level of the map that the subscriber is using to display updates.

h3(#default-resolution-policy). Default resolution policy

Each Trackable added to the Publisher has a destination and set of @ResolutionConstraints@. Ably provides a default set of resolution constraints, @DefaultResolutionContraints@.

@DefaultResolutionConstraints@ provides the following set of thresholds:

* Proximity threshold - at what distance to destination is the asset deemed to be "near" it.
* Battery level threshold @batteryLevelThreshold@ - below which battery level is the device deemed to be with "low" battery.

@DefaultResolutionConstraints@ also provides:

* @lowBatteryMultiplier@ - a multiplier that is applied to resolution when the battery is low. This would, in effect, reduce the period of updates.
* @DefaultResolutionSet@ - a set of resolutions to be applied, depending on the state of the device relating to the thresholds.

h2(#prerequisites). Prerequisites

You need to have a suitable developer environment installed, for example:

* Android - "Android Studio":https://developer.android.com/studio
* iOS - "Xcode":https://developer.apple.com/xcode/
* JavaScript - any suitable environment of your choice 

You also need to have suitable credentials for the various SDK components:

* @ABLY_API_KEY@ - Your Ably API key
* @MAPBOX_DOWNLOADS_TOKEN@ - Mapbox credentials
* @MAPBOX_ACCESS_TOKEN@ - Mapbox credentials
* @GOOGLE_MAPS_API_KEY@ - Google Maps credentials

h2(#installing-sdk). Installing the SDK

You can find information on installing the SDKs in the following resources:

* "Instructions for Android":https://github.com/ably/ably-asset-tracking-android
* "Instructions for iOS":https://github.com/ably/ably-asset-tracking-cocoa
* Instructions for JavaScript

h2(#initializing-sdk). Initializing the SDK

This section introduces you to some commonly used parameters. 

During initialization the SDK accepts:

Required:

- connection :=  Ably connection information. API keys, any other configuration parameters as needed. 
- map := Mapbox configuration, such as API keys, any other configuration parameters as needed. 
- resolutionPolicy := sets the policy factory to be used to define the target resolution for publishers created from this builder.

Optional:

- locationSource := sets the location source to be used instead of the GPS. The location source will be providing location updates for the Publisher. 
- log := logging configuration.
- debug := debug configuration.
- profile := set the means of transport being used for the initial state of publishers created from this builder. If not set then the default value is @RoutingProfile.DRIVING@.
- locationHistory := the shared flow emitting trip location history when it becomes available.
- locationUpdatedListener := local handler for location updates.
- context := Android context (on Android only).

The following example demonstrates this:

```[android] 
fun startPublisher(
        defaultResolution: Resolution = DEFAULT_RESOLUTION,
        locationSource: LocationSource? = null
    ) {
        publisher = Publisher.publishers()
            .connection(ConnectionConfiguration(ABLY_API_KEY, CLIENT_ID))
            .map(MapConfiguration(MAPBOX_ACCESS_TOKEN))
            .locationSource(locationSource)
            .resolutionPolicy(DefaultResolutionPolicyFactory(defaultResolution, this))
            .androidContext(this)
            .profile(RoutingProfile.DRIVING)
            .start().apply {
                locationHistory
                    .onEach { uploadLocationHistoryData(it) }
                    .launchIn(scope)
            }
    }
```

h2(#main-tasks). Main tasks

- Main classes and methods
- Start/stop tracking
