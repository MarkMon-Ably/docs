---
title: Using the example apps
section: asset-tracking
index: 10
meta_description: "Ably Asset Tracking SDKs provide an easy way to track multiple assets with realtime location updates powered by the Ably realtime network and Mapbox Navigation SDK with location enhancement."
meta_keywords: "Ably, Asset Tracking SDK, Mapbox, Mapbox Navigation SDK, Ably realtime, map matching, location tracking, Publishing SDK, Subscribing SDK"
languages:
  - android
  - swift
  - javascript
jump_to:
  Help with:
    - Using the example apps (Android)#android
    - Using the example apps (JavaScript)#javascript
    - See also#see-also
---

Asset Tracking SDK repositories provide example apps for subscribing and publishing. You can test out the sample apps using the emulator provided with the developer tools for your platform.

h2(#android). Using the example apps - Android

The following procedure uses Android Studio by way of example, you can also use other tools such as Gradle.

1. Download and install "Android Studio":https://developer.android.com/studio, if not already available on your development system.
2. Make sure Android SDK build tools are installed. You'll need to accept the licenses.

<a href="/images/screenshots/asset-tracking/android/sdk-build-tools.png" target="_blank">
  <img src="/images/screenshots/asset-tracking/android/sdk-build-tools.png" style="width: 100%" alt="Installed SDK build tools">
</a>

3. Clone the Ably Asset Tracking SDK Android "GitHub repo":https://github.com/ably/ably-asset-tracking-android.
4. Open the cloned directory in Android Studio.
5. From the drop-down menu in Android Studio, select the app to run: @publishing-example-app@ and a device to run it on, then click Run.

<a href="/images/screenshots/asset-tracking/android/select-app.png" target="_blank">
  <img src="/images/screenshots/asset-tracking/android/select-app.png" style="width: 100%" alt="Select the publishing app">
</a>

The app builds and the emulator is displayed. It takes a while to boot up.

6. By default the location source that the app will use for updates is set to phone. Using the Settings button in the app you can also select an Ably channel, or an S3 file as the source. The S3 file is a location history file downloaded from AWS S3 that replays the location data. 

<a href="/images/screenshots/asset-tracking/android/location-source.png" target="_blank">
  <img src="/images/screenshots/asset-tracking/android/location-source.png" style="width: 50%" alt="How to select location source">
</a>

7. Assuming you keep the default option, you can then create a simulated route in the Extended controls. In the emulator, use the Extended controls to create a route. This route is the simulated route that the publisher (asset) will follow.

<a href="/images/screenshots/asset-tracking/android/extended-controls.png" target="_blank">
  <img src="/images/screenshots/asset-tracking/android/extended-controls.png" style="width: 100%" alt="Extended controls">
</a>

8. Start the route.
9. In the publishing app click '+' to add a trackable.
10. Enter a tracking ID and click Add. 
11. Run the subscribing app on an additional device. 
12. Enter the tracking ID.
13. The asset will be displayed on the map.

The following screenshot shows the example apps running:

<a href="/images/screenshots/asset-tracking/android/example-apps-running.png" target="_blank">
  <img src="/images/screenshots/asset-tracking/android/example-apps-running.png" style="width: 100%" alt="Example apps running">
</a>

h2(#javascript). Using the example apps - JavaScript

The JavaScript example app only supports the Subscribing SDK. To use it, you must first run one of the publishing example apps to generate location data.

1. Clone the Ably Asset Tracking SDK JavaScript "GitHub repo":https://github.com/ably/ably-asset-tracking-js.
2. In the root directory of the project, install the SDK dependencies:
  
```[sh]
npm install
```

3. Then, build the SDK:

```[sh]
npm run build
```

4. Change into the @examples/subscribing-example-app@ directory and install the example app's dependencies:
  
```[sh]
npm install
```

5. Create a @.env@ file in the root of the example app and configure it with your Ably API key:

```
ABLY_API_KEY=your-api-key
```

6. Open your browser and visit @http://localhost:5000@:

<a href="/images/screenshots/asset-tracking/javascript/example-app-select-map-provider.png" target="_blank">
  <img src="/images/screenshots/asset-tracking/javascript/example-app-select-map-provider.png" style="width: 100%" alt="Select map provider">
</a>

7. Select your preferred map provider (Google Maps or Mapbox) and enter your provider's API key when prompted.

8. Enter the ID of the asset you want to track:

<a href="/images/screenshots/asset-tracking/javascript/example-app-select-trackable.png" target="_blank">
  <img src="/images/screenshots/asset-tracking/javascript/example-app-select-trackable.png" style="width: 100%" alt="Select trackable ID">
</a>

9. The example app receives updates from the publisher and shows the current location of the asset on the map:

<a href="/images/screenshots/asset-tracking/javascript/example-app-running.png" target="_blank">
  <img src="/images/screenshots/asset-tracking/javascript/example-app-running.png" style="width: 100%" alt="Example app running">
</a>



h2(#see-also). See also

* "Overview":/asset-tracking
* "Using the SDKs":/asset-tracking/using-the-sdks
