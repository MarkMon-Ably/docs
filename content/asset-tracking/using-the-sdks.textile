---
title: Using the SDKs
section: asset-tracking
index: 20
meta_description: "Ably Asset Tracking SDKs provide an easy way to track multiple assets with realtime location updates powered by the Ably realtime network and Mapbox Navigation SDK with location enhancement."
meta_keywords: "Ably, Asset Tracking SDK, Mapbox, Mapbox Navigation SDK, Ably realtime, map matching, location tracking, Publishing SDK, Subscribing SDK"
languages:
  - android
  - swift
  - javascript
jump_to:
  Help with:
    - Supported platforms#supported-platforms
    - SDK Repositories#repositories
    - Prerequisites#prerequisites
    - Installing the SDK#installing-sdk
    - Authentication#authentication
    - Using the Publishing SDK#publishing-sdk
    - Using the Subscribing SDK#subscribing-sdk
    - See also#see-also
---

This topic explains how to get started using the Ably Asset Tracking SDKs.

h2(#supported-platforms). Supported platforms

There are two Asset Tracking SDKs, one for publishing and one for subscribing. The following platforms are supported:

* Android (Java and Kotlin) - publisher and subscriber SDK
* iOS (Objective-C and Swift) - publisher and subscriber SDK
* Web (JavaScript, with first class TypeScript support) - subscriber SDK

h2(#repositories). SDK repositories

The SDKs can be found in the following GitHub repositories:

* "Android":https://github.com/ably/ably-asset-tracking-android
* "iOS":https://github.com/ably/ably-asset-tracking-swift
* "JavaScript":https://github.com/ably/ably-asset-tracking-js

h2(#prerequisites). Prerequisites

You need to have a suitable development environment installed, for example:

* Android - "Android Studio":https://developer.android.com/studio or "Gradle":https://gradle.org/ (requires Android SDK to be installed)
* iOS - "Xcode":https://developer.apple.com/xcode/
* JavaScript - any suitable environment of your choice 

You also need to have suitable credentials for the various SDK components:

* @ABLY_API_KEY@ - Your Ably API key
* @MAPBOX_ACCESS_TOKEN@ - Mapbox public key
* @MAPBOX_DOWNLOADS_TOKEN@ - Mapbox private key

<span lang="android">On Android development systems you can set these values in your @~/.gradle/gradle.properties@ file.</span>

h2(#installing-sdk). Installing the SDK

You can find information on installing the Ably Asset Tracking SDKs in the following resources:

* "Instructions for Android":https://github.com/ably/ably-asset-tracking-android
* "Instructions for iOS":https://github.com/ably/ably-asset-tracking-swift
* "Instructions for JavaScript":https://github.com/ably/ably-asset-tracking-js

h2(#authentication). Authentication

The client requires authentication in order to establish a connection with Ably. There are three methods that can be used:

1. Basic authentication
2. Token authentication
3. JWT authentication

Usually a client will use either token or JWT authentication, as basic authentication would require exposing the API keys on the client.

Examples of establishing a connection using the three methods are given in the following sections. While the examples shown are for either the Publishing or Suscribing SDK, you can use the same approach for both SDKs.

h3(#basic-authentication). Basic Authentication

The following example demonstrates establishing a connection using basic authentication:

```[android]
val publisher = Publisher.publishers() // get the Publisher builder in default state
    .connection(ConnectionConfiguration(Authentication.basic(CLIENT_ID, ABLY_API_KEY)))
```

```[javascript]
const subscriber = new Subscriber({ key: 'ABLY_API_KEY' })
```

This method should not be used on a client however, as it exposes the API key.

You can read more about basic authentication in our "documentation":/core-features/authentication#basic-authentication.

h3(#token-authentication). Token Authentication

The following example demonstrates establishing a connection using token authentication:

```[android]
val publisher = Publisher.publishers() // get the Publisher builder in default state
    .connection(ConnectionConfiguration(Authentication.tokenRequest(CLIENT_ID) { requestParameters ->
        // get TokenRequest from your server
        getTokenRequestFromAuthServer(requestParameters); // customer implements this function
        }))
```

```[javascript]
/* authURL is the endpoint for your authentication server. It returns either
   a `TokenRequest` or a `Token` */
const subscriber = new Subscriber({ 
  authUrl: 'http://my.website/auth',
  clientId: 'CLIENT_ID'
})
```

You can read more about token authentication in our "documentation":/core-features/authentication#token-authentication.

h3(#jwt-authentication). JWT Authentication

The following example demonstrates establishing a connection using JWT authentication:

```[android]
val publisher = Publisher.publishers() // get the Publisher builder in default state
    .connection(ConnectionConfiguration(Authentication.jwt(CLIENT_ID) { tokenParameters ->
        // get JWT from your server
        getJWTFromAuthServer(tokenParameters); // customer implements this function
        }))
```

```[javascript]
// authURL is the endpoint for your authentication server. It returns a JWT
const subscriber = new Subscriber({ 
  authUrl: 'http://my.website/auth',
  clientId: 'CLIENT_ID'
})
```

You can read more about JWT authentication in our "documentation":/core-features/authentication#ably-jwt-process.

blang[android].
  h2(#publishing-sdk). Using the Publishing SDK

  Common operations you need to carry out on the publisher include:

  * Initialize the publisher.
  * Start tracking an asset.
  * Stop tracking an asset.
  * Set the resolution constraints on an asset.

  h3(#publisher-initializing). Initializing the Publisher

  During initialization of the publisher various methods can be called to configure the @Publisher@.

  The required methods are:

  - connection := Called to provide Ably connection information, such as API keys, and any other configuration parameters as needed. 
  - map := Called to provide Mapbox configuration, such as API keys, any other configuration parameters as needed. 
  - resolutionPolicy := Sets the policy factory to be used to define the target resolution for publishers created from this builder.
  - androidContext := Called to provide the Android runtime context (on Android only).

  The optional methods are:

  - profile := Called to set the means of transport being used for the initial state of publishers created from this builder. If not set then the default value is @RoutingProfile.DRIVING@.
  - locationSource := Sets the location source to be used instead of the GPS. The location source provides location updates for the @Publisher@.

  The following code example creates some example "resolution constraints":/asset-tracking#resolution-constraints:

  ```[android] 
  // Prepare Resolution Constraints for an asset that will be used in the Resolution Policy
  val exampleConstraints = DefaultResolutionConstraints(
      DefaultResolutionSet( // this constructor provides one Resolution for all states
          Resolution(
              accuracy = Accuracy.BALANCED,
              desiredInterval = 1000L,
              minimumDisplacement = 1.0
          )
      ),
      proximityThreshold = DefaultProximity(spatial = 1.0),
      batteryLevelThreshold = 10.0f,
      lowBatteryMultiplier = 2.0f
  )
  ```

  The next step is create a default "resolution":/asset-tracking#resolution to be used:

  ```[android]
  // Prepare the default resolution for the Resolution Policy
  val defaultResolution = Resolution(Accuracy.BALANCED, desiredInterval = 1000L, minimumDisplacement = 1.0)
  ```

  Once these are created you can then initialize the publisher with the constraints and default resolution, and start the publisher:

  ```[android]
  // Initialize and Start the Publisher
  val publisher = Publisher.publishers() // get the Publisher builder in default state
      .connection(ConnectionConfiguration(Authentication.basic(CLIENT_ID, ABLY_API_KEY))) // provide Ably configuration with credentials
      .map(MapConfiguration(MAPBOX_ACCESS_TOKEN)) // provide Mapbox configuration with credentials
      .androidContext(this) // provide Android runtime context
      .resolutionPolicy(DefaultResolutionPolicyFactory(defaultResolution, this)) // provide either the default resolution policy factory or your custom implementation
      .profile(RoutingProfile.DRIVING) // provide mode of transportation for better location enhancements
      .start()
  ```

  h3(#publisher-start-tracking). Start tracking

  You can start tracking an asset by calling the @track@ method of the publisher. You need to supply the tracking identifier of the asset to be tracked, and optionally any "resolution constraints":/asset-tracking#resolution-constraints that need to be applied.

  The following code example demonstrates how to start tracking an asset:

  ```[android]
  // Start tracking an asset
  publisher.track(
      Trackable(
          trackingId, // provide a tracking identifier for the asset
          constraints = exampleConstraints // provide a set of Resolution Constraints
      )
  )
  // handle asset tracking started successfully
  ...
  ```

  h3(#publisher-stop-tracking). Stop tracking

  You can stop tracking a trackable (asset) that is registered with the publisher using the @remove@ method, as shown in the following code:

  ```[android]
  publisher.remove(trackable)
  ```

h2(#subscribing-sdk). Using the Subscribing SDK

Common operations you will need to carry out on the subscriber include:

* Initialize the subscriber.
* Listen for location updates sent from from the publisher.
* Listen for asset status updates sent from the publisher.
* Request a different resolution to be sent from the publisher.

h3(#subscriber-initializing-sdk). Initializing the Subscriber

blang[android].
  During initialization of the subscriber various methods can be called to configure the @Subscriber@.

  The required methods are:

  - connection := Called to provide Ably connection information, such as API keys, and any other configuration parameters as needed. 
  - trackingId := Sets the asset to be tracked, using the unique tracking identifier of the asset.

  The optional methods are:

  - resolution := Request a specific resolution of updates to be requested from the remote publisher.

  The following code example demonstrates initializing and starting the subscriber:

blang[javascript].
  Initialize the @Subscriber@ with a "@ClientOptions@":/rest/usage#client-options object. You can also optionally configure event handlers for "location updates":#subscriber-subscribe and "asset state changes":#subscriber-subscribe-asset-state-changes during subscriber initialization.

  The following code example demonstrates initializing and starting the subscriber:

```[android]
// Initialize and Start the Subscriber
val subscriber = Subscriber.subscribers() // Get an AssetSubscriber
    .connection(ConnectionConfiguration(Authentication.basic(CLIENT_ID, ABLY_API_KEY))) // provide Ably configuration with credentials
    .resolution(Resolution(Accuracy.MAXIMUM, desiredInterval = 1000L, minimumDisplacement = 1.0)) // request a specific resolution to be considered by the publisher
    .trackingId(trackingId) // provide the tracking identifier for the asset that needs to be tracked
    .start() // start listening for updates
```

```[javascript]
// Initialize the Subscriber
import { Subscriber, Accuracy } from '@ably/asset-tracking';

const ablyOptions = {
  key: 'ABLY_API_KEY',
  clientId: 'CLIENT_ID',
}

const subscriber = new Subscriber({
  ablyOptions,
  onLocationUpdate,   // optional
  onStatusUpdate,     // optional
})

// Start the subscriber, specifying the tracking identifier of the asset
await subscriber.start(trackingId)
```

h3(#subscriber-subscribe). Subscribe to updates

You can subscribe to updates from the publisher, specifying a function that is called when each update is received. This is shown in the following example:

```[android]
// Listen for location updates
subscriber.locations
    .onEach { } // provide a function to be called when enhanced location updates are received
    .launchIn(scope) // coroutines scope on which the locations are received
```

```[javascript]
// Listen for location updates
subscriber.onLocationUpdate((locationUpdate) => {
  console.log(
    `Location update received. Coordinates: ${locationUpdate.location.geometry.coordinates}`
  )
})
```

<span lang="javascript">Note that you can also configure the update event handler "during subscriber initialization":#subscriber-initializing-sdk.</span>

h3(#subscriber-subscribe-asset-state-changes). Subscribe to asset state changes

You can subscribe to asset state changes from the publisher, specifying a function that is called when each state change is received. This is shown in the following example:

```[android]
// Listen for asset state changes
subscriber.trackableStates
    .onEach { } // provide a function to be called when the asset changes its state
    .launchIn(scope) // coroutines scope on which the statuses are received
```

```[javascript]
// Listen for asset state changes
subscriber.onLocationUpdate((isOnline) => {
  console.log(
    `Status update: Publisher is now ${isOnline ? 'online' : 'offline'}`
  )
})
```

<span lang="javascript">Note that you can also configure the asset state change event handler "during subscriber initialization":#subscriber-initializing-sdk.</span>

h3(#subscriber-subscribe-asset-state-changes). Request a different resolution

blang[android].
  The subscriber can always request a different resolution preference by calling the @resolutionPreference@ method, passing in the required @Resolution@. This is shown in the following example:

blang[javascript].
  The subscriber can request a different resolution by calling the @sendChangeRequest@ method, passing in the required @accuracy@, @desiredInterval@, and @minimumDisplacement@ property values. This is shown in the following example:

```[android]
// Request a different resolution when needed.
subscriber.resolutionPreference(Resolution(Accuracy.MAXIMUM, desiredInterval = 100L, minimumDisplacement = 2.0))
// change request submitted successfully
...
```

```[javascript]
await subscriber.sendChangeRequest({
  accuracy: Accuracy.Low,
  desiredInterval: 3000,
  minimumDisplacement: 5,
})
```

blang[javascript].
  h3(#subscriber-subscribe-asset-state-changes). Stop receiving updates
  
  Stop receiving updates from the publisher by calling the @stop()@ method:

  ```[javascript]
  await subscriber.stop()
  ```

h2(#see-also). See also

* "Overview":/asset-tracking
* "Using the example apps":/asset-tracking/example-apps
