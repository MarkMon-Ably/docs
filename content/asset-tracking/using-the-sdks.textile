---
title: Using the SDKs
section: asset-tracking
index: 20
meta_description: "Ably Asset Tracking SDKs provide an easy way to track multiple assets with realtime location updates powered by the Ably realtime network and Mapbox Navigation SDK with location enhancement."
meta_keywords: "Ably, Asset Tracking SDK, Mapbox, Mapbox Navigation SDK, Ably realtime"
languages:
  - javascript
  - android
  - objc
  - java
  - swift
jump_to:
  Help with:
    - Repositories#repositories
    - Prerequisites#prerequisites
    - Installing the SDK#installing-sdk
    - Initializing the SDK#initializing-sdk
    - See also#see-also
---

This topic explains how to get started using the Ably Asset Tracking SDKs.

h2(#repositories). SDK repositories

The SDKs can be found in the following GitHub repositories:

* "Android":https://github.com/ably/ably-asset-tracking-android
* "iOS":https://github.com/ably/ably-asset-tracking-cocoa
* "JavaScript":https://github.com/ably/ably-asset-tracking-js

h2(#prerequisites). Prerequisites

You need to have a suitable developer environment installed, for example:

* Android - "Android Studio":https://developer.android.com/studio
* iOS - "Xcode":https://developer.apple.com/xcode/
* JavaScript - any suitable environment of your choice 

You also need to have suitable credentials for the various SDK components:

* @ABLY_API_KEY@ - Your Ably API key
* @MAPBOX_DOWNLOADS_TOKEN@ - Mapbox credentials
* @MAPBOX_ACCESS_TOKEN@ - Mapbox credentials
* @GOOGLE_MAPS_API_KEY@ - Google Maps credentials

h2(#installing-sdk). Installing the SDK

You can find information on installing the SDKs in the following resources:

* "Instructions for Android":https://github.com/ably/ably-asset-tracking-android
* "Instructions for iOS":https://github.com/ably/ably-asset-tracking-cocoa
* "Instructions for JavaScript":https://github.com/ably/ably-asset-tracking-js

h2(#initializing-sdk). Initializing the SDK

This section introduces you to some commonly used parameters. 

During initialization the SDK accepts:

Required:

- connection :=  Ably connection information. API keys, any other configuration parameters as needed. 
- map := Mapbox configuration, such as API keys, any other configuration parameters as needed. 
- resolutionPolicy := sets the policy factory to be used to define the target resolution for publishers created from this builder.

Optional:

- locationSource := sets the location source to be used instead of the GPS. The location source will be providing location updates for the Publisher. 
- log := logging configuration.
- debug := debug configuration.
- profile := set the means of transport being used for the initial state of publishers created from this builder. If not set then the default value is @RoutingProfile.DRIVING@.
- locationHistory := the shared flow emitting trip location history when it becomes available.
- locationUpdatedListener := local handler for location updates.
- context := Android context (on Android only).

The following example demonstrates this:

```[android] 
fun startPublisher(
        defaultResolution: Resolution = DEFAULT_RESOLUTION,
        locationSource: LocationSource? = null
    ) {
        publisher = Publisher.publishers()
            .connection(ConnectionConfiguration(ABLY_API_KEY, CLIENT_ID))
            .map(MapConfiguration(MAPBOX_ACCESS_TOKEN))
            .locationSource(locationSource)
            .resolutionPolicy(DefaultResolutionPolicyFactory(defaultResolution, this))
            .androidContext(this)
            .profile(RoutingProfile.DRIVING)
            .start().apply {
                locationHistory
                    .onEach { uploadLocationHistoryData(it) }
                    .launchIn(scope)
            }
    }
```

h2(#main-tasks). Main tasks

- Main classes and methods
- Start/stop tracking
- update resolution (both publisher and subscriber?)

Subscribing - tracking ID is required:

```[android]
private fun createAndStartAssetSubscriber(trackingId: String) {
        scope.launch {
            subscriber = Subscriber.subscribers()
                .connection(ConnectionConfiguration(ABLY_API_KEY, CLIENT_ID))
                .trackingId(trackingId)
                .resolution(resolution)
                .start()
                .apply {
                    locations
                        .onEach { showMarkerOnMap(it.location) }
                        .launchIn(scope)
                    trackableStates
                        .onEach { updateAssetState(it) }
                        .launchIn(scope)
                }
        }
}
```

