Client ID: When a client is authenticated and connected to Ably, they are considered to be an authenticated client. Whilst an authenticated client has a verifiable means to authenticate with Ably, they do not necessarily have an identity. When a client is assigned a trusted identity, it will be given a client ID.
Note: If the client id is null or empty, then the user cannot push a message because the user will be having only 'subscribe' capability. In that case, the application will throw an error.

In this step, we are going to authenticate and get a token from a node.js server.  This step is for authenticating a user based on its client ID.
Install node.js if you do not have it by downloading it from <a href="https://nodejs.org">here.</a>

Next, create a folder and change to this directory. We're going to use express.js for this tutorial. More information on express.js can be found <a href="http://expressjs.com">here.</a>

Run the following command in terminal:

```
$ npm init
```

You will be prompted to provide some information, just hit return in order to accept the defaults and then run the following commands to install our dependencies:

```
$ npm install express --save
$ npm install ably --save
```

Create a file called 'index.js' and add the following code for authentication.

```[nodejs]
const express = require('express')
const Ably = require('Ably');
var realtime = new Ably.Realtime({key: "YOUR_API_KEY" });
const app = express()
const port = 3000
app.listen(port, () => console.log(`Example app listening on port ${port}!`))


app.get('/auth', function (req, res) {
  var tokenParams = {}; /* Use token defaults for now */
  rest.auth.createTokenRequest(tokenParams, function(err, tokenRequest) {
    if (err) {
      res.status(500).send('Error requesting token: ' + JSON.stringify(err));
    } else {
      res.setHeader('Content-Type', 'application/json');
      res.send(JSON.stringify(tokenRequest));
    }
  });
});
```

If you return terminal and start your node server by running the below command:

```
$ node index.js
```

 If you then go to http://localhost:3000/auth you should see the following response:

```[json]
{
  "keyName": "I2ACJQ.Lv8AUQ",
  "ttl": 3600000,
  "timestamp": 1473894038255,
  "capability": "{\"*\":[\"*\"]}",
  "nonce": "f6799a8e7fa6f77b8e1dac55314789b1",
  "mac": "35nifY9SRZ8KRDfKOPIS1qYWGP16r2lD59zJo9TH8pA="
}
```

h3. Tokens

All clients authenticating with Ably must use either use an API key or a token. Tokens are obtained by sending a 'TokenRequest' containing the required token spec to the Ably service. The token may include a set of capabilities (permissions such as subscriber access to a specific channel), an identity (such as the logged-in user’s unique ID) or a TTL (the time before the token expires).

h3. Token Requests

Token requests, unlike tokens, are created and signed by your server without having to communicate with Ably. A token request is simply a JSON object that contains a pre-authorization from your server for a client, effectively stating “Ably, with this signed token, I authorize you to issue a token according to the permissions, ID, and TTL specified, to whoever hands this to you”. Ably is then able to inspect the signature to ensure that the token request is indeed from your server and signed with your private API key. Ably will then issue a token to the client requesting the token. Ably ensures that token requests can only be used soon after creation and can only be used once.
In order to issue a token, we need to make a token request as follows.

h3. Further Reading

The above auth example is a trivial example as anybody accessing our auth endpoint is automatically given a token. However for the purpose of our tutorial this is enough. If you would like more information on auth and on it's implementation head over to <a href="https://www.ably.io/tutorials/token-authentication#lang-nodejs">this tutorial</a>
