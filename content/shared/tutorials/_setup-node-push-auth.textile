In this step, we'll setup an authentication server that'll authenticate the clients with Ably using the "Token Authentication strategy":/core-features/authentication#token-authentication. 

When a client is authenticated and connected to Ably, they are considered to be an authenticated client. Whilst an authenticated client has a verifiable means to authenticate with Ably, they do not necessarily have an identity. When using the Token Authentication, you can have your sever assign the IDs to all the clients at the time of authentication. 

We'll use Node to implement the server. Install node.js if you do not have it by downloading it from <a href="https://nodejs.org">here.</a>

Next, create a folder and change to this directory. We'll be using express.js in this tutorial. It's a JavaScript framework that makes it easy to accept REST request and send responses back, without needing to worry about the protocol level details. More information on express.js can be found <a href="http://expressjs.com">on the website.</a>

Run the following command in terminal:

```[bash]
$ npm init
```

You will be prompted to provide some information, just hit return in order to accept the defaults and then run the following commands to install our dependencies:

```
$ npm install express --save
$ npm install ably --save
```

Create a file called 'index.js' and add the following code for authentication.

```[nodejs]
const express = require('express')
const Ably = require('Ably');
var realtime = new Ably.Realtime({key: "YOUR_API_KEY" });
const app = express()
const port = 3000
app.listen(port, () => console.log(`Example app listening on port ${port}!`))

app.get('/auth', function (req, res) {
  var tokenParams = {
    'clientId': /* Assign a random id */
  }; 
  realtime.auth.createTokenRequest(tokenParams, function(err, tokenRequest) {
    if (err) {
      res.status(500).send('Error requesting token: ' + JSON.stringify(err));
    } else {
      res.setHeader('Content-Type', 'application/json');
      res.send(JSON.stringify(tokenRequest));
    }
  });
});
```

You can return to your terminal and run your node server using the following command:

```[bash]
$ node index.js
```

 If you navigate to http://localhost:3000/auth on your web browser, you should see the following response, indicating authentication was successfull:

```[json]
{
  "keyName": /* your key name */,
  "ttl": 3600000,
  "timestamp": 1473894038255,
  "capability": "{\"*\":[\"*\"]}",
  "nonce": "f6799a8e7fa6f77b8e1dac55314789b1",
  "mac": "35nifY9SRZ8KRDfKOPIS1qYWGP16r2lD59zJo9TH8pA="
}
```


The above auth example is a trivial example as anybody accessing the auth endpoint is automatically given a token. If you would like more information on auth and on it's implementation head over to the<a href="https://www.ably.io/tutorials/token-authentication#lang-nodejs"> Token Authentication tutorial.</a>
