To build your own Android Project, please visit "Android Developers":https://developer.android.com/training/basics/firstapp/creating-project.html website and get familiar with steps necessary to set up your own application.
  
To start using Ably in your Android app, you need to include the Ably Client library. We recommend that you include the latest client library via Gradle in your module-level @gradle.build@ file.

```[groovy]
apply plugin: 'com.android.application'
...
dependencies {
    ...
    compile 'io.ably:ably-android:1.1.0'
}
```

In the above example a specific version of the library is referenced, you can always "check which is the latest stable version":https://bintray.com/ably-io/ably/ably-android and always use that.

After you add the necessary dependencies, you can import the @AblyRealtime@ class into your code and initialize it as shown below:

```[java]
import io.ably.lib.realtime.AblyRealtime;

public class MainActivity extends AppCompatActivity {
        public static final String TEST_PUSH_CHANNEL_NAME = "test_push_channel";
        private static final String PRIVATE_SERVER_AUTH_URL = BuildConfig.ABLY_URL + "/auth";
        private AblyRealtime ablyRealtime;

        private void initAblyRuntime() throws AblyException {
            ClientOptions options = new ClientOptions();
            options.key = BuildConfig.ABLY_KEY;
            //Token auth via server
            options.authUrl = PRIVATE_SERVER_AUTH_URL;
            options.authParams = new Param[]{new Param("clientId", getClientId())};

            ablyRealtime = new AblyRealtime(options);
            ablyRealtime.setAndroidContext(getApplicationContext());
            ablyRealtime.connect();
            ablyRealtime.connection.on(new ConnectionStateListener() {
                @Override
                public void onConnectionStateChanged(ConnectionStateChange state) {
                    logMessage("Connection state changed to : " + state.current.name());
                    switch (state.current) {
                        case connected:
                            //Go to step 2
                            handler.sendMessage(handler.obtainMessage(SUCCESS, STEP_2));
                            break;
                        case disconnected:
                        case failed:
                            handler.sendMessage(handler.obtainMessage(FAILURE));
                            break;
                    }
                }
            });
        }
}
```

Alternatively, you can add your API key in the @local.properties@ file in order to prevent the secret keys from being accidentally committed to the version control system that you use.

<a href="/images/tutorials/android-push/android-code-2.png" target="_blank">
    <img src="/images/tutorials/android-push/android-code-2.png" style="width: 100%" alt="Setting local properties in the android app">
</a>