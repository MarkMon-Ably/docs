This step will show you how you can test push notifications on your device. This is important so that you can check everything is working as you would expect.

Before using any of these methods make sure you have built and run the app on a real iOS device and accepted push notifications.

h3. Testing using Device ID

Device ID: A device ID uniquely identifies a device within Ablyâ€™s services and is assigned automatically at the time the device is activated.
If you launch your application with it attached to the debugger you should be able to find the device ID in the xcode console. Once you have this add the following method to your index.js and replace "YOUR_DEVICE_ID" with the id you just retrieved from your console:

```[nodejs]
app.get('/push/device', function (req, res) {
  var recipient = {
    deviceId: 'YOUR_DEVICE_ID'
  };
  var notification = {
    notification: {
      title: 'Hello from Ably!'
    }
  };
  realtime.push.publish(recipient, notification, function(err) {
    if (err) {
      console.log('Unable to publish push notification; err = ' + err.message);
      return;
    }
    console.log('Push notification published');
    res.send("Push Sent");
  });
})
```

If we restart the server and then go to http://localhost:3000/push/device you should receive a notification on your device like the below image.

<a href="/images/tutorials/apple-push-ios-title.png" target="_blank">
	 <img src="/images/tutorials/apple-push-ios-title.png" style="width: 100%" alt="Apple Push With Title">
</a>

h3. Testing using Client ID

We can test sending push notifications using the client ID, this allows us to push all devices with that client ID by adding the following code to your index.js file:

```[nodejs]
app.get('/push/client', function (req, res) {
  var recipient = {
    clientId: 'ios:push'
  };
  var notification = {
    notification: {
      title: 'Hello from Ably!'
    }
  };
  realtime.push.publish(recipient, notification, function(err) {
    if (err) {
      console.log('Unable to publish push notification; err = ' + err.message);
      return;
    }
    console.log('Push notification published');
    res.send("Push Sent");
  });
})
```
Note: If your client Id is different you will also need to change this.

If we restart the server and then go to http://localhost:3000/push/client you should receive a notification on your device like the below image.

<a href="/images/tutorials/apple-push-ios-title.png" target="_blank">
	 <img src="/images/tutorials/apple-push-ios-title.png" style="width: 100%" alt="Apple Push With Title">
</a>

h3. Testing using Channels

Channel based push notifications allow us to push to a channel we have setup and subscribed to. To test this add the following code to our index.js:

```[nodejs]
app.get('/push/channel', function (req, res) {
  var extras = {
    push: {
      notification: {
        title: 'Hello from Ably!',
        body: 'Example push notification from Ably.'
      },
      data: {
        foo: 'bar',
        baz: 'qux'
      }
    }
  };

  var channel = realtime.channels.get('push');
  channel.publish({ name: 'example', data: 'data', extras: extras }, function(err) {
    if (err) {
      console.log('Unable to publish message with push notification; err = ' + err.message);
      return;
    }
    console.log('Message with push notification published');
    res.send("Push Sent");
  });
})
```

Restart the server and then go to http://localhost:3000/push/channel you should receive a notification on your device. Notice how this notification has both a title and a body. You can do this on all three types of push if you wish.

<a href="/images/tutorials/apple-push-title-message.png" target="_blank">
	 <img src="/images/tutorials/apple-push-title-message.png" style="width: 100%" alt="Apple Push With Title and message">
</a>
